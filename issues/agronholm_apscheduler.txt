[
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/483",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/483/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/483/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/483/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/483",
        "id": 784752752,
        "node_id": "MDU6SXNzdWU3ODQ3NTI3NTI=",
        "number": 483,
        "title": "Combining Trigger with NOT",
        "user": {
            "login": "newTypeGeek",
            "id": 38719080,
            "node_id": "MDQ6VXNlcjM4NzE5MDgw",
            "avatar_url": "https://avatars.githubusercontent.com/u/38719080?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/newTypeGeek",
            "html_url": "https://github.com/newTypeGeek",
            "followers_url": "https://api.github.com/users/newTypeGeek/followers",
            "following_url": "https://api.github.com/users/newTypeGeek/following{/other_user}",
            "gists_url": "https://api.github.com/users/newTypeGeek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/newTypeGeek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/newTypeGeek/subscriptions",
            "organizations_url": "https://api.github.com/users/newTypeGeek/orgs",
            "repos_url": "https://api.github.com/users/newTypeGeek/repos",
            "events_url": "https://api.github.com/users/newTypeGeek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/newTypeGeek/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 348230266,
                "node_id": "MDU6TGFiZWwzNDgyMzAyNjY=",
                "url": "https://api.github.com/repos/agronholm/apscheduler/labels/enhancement",
                "name": "enhancement",
                "color": "84b6eb",
                "default": true,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2021-01-13T03:20:27Z",
        "updated_at": "2021-01-13T07:20:17Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Current Combining Trigger supports only `AND`, `OR`. Is there any plan to include also `NOT` trigger that is used to exclude several days to trigger the scheduled job (My use case is to exclude some holidays)\r\n\r\nThanks :)",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/465",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/465/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/465/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/465/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/465",
        "id": 711451014,
        "node_id": "MDU6SXNzdWU3MTE0NTEwMTQ=",
        "number": 465,
        "title": "APScheduler 4.0 progress tracking",
        "user": {
            "login": "agronholm",
            "id": 130003,
            "node_id": "MDQ6VXNlcjEzMDAwMw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/130003?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/agronholm",
            "html_url": "https://github.com/agronholm",
            "followers_url": "https://api.github.com/users/agronholm/followers",
            "following_url": "https://api.github.com/users/agronholm/following{/other_user}",
            "gists_url": "https://api.github.com/users/agronholm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/agronholm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/agronholm/subscriptions",
            "organizations_url": "https://api.github.com/users/agronholm/orgs",
            "repos_url": "https://api.github.com/users/agronholm/repos",
            "events_url": "https://api.github.com/users/agronholm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/agronholm/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": {
            "url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1",
            "html_url": "https://github.com/agronholm/apscheduler/milestone/1",
            "labels_url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1/labels",
            "id": 1673437,
            "node_id": "MDk6TWlsZXN0b25lMTY3MzQzNw==",
            "number": 1,
            "title": "4.0",
            "description": "Replace pickle serialization with more secure alternatives\r\nPass a context object to job callables (optional?)\r\nForce coalesce=True but pass all scheduled run times in the job context argument\r\nDon't automatically remove any jobs from job stores anymore\r\nOverhaul the test suite\r\nDrop the PyQT scheduler",
            "creator": {
                "login": "agronholm",
                "id": 130003,
                "node_id": "MDQ6VXNlcjEzMDAwMw==",
                "avatar_url": "https://avatars.githubusercontent.com/u/130003?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/agronholm",
                "html_url": "https://github.com/agronholm",
                "followers_url": "https://api.github.com/users/agronholm/followers",
                "following_url": "https://api.github.com/users/agronholm/following{/other_user}",
                "gists_url": "https://api.github.com/users/agronholm/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/agronholm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/agronholm/subscriptions",
                "organizations_url": "https://api.github.com/users/agronholm/orgs",
                "repos_url": "https://api.github.com/users/agronholm/repos",
                "events_url": "https://api.github.com/users/agronholm/events{/privacy}",
                "received_events_url": "https://api.github.com/users/agronholm/received_events",
                "type": "User",
                "site_admin": false
            },
            "open_issues": 17,
            "closed_issues": 4,
            "state": "open",
            "created_at": "2016-03-30T07:24:12Z",
            "updated_at": "2020-09-29T21:05:40Z",
            "due_on": null,
            "closed_at": null
        },
        "comments": 21,
        "created_at": "2020-09-29T21:05:40Z",
        "updated_at": "2021-01-20T17:37:22Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "I'm opening this issue as an easy way to interested parties to track development progress of the next major APScheduler release (v4.0).\r\n\r\n## Terminology changes in v4.0\r\n\r\nThe old term of \"Job\", as it was, is gone, replaced by the following concepts which are closer to the terminology used by Celery:\r\n\r\n- Task definition: a uniquely named callable coupled with configuration like maximum number of instances, misfire grace time etc.\r\n- Schedule: binds a trigger with a task definition\r\n- Job: queued work item for an executor (binds to a task definition, and optionally a schedule)\r\n\r\nAlso, the term \"executor\" is now being changed to \"worker\".\r\n\r\nNotice that the terminology may still change before the final release!\r\n\r\n## Planned major changes\r\n\r\nv4.0 is a ground-up redesign that aims to fix all the long-standing flaws found in APScheduler over the years.\r\n\r\nChecked boxes are changes that have already been implemented.\r\n\r\n- [X] Async-first design, with support for asyncio, curio and trio (via [AnyIO](https://github.com/agronholm/anyio))\r\n- [X] Static typing friendly ([PEP 561](https://www.python.org/dev/peps/pep-0561/))\r\n- [X] Support for serializers other than pickle\r\n- [X] Broader time zone support, including zoneinfo time zones ([PEP 615](https://www.python.org/dev/peps/pep-0615/))\r\n- [X] Drop support for Python < 3.7\r\n- [X] [Calendar interval trigger](https://github.com/agronholm/apscheduler/blob/master/apscheduler/triggers/calendarinterval.py)\r\n- [X] Stateful triggers\r\n- [X] `threshold` value for `AndTrigger` (resolves issues with contained `IntervalTrigger` instances)\r\n- [X] The interval trigger should start right away and not after the first interval (#375)\r\n- [ ] Persistent store sharing among multiple schedulers (arguably the most needed feature ever for APScheduler)\r\n- [ ] Decoupling of schedulers and workers\r\n- [ ] Schedule-level jitter support\r\n- [ ] Context-local job metadata information\r\n- [ ] Easy launching of tasks immediately without needing a schedule\r\n- [ ] Failure resilience for persistent data stores (so they don't crash the scheduler on a temporary outage)\r\n\r\nPotential extra features I would like to have:\r\n\r\n- [ ] Support for tags in task definitions, schedules and jobs\r\n- [ ] Ability to cancel jobs\r\n- [ ] Timeouts for jobs\r\n- [ ] \"threshold\" value for `OrTrigger` (#427)\r\n\r\nYou will notice that I have dropped a number of features from master. Some I may never add back to v4.0, even if requested, but do voice your wishes in this issue (and this issue **only** \u2013 I will summarily close such requests in new tickets). Others have been removed only temporarily to give me space for the redesign.\r\n\r\n## Features on the chopping block\r\n\r\n- Twisted scheduler (may be usable through the async scheduler if AnyIO ever gets Twisted support)\r\n- Tornado scheduler (just use the async scheduler)\r\n- Gevent scheduler (does not play well with the new architecture)\r\n- Qt scheduler (difficult to test/maintain)\r\n- Redis as a data store (may not have sophisticated enough querying capabilities)\r\n- Rethink data store (the company has gone belly up some time ago)\r\n- Zookeeper as a data store (may not have sophisticated enough querying capabilities)\r\n\r\nBeing on the chopping block does not mean the feature will be gone forever! It may return in subsequent minor release or even before the 4.0 final release if I deem it feasible to implement on top of the new architecture.\r\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/453",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/453/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/453/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/453/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/453",
        "id": 681119916,
        "node_id": "MDU6SXNzdWU2ODExMTk5MTY=",
        "number": 453,
        "title": "Having the threshold also on OrTrigger?",
        "user": {
            "login": "sneko",
            "id": 8195958,
            "node_id": "MDQ6VXNlcjgxOTU5NTg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8195958?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sneko",
            "html_url": "https://github.com/sneko",
            "followers_url": "https://api.github.com/users/sneko/followers",
            "following_url": "https://api.github.com/users/sneko/following{/other_user}",
            "gists_url": "https://api.github.com/users/sneko/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sneko/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sneko/subscriptions",
            "organizations_url": "https://api.github.com/users/sneko/orgs",
            "repos_url": "https://api.github.com/users/sneko/repos",
            "events_url": "https://api.github.com/users/sneko/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sneko/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 348230266,
                "node_id": "MDU6TGFiZWwzNDgyMzAyNjY=",
                "url": "https://api.github.com/repos/agronholm/apscheduler/labels/enhancement",
                "name": "enhancement",
                "color": "84b6eb",
                "default": true,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2020-08-18T15:10:13Z",
        "updated_at": "2020-09-26T21:47:20Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Hi @agronholm ,\r\n\r\nJust curious : you added the threshold parameter onto `AndTrigger` but I'm wondering if you plan or if you could add it to the `OrTrigger`?\r\n\r\nIn my case I may have different intervals that can sometimes be distant from 0, 1 or 2 seconds and I would like to avoid triggering all of them, but just one when in the same threshold/window.\r\n\r\nThank you,",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/445",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/445/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/445/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/445/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/445",
        "id": 650508364,
        "node_id": "MDU6SXNzdWU2NTA1MDgzNjQ=",
        "number": 445,
        "title": "Possible for EVENT_JOB_EXECUTED to fire before EVENT_JOB_SUBMITTED",
        "user": {
            "login": "invokermain",
            "id": 44192816,
            "node_id": "MDQ6VXNlcjQ0MTkyODE2",
            "avatar_url": "https://avatars.githubusercontent.com/u/44192816?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/invokermain",
            "html_url": "https://github.com/invokermain",
            "followers_url": "https://api.github.com/users/invokermain/followers",
            "following_url": "https://api.github.com/users/invokermain/following{/other_user}",
            "gists_url": "https://api.github.com/users/invokermain/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/invokermain/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/invokermain/subscriptions",
            "organizations_url": "https://api.github.com/users/invokermain/orgs",
            "repos_url": "https://api.github.com/users/invokermain/repos",
            "events_url": "https://api.github.com/users/invokermain/events{/privacy}",
            "received_events_url": "https://api.github.com/users/invokermain/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 348230264,
                "node_id": "MDU6TGFiZWwzNDgyMzAyNjQ=",
                "url": "https://api.github.com/repos/agronholm/apscheduler/labels/bug",
                "name": "bug",
                "color": "ee0701",
                "default": true,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2020-07-03T10:34:59Z",
        "updated_at": "2020-07-15T00:24:26Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Seems to affect Cron trigger occasionally. The ordering of job events is not guaranteed.\r\n\r\n## Expected Behavior\r\nThe SUBMITTED event for a job should always fire before its corresponding EXECUTED event.\r\n\r\n## Current Behavior\r\nA job's EXECUTED event can fire before the SUBMITTED event leading to unexpected behaviour.\r\n\r\n## Steps to Reproduce\r\nhttps://repl.it/repls/CultivatedOrneryVideogames\r\n\r\n```python3\r\nfrom apscheduler.events import (\r\n    EVENT_JOB_EXECUTED,\r\n    EVENT_JOB_SUBMITTED,\r\n)\r\nfrom apscheduler.schedulers.blocking import BlockingScheduler\r\nfrom time import sleep\r\nimport datetime as dt\r\n\r\ndef my_job():\r\n  print(f\"my job: {dt.datetime.now()}\")\r\n  return\r\n\r\n\r\ndef executed_listener(event):\r\n  print(f\"job executed: {dt.datetime.now()}\")\r\n\r\ndef submitted_listener(event):\r\n  print(f\"job submitted: {dt.datetime.now()}\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n  print(\"starting\")\r\n  scheduler = BlockingScheduler()\r\n\r\n  scheduler.add_job(\r\n    func=my_job,\r\n    id=\"my_job\",\r\n    trigger=\"cron\",\r\n    second=\"*/10\"\r\n  )\r\n\r\n  scheduler.add_listener(executed_listener, EVENT_JOB_EXECUTED)\r\n  scheduler.add_listener(submitted_listener, EVENT_JOB_SUBMITTED)\r\n\r\n  scheduler.start()\r\n\r\n  while True:\r\n    sleep(60)\r\n```\r\n\r\n## Context (Environment)\r\nAttempting to audit job run's to a SQL database means sometimes it is audited incorrectly. (e.g. Doing Insert row on SUBMITTED, update row on EXECUTED would lead to missed events as the row does not exist when the EXECUTED callback fires).",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/434",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/434/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/434/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/434/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/434",
        "id": 619086655,
        "node_id": "MDU6SXNzdWU2MTkwODY2NTU=",
        "number": 434,
        "title": "Job.next_run_time not available form the outside",
        "user": {
            "login": "Hendiadyoin1",
            "id": 37629766,
            "node_id": "MDQ6VXNlcjM3NjI5NzY2",
            "avatar_url": "https://avatars.githubusercontent.com/u/37629766?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Hendiadyoin1",
            "html_url": "https://github.com/Hendiadyoin1",
            "followers_url": "https://api.github.com/users/Hendiadyoin1/followers",
            "following_url": "https://api.github.com/users/Hendiadyoin1/following{/other_user}",
            "gists_url": "https://api.github.com/users/Hendiadyoin1/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Hendiadyoin1/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Hendiadyoin1/subscriptions",
            "organizations_url": "https://api.github.com/users/Hendiadyoin1/orgs",
            "repos_url": "https://api.github.com/users/Hendiadyoin1/repos",
            "events_url": "https://api.github.com/users/Hendiadyoin1/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Hendiadyoin1/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2020-05-15T16:12:22Z",
        "updated_at": "2020-06-17T12:35:59Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I'm working with the scheduler in a Django App (should not affect behavior)\r\n\r\nI create a Job to Backup at specific Intervals and want to log the next execution time.\r\nNow i log it with:\r\n```python\r\nlogger.info(f\"next Backup at {scheduler.get_job(job_id).next_run_time.strftime('%Y-%m-%d %H:%M:%S')}\") \r\n```\r\nthis raises an attribute Error:\r\n\r\n>     logger.info(f\"next Backup at {scheduler.get_job(job_id).next_run_time.strftime('%Y-%m-%d %H:%M:%S')}\") \r\n> AttributeError: next_run_time\r\n\r\nbut when just logging the job i get a right output:\r\n> Backup.backup (trigger: interval[0:10:00], next run at: 2020-05-15 17:49:26 CEST)\r\n\r\nwhen looking in the code i see that the job uses `self.next_run_time`\r\n\r\nso the attribute is surely available, but not accessible as it seems\r\nin addition to that is the AttributeError incomplete just saying the attribute, not that this attribute does not exist, which seems pretty wierd...\r\n\r\ncomplete relevant code below code below:\r\n```python\r\n def startSubroutine(self)->None:\r\n        \"\"\"\r\n        Start the backup-subroutine\r\n        \"\"\"\r\n        self.start_time = datetime.datetime.now()\r\n        self.scheduler = BackgroundScheduler()\r\n        interval = self.settings['interval']\r\n        self.job_id = self.scheduler.add_job(self.backup, 'interval', **interval).id\r\n\r\n        # prepare info string to log\r\n        info_str = format_interval(\"Scheduled backup for \", interval)\r\n\r\n        logger.info(info_str)\r\n        # the critical line:\r\n        logger.info(f\"Next Backup at {self.scheduler.get_job(self.job_id).next_run_time.strftime('%Y-%m-%d %H:%M:%S')}\")\r\n\r\n        # start subroutine\r\n        self.scheduler.start()\r\n```",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/427",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/427/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/427/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/427/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/427",
        "id": 594657920,
        "node_id": "MDU6SXNzdWU1OTQ2NTc5MjA=",
        "number": 427,
        "title": "OrTrigger does not work with DateTriggers",
        "user": {
            "login": "DmitriiKolesnichenko",
            "id": 6493842,
            "node_id": "MDQ6VXNlcjY0OTM4NDI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6493842?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/DmitriiKolesnichenko",
            "html_url": "https://github.com/DmitriiKolesnichenko",
            "followers_url": "https://api.github.com/users/DmitriiKolesnichenko/followers",
            "following_url": "https://api.github.com/users/DmitriiKolesnichenko/following{/other_user}",
            "gists_url": "https://api.github.com/users/DmitriiKolesnichenko/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/DmitriiKolesnichenko/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DmitriiKolesnichenko/subscriptions",
            "organizations_url": "https://api.github.com/users/DmitriiKolesnichenko/orgs",
            "repos_url": "https://api.github.com/users/DmitriiKolesnichenko/repos",
            "events_url": "https://api.github.com/users/DmitriiKolesnichenko/events{/privacy}",
            "received_events_url": "https://api.github.com/users/DmitriiKolesnichenko/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 348230264,
                "node_id": "MDU6TGFiZWwzNDgyMzAyNjQ=",
                "url": "https://api.github.com/repos/agronholm/apscheduler/labels/bug",
                "name": "bug",
                "color": "ee0701",
                "default": true,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": {
            "url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1",
            "html_url": "https://github.com/agronholm/apscheduler/milestone/1",
            "labels_url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1/labels",
            "id": 1673437,
            "node_id": "MDk6TWlsZXN0b25lMTY3MzQzNw==",
            "number": 1,
            "title": "4.0",
            "description": "Replace pickle serialization with more secure alternatives\r\nPass a context object to job callables (optional?)\r\nForce coalesce=True but pass all scheduled run times in the job context argument\r\nDon't automatically remove any jobs from job stores anymore\r\nOverhaul the test suite\r\nDrop the PyQT scheduler",
            "creator": {
                "login": "agronholm",
                "id": 130003,
                "node_id": "MDQ6VXNlcjEzMDAwMw==",
                "avatar_url": "https://avatars.githubusercontent.com/u/130003?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/agronholm",
                "html_url": "https://github.com/agronholm",
                "followers_url": "https://api.github.com/users/agronholm/followers",
                "following_url": "https://api.github.com/users/agronholm/following{/other_user}",
                "gists_url": "https://api.github.com/users/agronholm/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/agronholm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/agronholm/subscriptions",
                "organizations_url": "https://api.github.com/users/agronholm/orgs",
                "repos_url": "https://api.github.com/users/agronholm/repos",
                "events_url": "https://api.github.com/users/agronholm/events{/privacy}",
                "received_events_url": "https://api.github.com/users/agronholm/received_events",
                "type": "User",
                "site_admin": false
            },
            "open_issues": 17,
            "closed_issues": 4,
            "state": "open",
            "created_at": "2016-03-30T07:24:12Z",
            "updated_at": "2020-09-29T21:05:40Z",
            "due_on": null,
            "closed_at": null
        },
        "comments": 4,
        "created_at": "2020-04-05T21:35:46Z",
        "updated_at": "2020-05-19T14:34:09Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I create trigger `OrTrigger(DateTrigger(date1), DateTrigger(date2))`.\r\n`date1` < `date2`.\r\n\r\n## Expected Behavior\r\nTrigger fire twice: in `date1` and `date2`.\r\n\r\n## Current Behavior\r\nTrigger fires once: in `date1`.\r\n\r\n## Detailed Description\r\nIt occurs because `DateTrigger.get_next_fire_time()` returns `None` if `previous_fire_time` is not `None`. If we use `OrTrigger`, we pass `previous_fire_time` to all included triggers. And all of them returns `None` after the first fire of `OrTrigge`. So it will never work multiple times.\r\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/412",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/412/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/412/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/412/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/412",
        "id": 542196397,
        "node_id": "MDU6SXNzdWU1NDIxOTYzOTc=",
        "number": 412,
        "title": "interval cron issue with microseconds",
        "user": {
            "login": "virtualdvid",
            "id": 33104726,
            "node_id": "MDQ6VXNlcjMzMTA0NzI2",
            "avatar_url": "https://avatars.githubusercontent.com/u/33104726?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/virtualdvid",
            "html_url": "https://github.com/virtualdvid",
            "followers_url": "https://api.github.com/users/virtualdvid/followers",
            "following_url": "https://api.github.com/users/virtualdvid/following{/other_user}",
            "gists_url": "https://api.github.com/users/virtualdvid/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/virtualdvid/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/virtualdvid/subscriptions",
            "organizations_url": "https://api.github.com/users/virtualdvid/orgs",
            "repos_url": "https://api.github.com/users/virtualdvid/repos",
            "events_url": "https://api.github.com/users/virtualdvid/events{/privacy}",
            "received_events_url": "https://api.github.com/users/virtualdvid/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2019-12-24T19:13:09Z",
        "updated_at": "2020-05-23T19:21:15Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I'm trying to setup a simple job with an interval of 5 minutes:\r\n\r\n```python\r\nscheduler.add_job(\r\n    func=ping_db,\r\n    id='ping_db',\r\n    trigger=\"interval\",\r\n    minutes=5,\r\n    misfire_grace_time=None,\r\n    replace_existing=True\r\n)\r\n```\r\nnote: happens with `trigger='cron'` too which is setup at 1am to run a process.\r\n\r\n## Expected Behavior\r\nSince the function just ping a db with a sql statement `select1`. Its execution is really fast. I'm expecting to get in my logs:\r\n\r\n```python\r\nINFO 2019-12-24 10:29:01,743 {file name: base.py Line: 144 -- run_job()} Job \"ping_db (trigger: interval[0:05:00], next run at: 2019-12-24 18:34:00 UTC)\" executed successfully\r\nDEBUG 2019-12-24 10:29:01,767 {file name: base.py Line: 1020 -- _process_jobs()} Next wakeup is due at 2019-12-24 18:34:00+00:00 (in 299.406608 seconds)\r\n```\r\n\r\n## Current Behavior\r\nWhat I'm getting is multiple next run times and the only difference is the microseconds:\r\n\r\n```python\r\nDEBUG 2019-12-24 10:29:01,767 {file name: base.py Line: 1020 -- _process_jobs()} Next wakeup is due at 2019-12-24 18:34:00+00:00 (in 299.406608 seconds)\r\nDEBUG 2019-12-24 10:29:01,846 {file name: base.py Line: 1020 -- _process_jobs()} Next wakeup is due at 2019-12-24 18:34:00+00:00 (in 299.400619 seconds)\r\nDEBUG 2019-12-24 10:29:01,928 {file name: base.py Line: 1020 -- _process_jobs()} Next wakeup is due at 2019-12-24 18:34:00+00:00 (in 299.390624 seconds)\r\nDEBUG 2019-12-24 10:29:02,017 {file name: base.py Line: 1020 -- _process_jobs()} Next wakeup is due at 2019-12-24 18:34:00+00:00 (in 299.389619 seconds)\r\nDEBUG 2019-12-24 10:29:02,354 {file name: base.py Line: 1020 -- _process_jobs()} Next wakeup is due at 2019-12-24 18:34:00+00:00 (in 298.807571 seconds)\r\nDEBUG 2019-12-24 10:29:02,434 {file name: base.py Line: 1020 -- _process_jobs()} Next wakeup is due at 2019-12-24 18:34:00+00:00 (in 298.801572 seconds)\r\n```\r\n\r\nApplication in Flask\r\n\r\n## Context (Environment)\r\nPython 3.7.0\r\nWindows 10\r\nMicrosoft Windows Server 1607\r\nInternet Information Services 10.0.14393.0\r\n\r\nI'm using just 1 worker in IIS, and configuring the scheduler in the app with:\r\n\r\n```python\r\n    # app scheduler config\r\n    app.config['SCHEDULER_JOBSTORES'] = {\r\n        'default': SQLAlchemyJobStore(engine=engine)\r\n    }\r\n    app.config['SCHEDULER_EXECUTORS'] = {\r\n        'default': {'type': 'threadpool', 'max_workers': 20}, # ThreadPoolExecutor(20),\r\n        # 'processpool': ProcessPoolExecutor(5)\r\n    }\r\n    app.config['SCHEDULER_JOB_DEFAULTS'] = {\r\n        'misfire_grace_time': None,\r\n        'coalesce': True,\r\n        'max_instances': 1,\r\n        'replace_existing': True,\r\n    }\r\n```\r\n\r\ntried `'coalesce': True` and `'coalesce': False`.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/391",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/391/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/391/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/391/events",
        "html_url": "https://github.com/agronholm/apscheduler/pull/391",
        "id": 494396641,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzE4MTU2NDEz",
        "number": 391,
        "title": "add IntervalTrigger test with sting start_time",
        "user": {
            "login": "crhan",
            "id": 532040,
            "node_id": "MDQ6VXNlcjUzMjA0MA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/532040?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/crhan",
            "html_url": "https://github.com/crhan",
            "followers_url": "https://api.github.com/users/crhan/followers",
            "following_url": "https://api.github.com/users/crhan/following{/other_user}",
            "gists_url": "https://api.github.com/users/crhan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/crhan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/crhan/subscriptions",
            "organizations_url": "https://api.github.com/users/crhan/orgs",
            "repos_url": "https://api.github.com/users/crhan/repos",
            "events_url": "https://api.github.com/users/crhan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/crhan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-09-17T04:39:34Z",
        "updated_at": "2020-05-23T06:48:40Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/agronholm/apscheduler/pulls/391",
            "html_url": "https://github.com/agronholm/apscheduler/pull/391",
            "diff_url": "https://github.com/agronholm/apscheduler/pull/391.diff",
            "patch_url": "https://github.com/agronholm/apscheduler/pull/391.patch"
        },
        "body": "Just to present the problem which I have met. But I cannot find a good way to fix it.\r\n\r\nIf you use a __str__ to present the `start_date` like `'2009-08-04T00:00:02+02:00'`. Then the `convert_to_datetime` function will return a __datetime__ object with a __tzinfo__ which is a __FixedOffset__ object.\r\n\r\nThe __FixedOffset__ object, which doesn't have the attribute `_utcoffset`, will report an error like below:\r\n\r\n```python\r\ntests/test_triggers.py:483: in test_before\r\n    assert trigger.get_next_fire_time(None, now) == trigger.start_date\r\napscheduler/triggers/interval.py:66: in get_next_fire_time\r\n    return self.timezone.normalize(next_fire_time)\r\n../../.local/share/virtualenvs/playground-py3.7/lib/python3.7/site-packages/pytz/tzinfo.py:252: in normalize\r\n    offset = dt.tzinfo._utcoffset\r\nE   AttributeError: '_FixedOffset' object has no attribute '_utcoffset'\r\n```",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/389",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/389/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/389/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/389/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/389",
        "id": 490304095,
        "node_id": "MDU6SXNzdWU0OTAzMDQwOTU=",
        "number": 389,
        "title": "Job with triggers or[cron, cron] scheduled for the past is never run or removed",
        "user": {
            "login": "sersorrel",
            "id": 9433472,
            "node_id": "MDQ6VXNlcjk0MzM0NzI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9433472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sersorrel",
            "html_url": "https://github.com/sersorrel",
            "followers_url": "https://api.github.com/users/sersorrel/followers",
            "following_url": "https://api.github.com/users/sersorrel/following{/other_user}",
            "gists_url": "https://api.github.com/users/sersorrel/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sersorrel/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sersorrel/subscriptions",
            "organizations_url": "https://api.github.com/users/sersorrel/orgs",
            "repos_url": "https://api.github.com/users/sersorrel/repos",
            "events_url": "https://api.github.com/users/sersorrel/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sersorrel/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-09-06T12:36:49Z",
        "updated_at": "2019-09-06T12:36:49Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "## Expected Behavior\r\n<!--- Tell us what should happen -->\r\nIf a job is scheduled and it can only be run in the past (specifically, far enough in the past that it will not be run \u2013 longer ago than `misfire_grace_time`), it should be removed from the jobstore.\r\n\r\n## Current Behavior\r\n<!--- Tell us what happens instead of the expected behavior -->\r\nJobs which are scheduled to occur far in the past with a trigger like `or[cron, cron]` don't have a `next_run_time` in the database, but also aren't removed:\r\n\r\n```\r\n# select id,next_run_time from apscheduler_jobs ;\r\n                   id                   | next_run_time\r\n----------------------------------------+---------------\r\n reminders_for_2019_1_supervisor_submit |\r\n reminders_for_2019_1_student_invite    |\r\n 2019_1_student_complete                |    1576886340\r\n```\r\n\r\n## Steps to Reproduce\r\n<!--- Provide a link to a live example, or an unambiguous set of steps to -->\r\n<!--- reproduce this bug. Include code to reproduce, if relevant -->\r\nI don't have time right now to minimise this, sorry. I'm encountering it with [this application](https://github.com/wsi-cogs/deploy) \u2013 if you can work out how to get it running, then schedule a rotation with some dates far in the past (e.g. a year ago), and look at the `reminders_for_*` jobs in the database ([here](https://github.com/wsi-cogs/backend/blob/c635c1086feb36494b55235a6d7541b9fa0c0b39/cogs/scheduler/scheduler.py#L157-L183) is the code which schedules those jobs).\r\n\r\nI will hopefully have time to look at making a smaller testcase over the weekend.\r\n\r\n## Context (Environment)\r\n<!--- How has this issue affected you? What are you trying to accomplish? -->\r\n<!--- Providing context helps us come up with a solution that is most useful in the real world -->\r\nThis should never pose a real problem for us (since scheduling events more than `misfire_grace_time` in the past is a very rare occurrence in our application), but it's a little unnerving to have jobs sitting around in the database that will never be executed, and I don't really want to complicate the already-complex scheduling logic with tests to make sure that the triggers are all in the future before scheduling a job.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/384",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/384/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/384/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/384/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/384",
        "id": 472786967,
        "node_id": "MDU6SXNzdWU0NzI3ODY5Njc=",
        "number": 384,
        "title": "Standard tzinfo is not enough for apscheduler",
        "user": {
            "login": "b4stien",
            "id": 1778107,
            "node_id": "MDQ6VXNlcjE3NzgxMDc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1778107?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/b4stien",
            "html_url": "https://github.com/b4stien",
            "followers_url": "https://api.github.com/users/b4stien/followers",
            "following_url": "https://api.github.com/users/b4stien/following{/other_user}",
            "gists_url": "https://api.github.com/users/b4stien/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/b4stien/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/b4stien/subscriptions",
            "organizations_url": "https://api.github.com/users/b4stien/orgs",
            "repos_url": "https://api.github.com/users/b4stien/repos",
            "events_url": "https://api.github.com/users/b4stien/events{/privacy}",
            "received_events_url": "https://api.github.com/users/b4stien/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 348258191,
                "node_id": "MDU6TGFiZWwzNDgyNTgxOTE=",
                "url": "https://api.github.com/repos/agronholm/apscheduler/labels/documentation",
                "name": "documentation",
                "color": "ededed",
                "default": true,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": {
            "url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1",
            "html_url": "https://github.com/agronholm/apscheduler/milestone/1",
            "labels_url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1/labels",
            "id": 1673437,
            "node_id": "MDk6TWlsZXN0b25lMTY3MzQzNw==",
            "number": 1,
            "title": "4.0",
            "description": "Replace pickle serialization with more secure alternatives\r\nPass a context object to job callables (optional?)\r\nForce coalesce=True but pass all scheduled run times in the job context argument\r\nDon't automatically remove any jobs from job stores anymore\r\nOverhaul the test suite\r\nDrop the PyQT scheduler",
            "creator": {
                "login": "agronholm",
                "id": 130003,
                "node_id": "MDQ6VXNlcjEzMDAwMw==",
                "avatar_url": "https://avatars.githubusercontent.com/u/130003?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/agronholm",
                "html_url": "https://github.com/agronholm",
                "followers_url": "https://api.github.com/users/agronholm/followers",
                "following_url": "https://api.github.com/users/agronholm/following{/other_user}",
                "gists_url": "https://api.github.com/users/agronholm/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/agronholm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/agronholm/subscriptions",
                "organizations_url": "https://api.github.com/users/agronholm/orgs",
                "repos_url": "https://api.github.com/users/agronholm/repos",
                "events_url": "https://api.github.com/users/agronholm/events{/privacy}",
                "received_events_url": "https://api.github.com/users/agronholm/received_events",
                "type": "User",
                "site_admin": false
            },
            "open_issues": 17,
            "closed_issues": 4,
            "state": "open",
            "created_at": "2016-03-30T07:24:12Z",
            "updated_at": "2020-09-29T21:05:40Z",
            "due_on": null,
            "closed_at": null
        },
        "comments": 20,
        "created_at": "2019-07-25T10:26:01Z",
        "updated_at": "2020-09-29T21:12:50Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "## Expected Behavior\r\n\r\n`apscheduler` should work with `next_run_time` specified with standard `tzinfo`.\r\n\r\n## Current Behavior\r\n\r\n`apscheduler` crashes.\r\n\r\n## Steps to Reproduce\r\n\r\n```\r\nfrom datetime import datetime, timedelta\r\nfrom dateutil.tz import tzutc\r\n\r\nnext_run_time = datetime.now(tzutc()) + timedelta(seconds=30)\r\nscheduler.add_job(\r\n    lambda: print(\"Hello\"), trigger=IntervalTrigger(minutes=1), next_run_time=next_run_time\r\n)\r\n\r\n```\r\n\r\n## Context (Environment)\r\n\r\n`apscheduler` works only with `pytz` objects, the problematic call is there : https://github.com/agronholm/apscheduler/blob/18b50d9ee9ff14e816b557e34d7d3abc861d57e5/apscheduler/triggers/interval.py#L66\r\n\r\nIf `next_fire_time` is not stamped with a `pytz.tzinfo.BaseTzInfo`, it crashes.\r\n\r\n`self.timezone` is a `pytz` object, `normalize()` is a `pytz` function which expects a `pytz.tzinfo.BaseTzInfo` as argument (see https://github.com/stub42/pytz/blob/master/src/pytz/tzinfo.py#L66) with an internal (and absent from the standard `tzinfo`) `_utcoffset` there : https://github.com/stub42/pytz/blob/master/src/pytz/tzinfo.py#L252.\r\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/381",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/381/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/381/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/381/events",
        "html_url": "https://github.com/agronholm/apscheduler/pull/381",
        "id": 469194014,
        "node_id": "MDExOlB1bGxSZXF1ZXN0Mjk4NDcwMzA4",
        "number": 381,
        "title": "Crontab tweaks",
        "user": {
            "login": "kaos",
            "id": 72965,
            "node_id": "MDQ6VXNlcjcyOTY1",
            "avatar_url": "https://avatars.githubusercontent.com/u/72965?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kaos",
            "html_url": "https://github.com/kaos",
            "followers_url": "https://api.github.com/users/kaos/followers",
            "following_url": "https://api.github.com/users/kaos/following{/other_user}",
            "gists_url": "https://api.github.com/users/kaos/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kaos/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kaos/subscriptions",
            "organizations_url": "https://api.github.com/users/kaos/orgs",
            "repos_url": "https://api.github.com/users/kaos/repos",
            "events_url": "https://api.github.com/users/kaos/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kaos/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-07-17T13:28:59Z",
        "updated_at": "2020-05-23T06:48:41Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/agronholm/apscheduler/pulls/381",
            "html_url": "https://github.com/agronholm/apscheduler/pull/381",
            "diff_url": "https://github.com/agronholm/apscheduler/pull/381.diff",
            "patch_url": "https://github.com/agronholm/apscheduler/pull/381.patch"
        },
        "body": "I ran into some issues where we need the crontab syntax to be more in line with the standard, so the output (actual run times for the job) aligns with what other tools say they would given a crontab expression.\r\n\r\nThis PR also addresses some cosmetics (adds support for `@macro` expressions as a short-hand for a full expression)\r\n\r\nThe two most notable fixes is support for day of week 0 being Sunday, and that when you specify both day of month _and_ day of week, you should run when either of them match, not both.\r\n\r\nAll changes should be transparent (fully backwards compatible). If you don't use \"strict\" mode, there is no changed behaviour.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/380",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/380/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/380/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/380/events",
        "html_url": "https://github.com/agronholm/apscheduler/pull/380",
        "id": 462749245,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MjkzMzY4NTY0",
        "number": 380,
        "title": "Implement issue #297 - Passing the scheduled start time to jobs",
        "user": {
            "login": "anon-john",
            "id": 51913342,
            "node_id": "MDQ6VXNlcjUxOTEzMzQy",
            "avatar_url": "https://avatars.githubusercontent.com/u/51913342?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/anon-john",
            "html_url": "https://github.com/anon-john",
            "followers_url": "https://api.github.com/users/anon-john/followers",
            "following_url": "https://api.github.com/users/anon-john/following{/other_user}",
            "gists_url": "https://api.github.com/users/anon-john/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/anon-john/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/anon-john/subscriptions",
            "organizations_url": "https://api.github.com/users/anon-john/orgs",
            "repos_url": "https://api.github.com/users/anon-john/repos",
            "events_url": "https://api.github.com/users/anon-john/events{/privacy}",
            "received_events_url": "https://api.github.com/users/anon-john/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 12,
        "created_at": "2019-07-01T14:33:20Z",
        "updated_at": "2020-05-23T06:48:41Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/agronholm/apscheduler/pulls/380",
            "html_url": "https://github.com/agronholm/apscheduler/pull/380",
            "diff_url": "https://github.com/agronholm/apscheduler/pull/380.diff",
            "patch_url": "https://github.com/agronholm/apscheduler/pull/380.patch"
        },
        "body": "This PR implements the feature request from #297. Proposed changes were tested against py36, py37, py27 and flake8 with memjobstore and sqlalchemyjobstore stores. At the moment, unfortunately, I'm not able to test with mongo/redis/zookeeper/rethinkdb.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/373",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/373/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/373/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/373/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/373",
        "id": 436636457,
        "node_id": "MDU6SXNzdWU0MzY2MzY0NTc=",
        "number": 373,
        "title": "Until start apcheduler allows add multiple jobs with the same id",
        "user": {
            "login": "senseysensor",
            "id": 769430,
            "node_id": "MDQ6VXNlcjc2OTQzMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/769430?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/senseysensor",
            "html_url": "https://github.com/senseysensor",
            "followers_url": "https://api.github.com/users/senseysensor/followers",
            "following_url": "https://api.github.com/users/senseysensor/following{/other_user}",
            "gists_url": "https://api.github.com/users/senseysensor/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/senseysensor/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/senseysensor/subscriptions",
            "organizations_url": "https://api.github.com/users/senseysensor/orgs",
            "repos_url": "https://api.github.com/users/senseysensor/repos",
            "events_url": "https://api.github.com/users/senseysensor/events{/privacy}",
            "received_events_url": "https://api.github.com/users/senseysensor/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2019-04-24T11:12:54Z",
        "updated_at": "2019-06-25T10:37:34Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "```from apscheduler.schedulers.background import BackgroundScheduler\r\nfrom apscheduler.triggers.interval import IntervalTrigger\r\n\r\nscheduler = BackgroundScheduler()\r\nscheduler.add_job(print, IntervalTrigger(minutes=1), id='example_job')\r\nscheduler.add_job(dir, IntervalTrigger(minutes=2), id='example_job')\r\n\r\nscheduler.start()\r\n\r\n# apscheduler.jobstores.base.ConflictingIdError: 'Job identifier (abc) conflicts with an existing job'\r\n```\r\n\r\n## Expected Behavior\r\nI would have immediately ConflictingIdError on job adding, regardless of was scheduler started or not.\r\n\r\n## Current Behavior\r\nI am allowed to add many then one job with the same ID.\r\n\r\n## Context (Environment)\r\npython 3.7.3\r\napscheduler 3.6.0",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/364",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/364/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/364/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/364/events",
        "html_url": "https://github.com/agronholm/apscheduler/pull/364",
        "id": 419581794,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MjYwMDU1OTQw",
        "number": 364,
        "title": "add actual_start_time to JobExecution events",
        "user": {
            "login": "robinfrick",
            "id": 8144392,
            "node_id": "MDQ6VXNlcjgxNDQzOTI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8144392?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robinfrick",
            "html_url": "https://github.com/robinfrick",
            "followers_url": "https://api.github.com/users/robinfrick/followers",
            "following_url": "https://api.github.com/users/robinfrick/following{/other_user}",
            "gists_url": "https://api.github.com/users/robinfrick/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robinfrick/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robinfrick/subscriptions",
            "organizations_url": "https://api.github.com/users/robinfrick/orgs",
            "repos_url": "https://api.github.com/users/robinfrick/repos",
            "events_url": "https://api.github.com/users/robinfrick/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robinfrick/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2019-03-11T17:04:19Z",
        "updated_at": "2020-05-23T06:48:41Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/agronholm/apscheduler/pulls/364",
            "html_url": "https://github.com/agronholm/apscheduler/pull/364",
            "diff_url": "https://github.com/agronholm/apscheduler/pull/364.diff",
            "patch_url": "https://github.com/agronholm/apscheduler/pull/364.patch"
        },
        "body": "Heya, this is a great project. I especially love the events for logging. For my use case I would love to have the actual start time of a job exposed, additional to the scheduled run time. The use case for me would be to calculate how far my queue is lagging behind, how long an individual job took, and possibly more. \r\n\r\nIf you think this addition makes sense and you are happy with my PR I'd be happy if this gets added. If not I'd be happy to hear some feedback nevertheless. ",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/361",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/361/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/361/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/361/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/361",
        "id": 413825474,
        "node_id": "MDU6SXNzdWU0MTM4MjU0NzQ=",
        "number": 361,
        "title": "AndTrigger does not work with IntervalTrigger",
        "user": {
            "login": "Hanaasagi",
            "id": 9482395,
            "node_id": "MDQ6VXNlcjk0ODIzOTU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9482395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Hanaasagi",
            "html_url": "https://github.com/Hanaasagi",
            "followers_url": "https://api.github.com/users/Hanaasagi/followers",
            "following_url": "https://api.github.com/users/Hanaasagi/following{/other_user}",
            "gists_url": "https://api.github.com/users/Hanaasagi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Hanaasagi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Hanaasagi/subscriptions",
            "organizations_url": "https://api.github.com/users/Hanaasagi/orgs",
            "repos_url": "https://api.github.com/users/Hanaasagi/repos",
            "events_url": "https://api.github.com/users/Hanaasagi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Hanaasagi/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 24,
        "created_at": "2019-02-24T14:04:00Z",
        "updated_at": "2020-09-29T21:13:57Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "Recently, I learn how to use apscheduler, and I find something interesting. From the latest doc's example, `AndTrigger` can be used as:\r\n\r\n```Python\r\nfrom apscheduler.triggers.combining import AndTrigger\r\nfrom apscheduler.triggers.interval import IntervalTrigger\r\nfrom apscheduler.triggers.cron import CronTrigger\r\n\r\n\r\ntrigger = AndTrigger([IntervalTrigger(hours=2),\r\n                      CronTrigger(day_of_week='sat,sun')])\r\nscheduler.add_job(job_function, trigger)\r\n```\r\n\r\nActually, it doesn't work. I have read  https://github.com/agronholm/apscheduler/issues/281 and https://github.com/agronholm/apscheduler/issues/309, and know that the time generated by the two triggers never coincide.\r\n\r\nSo, if I sepcify a `start_date` like\r\n\r\n```Python\r\nimport datetime\r\nfrom tzlocal import get_localzone\r\n\r\nfrom apscheduler.triggers.combining import AndTrigger\r\nfrom apscheduler.triggers.interval import IntervalTrigger\r\n\r\ntz = get_localzone()\r\nnow = datetime.datetime.now(tz=tz)\r\n\r\ntrigger = AndTrigger([IntervalTrigger(hours=2, start_date=now),\r\n                      IntervalTrigger(hours=3, start_date=now)])\r\nnext_run_time = trigger.get_next_fire_time(None, now + datetime.timedelta(seconds=10))\r\n\r\nprint(now)\r\nprint(next_run_time)\r\n```\r\n\r\nIt works as expected.\r\n\r\n```\r\n2019-02-24 22:23:26.052845+09:00\r\n2019-02-25 04:23:26.052845+09:00\r\n```\r\n\r\nBut when schedule a job, it does work.\r\n\r\n```Python\r\nimport datetime\r\nfrom tzlocal import get_localzone\r\n\r\nfrom apscheduler.triggers.combining import AndTrigger\r\nfrom apscheduler.triggers.interval import IntervalTrigger\r\nfrom apscheduler.schedulers.blocking import BlockingScheduler\r\n\r\ntz = get_localzone()\r\nnow = datetime.datetime.now(tz=tz)\r\n\r\n\r\ndef tick():\r\n    print('tick')\r\n\r\n\r\nscheduler = BlockingScheduler()\r\ntrigger = AndTrigger([IntervalTrigger(seconds=2, start_date=now),\r\n                      IntervalTrigger(seconds=3, start_date=now)])\r\nscheduler.add_job(tick, trigger)\r\nscheduler.start()\r\n```\r\n\r\nThe real problem it that  `AndTrigger`  may not support `IntervalTrigger`\r\n\r\nIn `_process_jobs`, it will calculate run times .\r\n\r\nhttps://github.com/agronholm/apscheduler/blob/ab991eb29eedb0943356c4d7ddca8320e7845965/apscheduler/schedulers/base.py#L970-L972\r\n\r\nhttps://github.com/agronholm/apscheduler/blob/ab991eb29eedb0943356c4d7ddca8320e7845965/apscheduler/job.py#L123-L137\r\n\r\nhttps://github.com/agronholm/apscheduler/blob/ab991eb29eedb0943356c4d7ddca8320e7845965/apscheduler/triggers/combining.py#L53-L62\r\n\r\nhttps://github.com/agronholm/apscheduler/blob/ab991eb29eedb0943356c4d7ddca8320e7845965/apscheduler/triggers/interval.py#L52-L66\r\n\r\nIn the loop of calculating `next_run_time` in `AndTrigger`, we only change the value of `now`. But in `IntervalTrigger`, if we pass `previous_fire_time` which is not `None`, it will just add the interval. So it caused a dead loop.\r\n\r\nSimilarly, When we combine `IntervalTrigger` and  `CronTrigger`, if `previous_fire_time` is not `None`, only `CronTrigger` will walk.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/360",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/360/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/360/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/360/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/360",
        "id": 408954892,
        "node_id": "MDU6SXNzdWU0MDg5NTQ4OTI=",
        "number": 360,
        "title": "AsyncIOScheduler.start() should be a coroutine",
        "user": {
            "login": "RealOrangeOne",
            "id": 6527489,
            "node_id": "MDQ6VXNlcjY1Mjc0ODk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6527489?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RealOrangeOne",
            "html_url": "https://github.com/RealOrangeOne",
            "followers_url": "https://api.github.com/users/RealOrangeOne/followers",
            "following_url": "https://api.github.com/users/RealOrangeOne/following{/other_user}",
            "gists_url": "https://api.github.com/users/RealOrangeOne/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RealOrangeOne/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RealOrangeOne/subscriptions",
            "organizations_url": "https://api.github.com/users/RealOrangeOne/orgs",
            "repos_url": "https://api.github.com/users/RealOrangeOne/repos",
            "events_url": "https://api.github.com/users/RealOrangeOne/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RealOrangeOne/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": {
            "url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1",
            "html_url": "https://github.com/agronholm/apscheduler/milestone/1",
            "labels_url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1/labels",
            "id": 1673437,
            "node_id": "MDk6TWlsZXN0b25lMTY3MzQzNw==",
            "number": 1,
            "title": "4.0",
            "description": "Replace pickle serialization with more secure alternatives\r\nPass a context object to job callables (optional?)\r\nForce coalesce=True but pass all scheduled run times in the job context argument\r\nDon't automatically remove any jobs from job stores anymore\r\nOverhaul the test suite\r\nDrop the PyQT scheduler",
            "creator": {
                "login": "agronholm",
                "id": 130003,
                "node_id": "MDQ6VXNlcjEzMDAwMw==",
                "avatar_url": "https://avatars.githubusercontent.com/u/130003?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/agronholm",
                "html_url": "https://github.com/agronholm",
                "followers_url": "https://api.github.com/users/agronholm/followers",
                "following_url": "https://api.github.com/users/agronholm/following{/other_user}",
                "gists_url": "https://api.github.com/users/agronholm/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/agronholm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/agronholm/subscriptions",
                "organizations_url": "https://api.github.com/users/agronholm/orgs",
                "repos_url": "https://api.github.com/users/agronholm/repos",
                "events_url": "https://api.github.com/users/agronholm/events{/privacy}",
                "received_events_url": "https://api.github.com/users/agronholm/received_events",
                "type": "User",
                "site_admin": false
            },
            "open_issues": 17,
            "closed_issues": 4,
            "state": "open",
            "created_at": "2016-03-30T07:24:12Z",
            "updated_at": "2020-09-29T21:05:40Z",
            "due_on": null,
            "closed_at": null
        },
        "comments": 1,
        "created_at": "2019-02-11T20:09:53Z",
        "updated_at": "2019-07-23T09:38:20Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "## Expected Behavior\r\nIt currently isn't possible to use tools like `asyncio.gather` with APScheduler.\r\n\r\n## Current Behavior\r\nCurrently, `.start` does some weird things behind the scenes with the event loop, requiring you to `run_forever` it manually. ",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/356",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/356/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/356/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/356/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/356",
        "id": 403931802,
        "node_id": "MDU6SXNzdWU0MDM5MzE4MDI=",
        "number": 356,
        "title": "EVENT_JOB_SUBMITTED fires when job has not executed due to ThreadPoolExecutor(max_workers=1)",
        "user": {
            "login": "ecbftw",
            "id": 4751963,
            "node_id": "MDQ6VXNlcjQ3NTE5NjM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4751963?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ecbftw",
            "html_url": "https://github.com/ecbftw",
            "followers_url": "https://api.github.com/users/ecbftw/followers",
            "following_url": "https://api.github.com/users/ecbftw/following{/other_user}",
            "gists_url": "https://api.github.com/users/ecbftw/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ecbftw/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ecbftw/subscriptions",
            "organizations_url": "https://api.github.com/users/ecbftw/orgs",
            "repos_url": "https://api.github.com/users/ecbftw/repos",
            "events_url": "https://api.github.com/users/ecbftw/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ecbftw/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-01-28T17:46:43Z",
        "updated_at": "2019-01-28T17:46:43Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I'm finding that the `EVENT_JOB_SUBMITTED` event executes when I configure a `ThreadPoolExecutor` with `max_workers=1`. \r\n\r\nWhat I'm really trying to do is track job execution state.  I want to know when a job is in one of the following states (my own nomenclature):  \"scheduled\", \"queued\", \"running\", \"completed\" or \"error\".  Since apscheduler does not provide a direct way to do this (see #332), I'm trying to use event handlers to track state of each job.  This is turning out to be remarkably difficult.  \r\n\r\nBy design, my application may run one of 4 different job types (job_ids), but I want only one of these jobs to run at a time.  (In the future, I may expand the number/types of jobs that can run in parallel, but for now, I have set `ThreadPoolExecutor`'s `max_workers=1` and I also set the job_defaults of `coalesce=True` and `max_instances=1`.  In order to queue up misfired jobs for the future, I set `misfire_grace_time` to a large value.  This has the desired effect of queuing up all jobs behind other jobs of different types/job_ids.\r\n\r\n## Expected Behavior\r\nGiven this simple, effectively single-threaded design, I expect to be able to track state of jobs without race conditions or other issues.\r\n\r\n## Current Behavior\r\nUnfortunately, apscheduler fails to check if the `ThreadPoolExecutor`'s `max_workers` setting will cause a job to misfire, and `EVENT_JOB_SUBMITTED` is run even if a subsequent job is misfired and re-evaluated for execution later.\r\n\r\n## Steps to Reproduce\r\nHere are a few snippets of code that I'm able to share.  Scheduler setup:\r\n```\r\n        jobstores = {\r\n            'default': MemoryJobStore()\r\n        }\r\n        executors = {\r\n            'default': ThreadPoolExecutor(max_workers=1)\r\n        }\r\n        job_defaults = {\r\n            'coalesce': True,\r\n            'max_instances': 1,\r\n            'misfire_grace_time': 60*60*4\r\n        }\r\n        self.scheduler = TornadoScheduler()\r\n        self.scheduler.configure(jobstores=jobstores, executors=executors, job_defaults=job_defaults)\r\n        self.scheduler.add_listener(self.on_job_start, apscheduler.events.EVENT_JOB_SUBMITTED)\r\n        self.scheduler.start()\r\n```\r\n\r\nThis this method is fired prematurely, causing my job to be listed as 'running' when it isn't.\r\n```\r\n    def on_job_start(self, event):\r\n        logging.debug('*** starting job: ' + event.job_id)\r\n        self.current_jobs[event.job_id]['status'] = 'running'\r\n        self.current_jobs[event.job_id]['started'] = time.time()\r\n``` \r\n\r\nWhen I add a non-scheduled job, I set up the status as 'queued', but this is always overridden immediately by the event handler above.\r\n```\r\n        self.current_jobs[job_id] = {'job_id':job_id, 'task':task,..., 'status':'queued'}\r\n        self.scheduler.add_job(runner,\r\n                               id=job_id,\r\n                               replace_existing=True,\r\n                               kwargs=kwargs)\r\n```\r\n\r\n## Context (Environment)\r\nI'm unable to properly track state on my jobs without more hacks.  I'm likely going to need to add a wrapper function to each of my jobs that simply updates it's state to 'running' and abandon the `EVENT_JOB_SUBMITTED` event handler.  If apscheduler provided a more complete API for tracking job state, then that would actually be the best situation of all.\r\n\r\n## Detailed Description\r\nIn the short term, it would be nice if `EVENT_JOB_SUBMITTED` was not fired when `ThreadPoolExecutor`'s `max_workers` limit caused a misfire.  Longer term, I'd love to see a solution for #332.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/346",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/346/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/346/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/346/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/346",
        "id": 385997109,
        "node_id": "MDU6SXNzdWUzODU5OTcxMDk=",
        "number": 346,
        "title": "Adding a job with CronTrigger.from_crontab() does not default to scheduler timezone",
        "user": {
            "login": "jordanhatcher",
            "id": 7536089,
            "node_id": "MDQ6VXNlcjc1MzYwODk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7536089?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jordanhatcher",
            "html_url": "https://github.com/jordanhatcher",
            "followers_url": "https://api.github.com/users/jordanhatcher/followers",
            "following_url": "https://api.github.com/users/jordanhatcher/following{/other_user}",
            "gists_url": "https://api.github.com/users/jordanhatcher/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jordanhatcher/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jordanhatcher/subscriptions",
            "organizations_url": "https://api.github.com/users/jordanhatcher/orgs",
            "repos_url": "https://api.github.com/users/jordanhatcher/repos",
            "events_url": "https://api.github.com/users/jordanhatcher/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jordanhatcher/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 348230264,
                "node_id": "MDU6TGFiZWwzNDgyMzAyNjQ=",
                "url": "https://api.github.com/repos/agronholm/apscheduler/labels/bug",
                "name": "bug",
                "color": "ee0701",
                "default": true,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": {
            "url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1",
            "html_url": "https://github.com/agronholm/apscheduler/milestone/1",
            "labels_url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1/labels",
            "id": 1673437,
            "node_id": "MDk6TWlsZXN0b25lMTY3MzQzNw==",
            "number": 1,
            "title": "4.0",
            "description": "Replace pickle serialization with more secure alternatives\r\nPass a context object to job callables (optional?)\r\nForce coalesce=True but pass all scheduled run times in the job context argument\r\nDon't automatically remove any jobs from job stores anymore\r\nOverhaul the test suite\r\nDrop the PyQT scheduler",
            "creator": {
                "login": "agronholm",
                "id": 130003,
                "node_id": "MDQ6VXNlcjEzMDAwMw==",
                "avatar_url": "https://avatars.githubusercontent.com/u/130003?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/agronholm",
                "html_url": "https://github.com/agronholm",
                "followers_url": "https://api.github.com/users/agronholm/followers",
                "following_url": "https://api.github.com/users/agronholm/following{/other_user}",
                "gists_url": "https://api.github.com/users/agronholm/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/agronholm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/agronholm/subscriptions",
                "organizations_url": "https://api.github.com/users/agronholm/orgs",
                "repos_url": "https://api.github.com/users/agronholm/repos",
                "events_url": "https://api.github.com/users/agronholm/events{/privacy}",
                "received_events_url": "https://api.github.com/users/agronholm/received_events",
                "type": "User",
                "site_admin": false
            },
            "open_issues": 17,
            "closed_issues": 4,
            "state": "open",
            "created_at": "2016-03-30T07:24:12Z",
            "updated_at": "2020-09-29T21:05:40Z",
            "due_on": null,
            "closed_at": null
        },
        "comments": 4,
        "created_at": "2018-11-30T01:20:49Z",
        "updated_at": "2020-02-20T23:08:29Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "In some situations, the job time zone is not defaulted to the scheduler time zone, as is specified in the docs.\r\n\r\n## Expected Behavior\r\nFrom the docs: https://apscheduler.readthedocs.io/en/latest/modules/triggers/cron.html?highlight=add_job\r\n> timezone (datetime.tzinfo|str) \u2013 time zone to use for the date/time calculations (defaults to scheduler timezone)\r\n\r\nThe time zone used for the scheduled job should be defaulted to the scheduler's time zone.\r\n\r\n## Current Behavior\r\nThe time zone used for the scheduled job is the system time zone.\r\n\r\n## Steps to Reproduce\r\nHere is a snippet of code that I used to reproduce the issue:\r\n```python\r\nfrom apscheduler.schedulers.blocking import BlockingScheduler\r\nfrom apscheduler.triggers.cron import CronTrigger\r\nfrom pytz import utc\r\nimport logging\r\n\r\ndef job_function():\r\n    print('hello world!')\r\n\r\nscheduler = BlockingScheduler(timezone=utc)\r\nscheduler.add_job(job_function, CronTrigger.from_crontab('46 19 * * *'))\r\nscheduler.print_jobs()\r\nscheduler.start()\r\n```\r\n\r\nFor reference, I am in the US/Eastern time zone. I would expect this job to default to using the time zone of the scheduler (UTC), and to be scheduled at 19:46 UTC every day. Instead, the job is running at 19:46 US/Eastern time every day.\r\n\r\n## Context (Environment)\r\nI am working on a home automation system project, and I use apscheduler to schedule things like alarms, etc. It runs on the Raspbian linux distro, but I do most of my development on Fedora 29 or in alpine linux based docker containers. Python version is 3.7.1\r\n\r\n## Detailed Description\r\nI took a quick look at the code, and the root cause seemed to be that the \"default to scheduler time zone\" logic was only applied when the trigger argument passed to `.add_job()` was the alias name of the trigger.\r\n\r\nRelevant code from `apscheduler/base.py`:\r\n```python\r\n    def _create_trigger(self, trigger, trigger_args):\r\n        if isinstance(trigger, BaseTrigger):\r\n            return trigger     #   <---- time zone logic below is not applied\r\n        elif trigger is None:\r\n            trigger = 'date'\r\n        elif not isinstance(trigger, six.string_types):\r\n            raise TypeError('Expected a trigger instance or string, got %s instead' %\r\n                            trigger.__class__.__name__)\r\n\r\n        # Use the scheduler's time zone if nothing else is specified\r\n        trigger_args.setdefault('timezone', self.timezone)\r\n\r\n        # Instantiate the trigger class\r\n        return self._create_plugin_instance('trigger', trigger, trigger_args)\r\n```\r\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/336",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/336/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/336/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/336/events",
        "html_url": "https://github.com/agronholm/apscheduler/pull/336",
        "id": 365694022,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MjE5NTU0MTk5",
        "number": 336,
        "title": "Be able to print job id on scheduler.print_jobs.",
        "user": {
            "login": "SalchiPapa",
            "id": 4594825,
            "node_id": "MDQ6VXNlcjQ1OTQ4MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4594825?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SalchiPapa",
            "html_url": "https://github.com/SalchiPapa",
            "followers_url": "https://api.github.com/users/SalchiPapa/followers",
            "following_url": "https://api.github.com/users/SalchiPapa/following{/other_user}",
            "gists_url": "https://api.github.com/users/SalchiPapa/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SalchiPapa/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SalchiPapa/subscriptions",
            "organizations_url": "https://api.github.com/users/SalchiPapa/orgs",
            "repos_url": "https://api.github.com/users/SalchiPapa/repos",
            "events_url": "https://api.github.com/users/SalchiPapa/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SalchiPapa/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-10-02T00:31:07Z",
        "updated_at": "2020-05-23T06:48:42Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/agronholm/apscheduler/pulls/336",
            "html_url": "https://github.com/agronholm/apscheduler/pull/336",
            "diff_url": "https://github.com/agronholm/apscheduler/pull/336.diff",
            "patch_url": "https://github.com/agronholm/apscheduler/pull/336.patch"
        },
        "body": "This would be useful in the case we need to print jobs that have different ids, but use the same function.\r\n\r\n```python\r\nIn [1]: from apscheduler.schedulers.background import BackgroundScheduler\r\n\r\nIn [2]: scheduler = BackgroundScheduler()\r\n\r\nIn [3]: def foo(arg=\"\"):\r\n   ...:     print arg\r\n   ...:     \r\n\r\nIn [4]: scheduler.add_job(foo, 'interval', seconds=3, id=\"FOO\", args=[\"foo\"])\r\nOut[4]: <Job (id=FOO name=foo)>\r\n\r\nIn [5]: scheduler.add_job(foo, 'interval', seconds=2, id=\"BAR\", args=[\"bar\"])\r\nOut[5]: <Job (id=BAR name=foo)>\r\n\r\nIn [6]: scheduler.add_job(foo, 'interval', seconds=1)\r\nOut[6]: <Job (id=83b06138a92c42709cd420780d225eda name=foo)>\r\n\r\nIn [7]: scheduler.print_jobs()\r\nPending jobs:\r\n    foo (trigger: interval[0:00:03], pending)\r\n    foo (trigger: interval[0:00:02], pending)\r\n    foo (trigger: interval[0:00:01], pending)\r\n```\r\n\r\nThis would print this instead, which in this case is more useful:\r\n\r\n```python\r\nIn [7]: scheduler.print_jobs()\r\nPending jobs:\r\n    FOO (func: foo, trigger: interval[0:00:03], pending)\r\n    BAR (func: foo, trigger: interval[0:00:02], pending)\r\n    83b06138a92c42709cd420780d225eda (func: foo, trigger: interval[0:00:01], pending)\r\n```",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/332",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/332/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/332/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/332/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/332",
        "id": 352631973,
        "node_id": "MDU6SXNzdWUzNTI2MzE5NzM=",
        "number": 332,
        "title": "Allow knowing which jobs are running (and not just submitted/pending and paused)",
        "user": {
            "login": "harlowja",
            "id": 970458,
            "node_id": "MDQ6VXNlcjk3MDQ1OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/970458?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/harlowja",
            "html_url": "https://github.com/harlowja",
            "followers_url": "https://api.github.com/users/harlowja/followers",
            "following_url": "https://api.github.com/users/harlowja/following{/other_user}",
            "gists_url": "https://api.github.com/users/harlowja/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/harlowja/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/harlowja/subscriptions",
            "organizations_url": "https://api.github.com/users/harlowja/orgs",
            "repos_url": "https://api.github.com/users/harlowja/repos",
            "events_url": "https://api.github.com/users/harlowja/events{/privacy}",
            "received_events_url": "https://api.github.com/users/harlowja/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": {
            "url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1",
            "html_url": "https://github.com/agronholm/apscheduler/milestone/1",
            "labels_url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1/labels",
            "id": 1673437,
            "node_id": "MDk6TWlsZXN0b25lMTY3MzQzNw==",
            "number": 1,
            "title": "4.0",
            "description": "Replace pickle serialization with more secure alternatives\r\nPass a context object to job callables (optional?)\r\nForce coalesce=True but pass all scheduled run times in the job context argument\r\nDon't automatically remove any jobs from job stores anymore\r\nOverhaul the test suite\r\nDrop the PyQT scheduler",
            "creator": {
                "login": "agronholm",
                "id": 130003,
                "node_id": "MDQ6VXNlcjEzMDAwMw==",
                "avatar_url": "https://avatars.githubusercontent.com/u/130003?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/agronholm",
                "html_url": "https://github.com/agronholm",
                "followers_url": "https://api.github.com/users/agronholm/followers",
                "following_url": "https://api.github.com/users/agronholm/following{/other_user}",
                "gists_url": "https://api.github.com/users/agronholm/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/agronholm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/agronholm/subscriptions",
                "organizations_url": "https://api.github.com/users/agronholm/orgs",
                "repos_url": "https://api.github.com/users/agronholm/repos",
                "events_url": "https://api.github.com/users/agronholm/events{/privacy}",
                "received_events_url": "https://api.github.com/users/agronholm/received_events",
                "type": "User",
                "site_admin": false
            },
            "open_issues": 17,
            "closed_issues": 4,
            "state": "open",
            "created_at": "2016-03-30T07:24:12Z",
            "updated_at": "2020-09-29T21:05:40Z",
            "due_on": null,
            "closed_at": null
        },
        "comments": 13,
        "created_at": "2018-08-21T17:08:48Z",
        "updated_at": "2019-07-23T09:40:48Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "It seems like we can pretty easily know by looking at the `job.next_run_time` whether a job is paused or not but it is really hard to know if a job is running or not (as far as a I can tell) since there is no apparent job state that is connected to a job saying the job is actively running (the event notification system is not reliable enough to do this, as it can be fired out of order).\r\n\r\nSo this is more of a feature request to have such a capability...\r\n\r\nIf more details are needed (or I can suggest some ideas on how to do it or maybe even a PR).",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/323",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/323/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/323/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/323/events",
        "html_url": "https://github.com/agronholm/apscheduler/pull/323",
        "id": 344286024,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MjAzNzE2NTE3",
        "number": 323,
        "title": "Add milliseconds support for the interval scheduler",
        "user": {
            "login": "aradler",
            "id": 30579059,
            "node_id": "MDQ6VXNlcjMwNTc5MDU5",
            "avatar_url": "https://avatars.githubusercontent.com/u/30579059?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aradler",
            "html_url": "https://github.com/aradler",
            "followers_url": "https://api.github.com/users/aradler/followers",
            "following_url": "https://api.github.com/users/aradler/following{/other_user}",
            "gists_url": "https://api.github.com/users/aradler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aradler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aradler/subscriptions",
            "organizations_url": "https://api.github.com/users/aradler/orgs",
            "repos_url": "https://api.github.com/users/aradler/repos",
            "events_url": "https://api.github.com/users/aradler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aradler/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2018-07-25T04:12:41Z",
        "updated_at": "2020-05-23T06:48:42Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/agronholm/apscheduler/pulls/323",
            "html_url": "https://github.com/agronholm/apscheduler/pull/323",
            "diff_url": "https://github.com/agronholm/apscheduler/pull/323.diff",
            "patch_url": "https://github.com/agronholm/apscheduler/pull/323.patch"
        },
        "body": "Because of the way you implemented this (using timedeltas), the change involves very few lines of code.\r\n\r\nI opted out of implementing this as microseconds, as it is unlikely that a scheduler running on any normal computer could actually uphold microsecond precision.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/313",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/313/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/313/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/313/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/313",
        "id": 327064159,
        "node_id": "MDU6SXNzdWUzMjcwNjQxNTk=",
        "number": 313,
        "title": "JobStores are not Async",
        "user": {
            "login": "nirtayeb",
            "id": 9025195,
            "node_id": "MDQ6VXNlcjkwMjUxOTU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9025195?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nirtayeb",
            "html_url": "https://github.com/nirtayeb",
            "followers_url": "https://api.github.com/users/nirtayeb/followers",
            "following_url": "https://api.github.com/users/nirtayeb/following{/other_user}",
            "gists_url": "https://api.github.com/users/nirtayeb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nirtayeb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nirtayeb/subscriptions",
            "organizations_url": "https://api.github.com/users/nirtayeb/orgs",
            "repos_url": "https://api.github.com/users/nirtayeb/repos",
            "events_url": "https://api.github.com/users/nirtayeb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nirtayeb/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": {
            "url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1",
            "html_url": "https://github.com/agronholm/apscheduler/milestone/1",
            "labels_url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1/labels",
            "id": 1673437,
            "node_id": "MDk6TWlsZXN0b25lMTY3MzQzNw==",
            "number": 1,
            "title": "4.0",
            "description": "Replace pickle serialization with more secure alternatives\r\nPass a context object to job callables (optional?)\r\nForce coalesce=True but pass all scheduled run times in the job context argument\r\nDon't automatically remove any jobs from job stores anymore\r\nOverhaul the test suite\r\nDrop the PyQT scheduler",
            "creator": {
                "login": "agronholm",
                "id": 130003,
                "node_id": "MDQ6VXNlcjEzMDAwMw==",
                "avatar_url": "https://avatars.githubusercontent.com/u/130003?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/agronholm",
                "html_url": "https://github.com/agronholm",
                "followers_url": "https://api.github.com/users/agronholm/followers",
                "following_url": "https://api.github.com/users/agronholm/following{/other_user}",
                "gists_url": "https://api.github.com/users/agronholm/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/agronholm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/agronholm/subscriptions",
                "organizations_url": "https://api.github.com/users/agronholm/orgs",
                "repos_url": "https://api.github.com/users/agronholm/repos",
                "events_url": "https://api.github.com/users/agronholm/events{/privacy}",
                "received_events_url": "https://api.github.com/users/agronholm/received_events",
                "type": "User",
                "site_admin": false
            },
            "open_issues": 17,
            "closed_issues": 4,
            "state": "open",
            "created_at": "2016-03-30T07:24:12Z",
            "updated_at": "2020-09-29T21:05:40Z",
            "due_on": null,
            "closed_at": null
        },
        "comments": 3,
        "created_at": "2018-05-28T15:39:25Z",
        "updated_at": "2020-08-02T15:49:31Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "## Expected Behavior\r\nWhile adding a job to AsyncIOScheduler it should let other tasks on the IO loop to run\r\n\r\n## Current Behavior\r\nAdding a job to the AsyncIOScheduler makes the ioloop to hang until it is written fully to the job store.\r\n\r\n## Detailed Description\r\nAll job store operation should be asynchronous, RedisJobStore should use aio-redis for example\r\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/309",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/309/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/309/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/309/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/309",
        "id": 322560540,
        "node_id": "MDU6SXNzdWUzMjI1NjA1NDA=",
        "number": 309,
        "title": "Problem on combining triggers",
        "user": {
            "login": "masoudr",
            "id": 6974428,
            "node_id": "MDQ6VXNlcjY5NzQ0Mjg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6974428?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/masoudr",
            "html_url": "https://github.com/masoudr",
            "followers_url": "https://api.github.com/users/masoudr/followers",
            "following_url": "https://api.github.com/users/masoudr/following{/other_user}",
            "gists_url": "https://api.github.com/users/masoudr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/masoudr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/masoudr/subscriptions",
            "organizations_url": "https://api.github.com/users/masoudr/orgs",
            "repos_url": "https://api.github.com/users/masoudr/repos",
            "events_url": "https://api.github.com/users/masoudr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/masoudr/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2018-05-13T03:25:14Z",
        "updated_at": "2018-05-16T04:00:48Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Hi,\r\nI'm trying to use combine triggers. For example, I want to run a function on the first minute for every 2 seconds:\r\n\r\n```\r\nfrom time import sleep\r\nfrom apscheduler.triggers.combining import AndTrigger\r\nfrom apscheduler.triggers.interval import IntervalTrigger\r\nfrom apscheduler.triggers.cron import CronTrigger\r\nfrom apscheduler.schedulers.background import BackgroundScheduler\r\n\r\n\r\ndef job_function():\r\n    print(\"hello from function\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    scheduler = BackgroundScheduler()\r\n    trigger = AndTrigger([IntervalTrigger(seconds=2),\r\n                          CronTrigger(minute=1)])\r\n    scheduler.add_job(job_function, trigger)\r\n    print(\"before start\", scheduler.get_jobs())\r\n    scheduler.start()\r\n    print(\"after start\", scheduler.get_jobs())\r\n    print(\"ok\")\r\n    while True:\r\n        sleep(.1)\r\n```\r\n\r\nBut the program never prints `after start`. It is very strange to me.  The `OrTrigger` works fine for this example. If it is a bug is there any workaround?",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/297",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/297/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/297/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/297/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/297",
        "id": 306957001,
        "node_id": "MDU6SXNzdWUzMDY5NTcwMDE=",
        "number": 297,
        "title": "Feature request: Passing the scheduled start time to jobs",
        "user": {
            "login": "AdrianTeng",
            "id": 6933071,
            "node_id": "MDQ6VXNlcjY5MzMwNzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6933071?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AdrianTeng",
            "html_url": "https://github.com/AdrianTeng",
            "followers_url": "https://api.github.com/users/AdrianTeng/followers",
            "following_url": "https://api.github.com/users/AdrianTeng/following{/other_user}",
            "gists_url": "https://api.github.com/users/AdrianTeng/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AdrianTeng/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AdrianTeng/subscriptions",
            "organizations_url": "https://api.github.com/users/AdrianTeng/orgs",
            "repos_url": "https://api.github.com/users/AdrianTeng/repos",
            "events_url": "https://api.github.com/users/AdrianTeng/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AdrianTeng/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 348230266,
                "node_id": "MDU6TGFiZWwzNDgyMzAyNjY=",
                "url": "https://api.github.com/repos/agronholm/apscheduler/labels/enhancement",
                "name": "enhancement",
                "color": "84b6eb",
                "default": true,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": {
            "url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1",
            "html_url": "https://github.com/agronholm/apscheduler/milestone/1",
            "labels_url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1/labels",
            "id": 1673437,
            "node_id": "MDk6TWlsZXN0b25lMTY3MzQzNw==",
            "number": 1,
            "title": "4.0",
            "description": "Replace pickle serialization with more secure alternatives\r\nPass a context object to job callables (optional?)\r\nForce coalesce=True but pass all scheduled run times in the job context argument\r\nDon't automatically remove any jobs from job stores anymore\r\nOverhaul the test suite\r\nDrop the PyQT scheduler",
            "creator": {
                "login": "agronholm",
                "id": 130003,
                "node_id": "MDQ6VXNlcjEzMDAwMw==",
                "avatar_url": "https://avatars.githubusercontent.com/u/130003?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/agronholm",
                "html_url": "https://github.com/agronholm",
                "followers_url": "https://api.github.com/users/agronholm/followers",
                "following_url": "https://api.github.com/users/agronholm/following{/other_user}",
                "gists_url": "https://api.github.com/users/agronholm/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/agronholm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/agronholm/subscriptions",
                "organizations_url": "https://api.github.com/users/agronholm/orgs",
                "repos_url": "https://api.github.com/users/agronholm/repos",
                "events_url": "https://api.github.com/users/agronholm/events{/privacy}",
                "received_events_url": "https://api.github.com/users/agronholm/received_events",
                "type": "User",
                "site_admin": false
            },
            "open_issues": 17,
            "closed_issues": 4,
            "state": "open",
            "created_at": "2016-03-30T07:24:12Z",
            "updated_at": "2020-09-29T21:05:40Z",
            "due_on": null,
            "closed_at": null
        },
        "comments": 14,
        "created_at": "2018-03-20T17:06:49Z",
        "updated_at": "2020-07-21T14:12:24Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Currently there are no way for the job to know what is the scheduled start time (only the current time by doing `datetime.now()`). This feature would be useful for time sensitive jobs (e.g. extra handling if the job is delayed)",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/296",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/296/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/296/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/296/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/296",
        "id": 306206349,
        "node_id": "MDU6SXNzdWUzMDYyMDYzNDk=",
        "number": 296,
        "title": "I set a job executor per job, and set max_instances= 3, but I got EVENT_JOB_MISSED",
        "user": {
            "login": "linxi-1214",
            "id": 20988026,
            "node_id": "MDQ6VXNlcjIwOTg4MDI2",
            "avatar_url": "https://avatars.githubusercontent.com/u/20988026?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/linxi-1214",
            "html_url": "https://github.com/linxi-1214",
            "followers_url": "https://api.github.com/users/linxi-1214/followers",
            "following_url": "https://api.github.com/users/linxi-1214/following{/other_user}",
            "gists_url": "https://api.github.com/users/linxi-1214/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/linxi-1214/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/linxi-1214/subscriptions",
            "organizations_url": "https://api.github.com/users/linxi-1214/orgs",
            "repos_url": "https://api.github.com/users/linxi-1214/repos",
            "events_url": "https://api.github.com/users/linxi-1214/events{/privacy}",
            "received_events_url": "https://api.github.com/users/linxi-1214/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 12,
        "created_at": "2018-03-18T01:59:24Z",
        "updated_at": "2019-10-07T09:32:06Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "My code:\r\n```python\r\njob_stores = {\r\n    'default': SQLAlchemyJobStore(url='sqlite:///{db}'.format(db=scheduler_db))\r\n}\r\njob_executors = {\r\n    'default': ThreadPoolExecutor(1),\r\n    'cpu': ProcessPoolExecutor(1),\r\n    'disk': ProcessPoolExecutor(1),\r\n    'node': ProcessPoolExecutor(1),\r\n    'utilization': ProcessPoolExecutor(1),\r\n    'check_cpu': ProcessPoolExecutor(2)\r\n}\r\njob_defaults = {\r\n    # 'misfire_grace_time': 0,\r\n    'max_instances': 3\r\n}\r\nscheduler = BlockingScheduler(\r\n    logger=sched_logger,\r\n    jobstores=job_stores,\r\n    executors=job_executors,\r\n    job_defaults=job_defaults\r\n)\r\n```\r\n\r\nthen add the jobs:\r\n\r\n```python\r\n    if \"cpu_collect\" not in _job_ids:\r\n        cpu_config = crontab_config.get('cpu_collect', {})\r\n        minute = cpu_config.get('minute', 0)\r\n        hour = cpu_config.get('hour', 4)\r\n\r\n        scheduler.add_job(cpu_manage, id=\"cpu_collect\", trigger='cron', minute=minute, hour=hour,\r\n                          executor='cpu', args=(\"tasks.cpu_collect.log.cpu_logger\",))\r\n\r\n    if \"node_collect\" not in _job_ids:\r\n        # executed every hour\r\n        scheduler.add_job(node_manage, id='node_collect', trigger='cron', minute=0,\r\n                          executor='node', args=('tasks.cpu_collect.log.node_logger',))\r\n\r\n    if \"utilization_collect\" not in _job_ids:\r\n        # executed every 10 mintues\r\n        utilization_config = crontab_config.get('utilization', {})\r\n        minute = utilization_config.get('minute', '*/10')\r\n        hour = utilization_config.get('hour', None)\r\n        scheduler.add_job(utilization_manage, id='utilization_collect', trigger='cron',\r\n                          minute=minute, hour=hour,\r\n                          executor='utilization', args=('tasks.cpu_collect.log.node_logger',))\r\n```\r\nI want **cpu_collect** job run at 04:00, and it will run for about 1 hour. \r\nThe **node_collect** will run for about 1 minute, and utilization_collect run for about 1 minute too.\r\n\r\nBut the scheduler's logger shows:\r\n\r\n```\r\n2018-03-18 03:14:19,658 - apscheduler.scheduler - DEBUG - Next wakeup is due at 2018-03-18 03:14:35.663200+08:00 (in 58.531782 seconds)\r\n2018-03-18 03:15:18,214 - apscheduler.scheduler - DEBUG - Looking for jobs to run\r\n2018-03-18 03:15:18,222 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n2018-03-18 03:15:18,223 - apscheduler.scheduler - INFO - Job ID: heart_beat, Code ID: EVENT_JOB_MISSED\r\n2018-03-18 03:15:18,285 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n2018-03-18 03:15:18,285 - apscheduler.scheduler - INFO - Job ID: heart_beat, Code ID: EVENT_JOB_SUBMITTED\r\n2018-03-18 03:15:18,285 - apscheduler.scheduler - DEBUG - Next wakeup is due at 2018-03-18 03:15:35.663200+08:00 (in 17.448571 seconds)\r\n2018-03-18 03:15:35,734 - apscheduler.scheduler - DEBUG - Looking for jobs to run\r\n2018-03-18 03:15:35,740 - apscheduler.scheduler - INFO - Tick time 1521314135.738131\r\n2018-03-18 03:15:35,740 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n2018-03-18 03:15:35,740 - apscheduler.scheduler - INFO - Job ID: heart_beat, Code ID: EVENT_JOB_EXECUTED\r\n2018-03-18 03:15:35,781 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n2018-03-18 03:15:35,781 - apscheduler.scheduler - INFO - Job ID: heart_beat, Code ID: EVENT_JOB_SUBMITTED\r\n2018-03-18 03:15:35,781 - apscheduler.scheduler - DEBUG - Next wakeup is due at 2018-03-18 03:16:35.663200+08:00 (in 59.928309 seconds)\r\n2018-03-18 03:17:12,275 - apscheduler.scheduler - DEBUG - Looking for jobs to run\r\n------------------------------------- look here ---------------------------------------------\r\n2018-03-18 05:08:51,051 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n2018-03-18 05:21:12,155 - apscheduler.scheduler - INFO - Job ID: heart_beat, Code ID: EVENT_JOB_MISSED\r\n2018-03-18 05:50:58,405 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n2018-03-18 05:50:58,513 - apscheduler.scheduler - INFO - Job ID: utilization_collect, Code ID: EVENT_JOB_MISSED\r\n2018-03-18 05:50:58,832 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n2018-03-18 05:50:58,832 - apscheduler.scheduler - INFO - Job ID: heart_beat, Code ID: EVENT_JOB_SUBMITTED\r\n2018-03-18 05:50:58,833 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n2018-03-18 05:50:58,833 - apscheduler.scheduler - INFO - Job ID: utilization_collect, Code ID: EVENT_JOB_SUBMITTED\r\n2018-03-18 05:50:58,833 - apscheduler.scheduler - DEBUG - Next wakeup is due at 2018-03-18 03:21:35.663200+08:00 (in 15.297820 seconds)\r\n2018-03-18 05:51:14,193 - apscheduler.scheduler - DEBUG - Looking for jobs to run\r\n2018-03-18 05:51:14,210 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n2018-03-18 05:51:14,210 - apscheduler.scheduler - INFO - Job ID: heart_beat, Code ID: EVENT_JOB_MISSED2018-03-18 05:51:14,249 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n2018-03-18 05:51:14,250 - apscheduler.scheduler - INFO - Job ID: utilization_collect, Code ID: EVENT_JOB_MISSED\r\n2018-03-18 05:51:14,279 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n2018-03-18 05:51:14,280 - apscheduler.scheduler - INFO - Job ID: node_collect, Code ID: EVENT_JOB_MISSED\r\n2018-03-18 05:51:14,400 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n2018-03-18 05:51:14,401 - apscheduler.scheduler - INFO - Job ID: heart_beat, Code ID: EVENT_JOB_SUBMITTED\r\n2018-03-18 05:51:14,401 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n2018-03-18 05:51:14,401 - apscheduler.scheduler - INFO - Job ID: utilization_collect, Code ID: EVENT_JOB_SUBMITTED\r\n2018-03-18 05:51:14,401 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n2018-03-18 05:51:14,401 - apscheduler.scheduler - INFO - Job ID: node_collect, Code ID: EVENT_JOB_SUBMITTED\r\n2018-03-18 05:51:14,401 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n----------------------------cpu_colllect commit at 05:51 , why? -------------------------------\r\n2018-03-18 05:51:14,401 - apscheduler.scheduler - INFO - Job ID: cpu_collect, Code ID: EVENT_JOB_SUBMITTED\r\n2018-03-18 05:51:14,401 - apscheduler.scheduler - DEBUG - Next wakeup is due at 2018-03-18 05:51:35.663200+08:00 (in 21.469705 seconds)\r\n2018-03-18 05:51:14,412 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n---------------------------- and MISSED , why? ----------------------------------------------\r\n2018-03-18 05:51:14,413 - apscheduler.scheduler - INFO - Job ID: cpu_collect, Code ID: EVENT_JOB_MISSED\r\n2018-03-18 05:51:35,872 - apscheduler.scheduler - DEBUG - Looking for jobs to run\r\n2018-03-18 05:51:35,896 - apscheduler.scheduler - INFO - Tick time 1521323495.876146\r\n2018-03-18 05:51:35,896 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n2018-03-18 05:51:35,897 - apscheduler.scheduler - INFO - Job ID: heart_beat, Code ID: EVENT_JOB_EXECUTED\r\n2018-03-18 05:51:35,932 - apscheduler.scheduler - INFO - The scheduler worked :)\r\n```\r\nlast logger time is '03:17:12' , the next line show '05:08:51' suddenly, and tell me my job commit at 05:51, why ? and soon get missed , why?\r\n\r\nI think the job will run in a single processor, and max_instances = 3 (actually only one instance will run ), so why my job got missed? Anywhere I config wrong? or some reason else?\r\n\r\nThanks ! ",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/294",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/294/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/294/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/294/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/294",
        "id": 305057864,
        "node_id": "MDU6SXNzdWUzMDUwNTc4NjQ=",
        "number": 294,
        "title": "Job not work if add or modify job without uwsgi reload",
        "user": {
            "login": "wilslee",
            "id": 12045687,
            "node_id": "MDQ6VXNlcjEyMDQ1Njg3",
            "avatar_url": "https://avatars.githubusercontent.com/u/12045687?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wilslee",
            "html_url": "https://github.com/wilslee",
            "followers_url": "https://api.github.com/users/wilslee/followers",
            "following_url": "https://api.github.com/users/wilslee/following{/other_user}",
            "gists_url": "https://api.github.com/users/wilslee/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wilslee/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wilslee/subscriptions",
            "organizations_url": "https://api.github.com/users/wilslee/orgs",
            "repos_url": "https://api.github.com/users/wilslee/repos",
            "events_url": "https://api.github.com/users/wilslee/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wilslee/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2018-03-14T08:06:55Z",
        "updated_at": "2019-06-13T06:07:15Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Hello, I am using the apscheduler with `uwsgi` in Ubuntu.  Now, I am in trouble, my job can not work in uwsgi if the job was added or modified or reschedule while  scheduler running. The jobs which add before the scheduler start was working normal. And it is running good in django runserver.\r\n\r\nIn my uwsgi config, I have set `preload=True` and `enable-threads=True`.\r\n```\r\n# uwsgi.ini\r\nmaster = True\r\nvacuum = True\r\nprocesses = 2\r\nthreads = 4\r\npy-autoreload = 1\r\npreload=True\r\nenable-threads=True\r\n```\r\nThe job add before scheduler start was working normal\r\n```\r\nfrom apscheduler.schedulers.background import BackgroundScheduler\r\nscheduler = BackgroundScheduler()\r\nscheduler.add_job(job, id='job_id', replace_existing=True) \r\nscheduler.start()\r\n```\r\nNow, the job is running good. If some request action from api or other, modify or scheduler the job. or add new job\r\n```\r\nscheduler.modify_job(job_id, ...)\r\nscheduler.reschedule_job(job_id, ...)\r\nscheduler.add_job(new_job, id='new_job_id', replace_existing=True) \r\n```\r\nWe can see the new job or the change of job has update in scheduler with `print_jobs`, but it still no work without uwsgi reload.  \r\n\r\n\r\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/293",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/293/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/293/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/293/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/293",
        "id": 304491658,
        "node_id": "MDU6SXNzdWUzMDQ0OTE2NTg=",
        "number": 293,
        "title": "help: use the schedulers with simulated time for tests",
        "user": {
            "login": "liordon",
            "id": 4543336,
            "node_id": "MDQ6VXNlcjQ1NDMzMzY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4543336?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/liordon",
            "html_url": "https://github.com/liordon",
            "followers_url": "https://api.github.com/users/liordon/followers",
            "following_url": "https://api.github.com/users/liordon/following{/other_user}",
            "gists_url": "https://api.github.com/users/liordon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/liordon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/liordon/subscriptions",
            "organizations_url": "https://api.github.com/users/liordon/orgs",
            "repos_url": "https://api.github.com/users/liordon/repos",
            "events_url": "https://api.github.com/users/liordon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/liordon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2018-03-12T18:35:37Z",
        "updated_at": "2020-04-28T11:34:28Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I want to use the apscheduler in a module I am developing but I don't understand how to make it run with a simulated clock.\r\nIf I could run it in simulated time I could test periodic events and long waits without actually putthing the thread into long sleeps.\r\nIs there any possibility to create such a simulated scheduler? if not, how were the different scheduler modules tested?\r\n\r\nThanks in advance!",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/291",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/291/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/291/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/291/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/291",
        "id": 303274411,
        "node_id": "MDU6SXNzdWUzMDMyNzQ0MTE=",
        "number": 291,
        "title": "Cron jobs executes more times than desired when using jitter",
        "user": {
            "login": "csanz91",
            "id": 9842735,
            "node_id": "MDQ6VXNlcjk4NDI3MzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9842735?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/csanz91",
            "html_url": "https://github.com/csanz91",
            "followers_url": "https://api.github.com/users/csanz91/followers",
            "following_url": "https://api.github.com/users/csanz91/following{/other_user}",
            "gists_url": "https://api.github.com/users/csanz91/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/csanz91/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/csanz91/subscriptions",
            "organizations_url": "https://api.github.com/users/csanz91/orgs",
            "repos_url": "https://api.github.com/users/csanz91/repos",
            "events_url": "https://api.github.com/users/csanz91/events{/privacy}",
            "received_events_url": "https://api.github.com/users/csanz91/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": {
            "url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1",
            "html_url": "https://github.com/agronholm/apscheduler/milestone/1",
            "labels_url": "https://api.github.com/repos/agronholm/apscheduler/milestones/1/labels",
            "id": 1673437,
            "node_id": "MDk6TWlsZXN0b25lMTY3MzQzNw==",
            "number": 1,
            "title": "4.0",
            "description": "Replace pickle serialization with more secure alternatives\r\nPass a context object to job callables (optional?)\r\nForce coalesce=True but pass all scheduled run times in the job context argument\r\nDon't automatically remove any jobs from job stores anymore\r\nOverhaul the test suite\r\nDrop the PyQT scheduler",
            "creator": {
                "login": "agronholm",
                "id": 130003,
                "node_id": "MDQ6VXNlcjEzMDAwMw==",
                "avatar_url": "https://avatars.githubusercontent.com/u/130003?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/agronholm",
                "html_url": "https://github.com/agronholm",
                "followers_url": "https://api.github.com/users/agronholm/followers",
                "following_url": "https://api.github.com/users/agronholm/following{/other_user}",
                "gists_url": "https://api.github.com/users/agronholm/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/agronholm/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/agronholm/subscriptions",
                "organizations_url": "https://api.github.com/users/agronholm/orgs",
                "repos_url": "https://api.github.com/users/agronholm/repos",
                "events_url": "https://api.github.com/users/agronholm/events{/privacy}",
                "received_events_url": "https://api.github.com/users/agronholm/received_events",
                "type": "User",
                "site_admin": false
            },
            "open_issues": 17,
            "closed_issues": 4,
            "state": "open",
            "created_at": "2016-03-30T07:24:12Z",
            "updated_at": "2020-09-29T21:05:40Z",
            "due_on": null,
            "closed_at": null
        },
        "comments": 13,
        "created_at": "2018-03-07T21:55:46Z",
        "updated_at": "2020-05-23T16:52:15Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "When using the jitter option in a scheduled cron jobs, for example using the code from the documentation:\r\n \r\n`# Run the `job_function` every sharp hour with an extra-delay picked randomly in a [-120,+120] seconds window.\r\nsched.add_job(job_function, 'cron', hour='*', jitter=120)`\r\n\r\nif the job is scheduled before the sharp hour then the job will be scheduled for the same hour again. For example:\r\n\r\n- A Job is defined to be runned at sharp hours.\r\n\r\n- Job is scheduled to run at 14:59:51\r\n\r\n- Job runs at 14:59:51 but its scheduled to run at 15:00:02 again.\r\nIn this case we only want the job to run once at ~15:00:00.\r\n\r\nAttached is a small piece of code to test this behaiviour: [test.zip](https://github.com/agronholm/apscheduler/files/1791019/test.zip)\r\n\r\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/287",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/287/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/287/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/287/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/287",
        "id": 296172990,
        "node_id": "MDU6SXNzdWUyOTYxNzI5OTA=",
        "number": 287,
        "title": "Meet an error when reschedule the job via RPyC",
        "user": {
            "login": "zhoudaoyu",
            "id": 18587371,
            "node_id": "MDQ6VXNlcjE4NTg3Mzcx",
            "avatar_url": "https://avatars.githubusercontent.com/u/18587371?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zhoudaoyu",
            "html_url": "https://github.com/zhoudaoyu",
            "followers_url": "https://api.github.com/users/zhoudaoyu/followers",
            "following_url": "https://api.github.com/users/zhoudaoyu/following{/other_user}",
            "gists_url": "https://api.github.com/users/zhoudaoyu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zhoudaoyu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zhoudaoyu/subscriptions",
            "organizations_url": "https://api.github.com/users/zhoudaoyu/orgs",
            "repos_url": "https://api.github.com/users/zhoudaoyu/repos",
            "events_url": "https://api.github.com/users/zhoudaoyu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zhoudaoyu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-02-11T08:44:27Z",
        "updated_at": "2020-08-09T13:33:09Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Python 3.6.3\r\n\r\nAPScheduler Version: 3.5.1\r\n\r\nRPyC Version: 3.4.4\r\n\r\nI try to reschedule a job via rpyc client, but I met this error:\r\n\r\n\r\n\r\n    Traceback (most recent call last):\r\n      File \"main.py\", line 46, in <module>\r\n        trigger = trigger)\r\n      File \"/home/zhoudaoyu/anaconda3/lib/python3.6/site-packages/rpyc/core/netref.py\", line 199, in __call__\r\n        return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\r\n      File \"/home/zhoudaoyu/anaconda3/lib/python3.6/site-packages/rpyc/core/netref.py\", line 72, in syncreq\r\n        return conn.sync_request(handler, oid, *args)\r\n      File \"/home/zhoudaoyu/anaconda3/lib/python3.6/site-packages/rpyc/core/protocol.py\", line 524, in sync_request\r\n        raise obj\r\n    TypeError: '>' not supported between instances of 'datetime.datetime' and 'datetime'\r\n    \r\n    ========= Remote Traceback (2) =========\r\n    Traceback (most recent call last):\r\n      File \"/home/zhoudaoyu/anaconda3/lib/python3.6/site-packages/rpyc/core/protocol.py\", line 348, in _dispatch_request\r\n        res = self._HANDLERS[handler](self, *args)\r\n      File \"/home/zhoudaoyu/anaconda3/lib/python3.6/site-packages/rpyc/core/protocol.py\", line 625, in _handle_call\r\n        return self._local_objects[oid](*args, **dict(kwargs))\r\n      File \"/home/zhoudaoyu/python_code/rctp/code/scheduler.py\", line 92, in exposed_reschedule_job\r\n        raise e\r\n      File \"/home/zhoudaoyu/python_code/rctp/code/scheduler.py\", line 90, in exposed_reschedule_job\r\n        trigger = trigger, **trigger_args)\r\n      File \"/home/zhoudaoyu/anaconda3/lib/python3.6/site-packages/apscheduler/schedulers/base.py\", line 503, in reschedule_job\r\n        next_run_time = trigger.get_next_fire_time(None, now)\r\n      File \"/home/zhoudaoyu/anaconda3/lib/python3.6/site-packages/rpyc/core/netref.py\", line 199, in __call__\r\n        return syncreq(_self, consts.HANDLE_CALL, args, kwargs)\r\n      File \"/home/zhoudaoyu/anaconda3/lib/python3.6/site-packages/rpyc/core/netref.py\", line 72, in syncreq\r\n        return conn.sync_request(handler, oid, *args)\r\n      File \"/home/zhoudaoyu/anaconda3/lib/python3.6/site-packages/rpyc/core/protocol.py\", line 524, in sync_request\r\n        raise obj\r\n    _get_exception_class.<locals>.Derived: '>' not supported between instances of 'datetime.datetime' and 'datetime'\r\n    \r\n    ========= Remote Traceback (1) =========\r\n    Traceback (most recent call last):\r\n      File \"/home/zhoudaoyu/anaconda3/lib/python3.6/site-packages/rpyc/core/protocol.py\", line 348, in _dispatch_request\r\n        res = self._HANDLERS[handler](self, *args)\r\n      File \"/home/zhoudaoyu/anaconda3/lib/python3.6/site-packages/rpyc/core/protocol.py\", line 625, in _handle_call\r\n        return self._local_objects[oid](*args, **dict(kwargs))\r\n      File \"/home/zhoudaoyu/anaconda3/lib/python3.6/site-packages/apscheduler/triggers/cron/__init__.py\", line 168, in get_next_fire_time\r\n        start_date = max(now, self.start_date) if self.start_date else now\r\n    TypeError: '>' not supported between instances of 'datetime.datetime' and 'datetime'\r\n\r\nhere are the properties of now and self.start_date:\r\n\r\nstart_date <class 'datetime.datetime'> 2018-02-09 00:00:00+08:00\r\n\r\nnow <netref class 'datetime.datetime'> 2018-02-11 16:07:44.748765+08:00\r\n\r\nserver.py\r\n\r\n    import pytz\r\n    from datetime import datetime\r\n    import time\r\n    import rpyc\r\n    from rpyc.utils.server import ThreadedServer\r\n    \r\n    from apscheduler.schedulers.background import BackgroundScheduler\r\n    from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore\r\n    \r\n    from apscheduler.executors.pool import ProcessPoolExecutor\r\n    from apscheduler.triggers.cron import CronTrigger\r\n    \r\n    from utils.pre_load import yml_engines\r\n    \r\n    def init_scheduler():\r\n        jobstores = {\r\n                        'default': SQLAlchemyJobStore(engine=yml_engines[\"user_mmv_status\"], tablename = \"rctp_jobs\")\r\n                        }\r\n        executors = {\r\n                        'default': {'type': 'threadpool', 'max_workers': 20},\r\n                        'processpool': ProcessPoolExecutor(max_workers=5)\r\n                        }\r\n        job_defaults = {\r\n                        'coalesce': False,\r\n                        'max_instances': 3\r\n                        }\r\n    \r\n        scheduler = BackgroundScheduler()\r\n    \r\n        scheduler.configure(jobstores=jobstores, executors=executors, job_defaults=job_defaults, timezone=pytz.timezone('Asia/Shanghai'))\r\n    \r\n        return scheduler\r\n    \r\n    scheduler = init_scheduler()\r\n    scheduler.start()\r\n    \r\n    def write_data(file_name):\r\n        with open(\"/tmp/\"+file_name, \"a\") as f:\r\n            c_t = str(datetime.now()) + \"\\n\"\r\n            f.write(c_t)\r\n            \r\n    class JobSchedulerService(rpyc.Service):\r\n        def exposed_add_job(self, func, **data):\r\n            \"\"\"Adds a new job.\"\"\"\r\n    \r\n            try:\r\n                job = scheduler.add_job(func, **data)\r\n                print(\"add one job\")\r\n                return job\r\n            except Exception as e:\r\n                raise e\r\n    \r\n        def exposed_update_job(self, job_id, **data):\r\n            \"\"\"Updates a j8ob.\"\"\"\r\n    \r\n            try:\r\n                scheduler.modify_job(job_id, **data)\r\n            except Exception as e:\r\n                raise e\r\n    \r\n        def exposed_reschedule_job(self, job_id, jobstore=None, trigger=None, **trigger_args):\r\n            try:\r\n                scheduler.reschedule_job(job_id = job_id, jobstore = jobstore,\r\n                                              trigger = trigger, **trigger_args)\r\n            except Exception as e:\r\n                raise e\r\n    \r\n        def exposed_pause_job(self, job_id):\r\n            \"\"\"Pauses a job.\"\"\"\r\n    \r\n            try:\r\n                scheduler.pause_job(job_id)\r\n                job = scheduler.get_job(job_id)\r\n            except Exception as e:\r\n                raise e\r\n    \r\n        def exposed_resume_job(self, job_id):\r\n            \"\"\"Resumes a job.\"\"\"\r\n    \r\n            try:\r\n                scheduler.resume_job(job_id)\r\n                job = scheduler.get_job(job_id)\r\n            except Exception as e:\r\n                raise e\r\n    \r\n        def exposed_remove_job(self, job_id):\r\n            try:\r\n                scheduler.remove_job(job_id)\r\n            except Exception as e:\r\n                raise e\r\n    \r\n    if __name__ == '__main__':\r\n        protocol_config = {'allow_all_attrs': True, 'allow_pickle': True}\r\n        server = ThreadedServer(JobSchedulerService, port=12345, protocol_config=protocol_config)\r\n        try:\r\n            server.start()\r\n        except (KeyboardInterrupt, SystemExit):\r\n            pass\r\n        finally:\r\n            server.close()\r\n            scheduler.shutdown()\r\n\r\nclient.py\r\n\r\n    \r\n    import pytz\r\n    import uuid\r\n    import rpyc\r\n    \r\n    from apscheduler.triggers.cron import CronTrigger\r\n    if __name__ == '__main__':\r\n        job_id = \"30d706d8-0c9b-11e8-b751-000c29d51830\"\r\n    \r\n    \r\n        #start_date = \"2018-02-11\"\r\n        #end_date = \"2018-02-12\"\r\n    \r\n        #data = {    \"trigger\": \"cron\",\r\n        #            \"args\" : [\"a.log\"],\r\n        #            \"start_date\": start_date,\r\n        #            \"end_date\": end_date,\r\n        #            \"second\": \"*/5\",\r\n        #            \"id\": job_id #str(uuid.uuid1())\r\n        #            }\r\n        #conn = rpyc.connect(\"localhost\", 12345, config={\"allow_all_attrs\": True,'allow_pickle': True })\r\n        #job = conn.root.add_job('scheduler:write_data', **data)\r\n        #conn.close()\r\n    \r\n        data = {\"start_date\": \"2018-02-11\",\r\n                \"end_date\": \"2018-02-12\",\r\n                \"second\": \"*/7\"}\r\n        conn = rpyc.connect(\"localhost\", 12345, config={\"allow_all_attrs\": True,'allow_pickle': True })\r\n        trigger = CronTrigger(**data)\r\n        conn.root.reschedule_job(job_id,\r\n                                 trigger = trigger)\r\n        conn.close()\r\n\r\n\r\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/agronholm/apscheduler/issues/285",
        "repository_url": "https://api.github.com/repos/agronholm/apscheduler",
        "labels_url": "https://api.github.com/repos/agronholm/apscheduler/issues/285/labels{/name}",
        "comments_url": "https://api.github.com/repos/agronholm/apscheduler/issues/285/comments",
        "events_url": "https://api.github.com/repos/agronholm/apscheduler/issues/285/events",
        "html_url": "https://github.com/agronholm/apscheduler/issues/285",
        "id": 294108328,
        "node_id": "MDU6SXNzdWUyOTQxMDgzMjg=",
        "number": 285,
        "title": "Repeating job with very short interval triggers exception on shutdown: 'RuntimeError: cannot schedule new futures after shutdown'",
        "user": {
            "login": "awlodge",
            "id": 3382572,
            "node_id": "MDQ6VXNlcjMzODI1NzI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3382572?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/awlodge",
            "html_url": "https://github.com/awlodge",
            "followers_url": "https://api.github.com/users/awlodge/followers",
            "following_url": "https://api.github.com/users/awlodge/following{/other_user}",
            "gists_url": "https://api.github.com/users/awlodge/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/awlodge/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/awlodge/subscriptions",
            "organizations_url": "https://api.github.com/users/awlodge/orgs",
            "repos_url": "https://api.github.com/users/awlodge/repos",
            "events_url": "https://api.github.com/users/awlodge/events{/privacy}",
            "received_events_url": "https://api.github.com/users/awlodge/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 13,
        "created_at": "2018-02-03T12:46:52Z",
        "updated_at": "2020-08-08T23:43:48Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "This code hits the problem pretty reliably (~75% of the time on python2, only ~60% of the time on python3 for some reason):\r\n```python\r\nfrom apscheduler.schedulers.background import BackgroundScheduler\r\nimport time\r\nimport logging\r\n\r\nlogging.basicConfig()\r\n\r\ndef dummy_job():\r\n    print(\"test\")\r\n\r\nscheduler = BackgroundScheduler()\r\nexecutors = {\r\n    'default': {\r\n        'type': 'threadpool',\r\n        'max_workers': 20\r\n    }\r\n}\r\nscheduler.configure(executors=executors)\r\nscheduler.start()\r\n\r\nscheduler.add_job(func=dummy_job, trigger='interval', seconds=0.05)\r\ntime.sleep(0.5)\r\nscheduler.shutdown()\r\n```\r\n\r\nThis code gives the following output when run:\r\n```\r\ntest\r\ntest\r\ntest\r\ntest\r\ntest\r\ntest\r\ntest\r\ntest\r\ntest\r\nERROR:apscheduler.scheduler:Error submitting job \"dummy_job (trigger: interval[0:00:00.050000], next run at: 2018-02-03 12:40:57 GMT)\" to executor \"default\"\r\nTraceback (most recent call last):\r\n  File \"/data/build/ext/apscheduler/apscheduler/schedulers/base.py\", line 960, in _process_jobs\r\n    executor.submit_job(job, run_times)\r\n  File \"/data/build/ext/apscheduler/apscheduler/executors/base.py\", line 71, in submit_job\r\n    self._do_submit_job(job, run_times)\r\n  File \"/data/build/ext/apscheduler/apscheduler/executors/pool.py\", line 22, in _do_submit_job\r\n    f = self._pool.submit(run_job, job, job._jobstore_alias, run_times, self._logger.name)\r\n  File \"/usr/lib64/python3.3/concurrent/futures/thread.py\", line 97, in submit\r\n    raise RuntimeError('cannot schedule new futures after shutdown')\r\nRuntimeError: cannot schedule new futures after shutdown\r\n```\r\n\r\nThis is a regression introduced by #268 - reverting that fix causes it to cease hitting this problem at all.\r\n\r\nThe reason we are hitting this is that we have a repeating job running with a 100ms interval whenever the scheduler is running. Since upgrading to v3.5.1 we hit this error every time the scheduler is stopped.\r\n\r\nI'm not sure what the right fix is - obviously you can't just revert #268. Maybe `BaseScheduler._process_jobs` could check whether the scheduler is running before it does anything else?",
        "performed_via_github_app": null
    }
]