[
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/88",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/88/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/88/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/88/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/88",
        "id": 750078834,
        "node_id": "MDU6SXNzdWU3NTAwNzg4MzQ=",
        "number": 88,
        "title": "ParserPEG with multiple root rules",
        "user": {
            "login": "Mortal",
            "id": 373639,
            "node_id": "MDQ6VXNlcjM3MzYzOQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/373639?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Mortal",
            "html_url": "https://github.com/Mortal",
            "followers_url": "https://api.github.com/users/Mortal/followers",
            "following_url": "https://api.github.com/users/Mortal/following{/other_user}",
            "gists_url": "https://api.github.com/users/Mortal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Mortal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Mortal/subscriptions",
            "organizations_url": "https://api.github.com/users/Mortal/orgs",
            "repos_url": "https://api.github.com/users/Mortal/repos",
            "events_url": "https://api.github.com/users/Mortal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Mortal/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1483492174,
                "node_id": "MDU6TGFiZWwxNDgzNDkyMTc0",
                "url": "https://api.github.com/repos/textX/Arpeggio/labels/feature%20request",
                "name": "feature request",
                "color": "006b75",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2020-11-24T21:23:44Z",
        "updated_at": "2020-11-26T19:13:38Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I have a grammar with multiple top-level non-terminals that I want to use at different points in my program. Currently I have to specify ONE root rule when loading a grammar with ParserPEG. That means I need to parse the same grammar multiple times with different root rule names if I want to use different root rules throughout my program.\r\n\r\nCould Arpeggio add support for specifying the root rule name when calling `parse()`, instead of once and for all for the parser when instantiating it? Or is there another way of achieving this?\r\n\r\nE.g. currently I have to do this:\r\n\r\n```python\r\nfrom arpeggio.cleanpeg import ParserPEG\r\n\r\ngrammar = r\"\"\"\r\nassignment = name \"=\" expr EOF\r\nexpression = expr EOF\r\nname = r\"\\b[a-z]+\\b\"\r\nexpr = name ((\"+\" / \"-\") name)*\r\n\"\"\"\r\nparser_e = ParserPEG(grammar, root_rule_name=\"expression\")\r\nparser_a = ParserPEG(grammar, root_rule_name=\"assignment\")  # <-- BAD! Parsing the same grammar twice\r\n\r\ndef run(condition, action):\r\n    parser_e.parse(condition)\r\n    parser_a.parse(action)\r\n\r\nrun(\"a + b\", \"c = a + a + b\")\r\n```\r\n\r\nI would like to be able to do this instead:\r\n\r\n```python\r\nparser2 = ParserPEG(grammar)\r\n\r\ndef run2(condition, action):\r\n    parser2.parse(condition, root_rule_name=\"expression\")\r\n    parser2.parse(action, root_rule_name=\"assignment\")  # GOOD! One grammar, multiple root rules\r\n```",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/80",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/80/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/80/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/80/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/80",
        "id": 645751766,
        "node_id": "MDU6SXNzdWU2NDU3NTE3NjY=",
        "number": 80,
        "title": "Automatic detection of main rule name assumming it is the first one",
        "user": {
            "login": "KOLANICH",
            "id": 240344,
            "node_id": "MDQ6VXNlcjI0MDM0NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/240344?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/KOLANICH",
            "html_url": "https://github.com/KOLANICH",
            "followers_url": "https://api.github.com/users/KOLANICH/followers",
            "following_url": "https://api.github.com/users/KOLANICH/following{/other_user}",
            "gists_url": "https://api.github.com/users/KOLANICH/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/KOLANICH/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/KOLANICH/subscriptions",
            "organizations_url": "https://api.github.com/users/KOLANICH/orgs",
            "repos_url": "https://api.github.com/users/KOLANICH/repos",
            "events_url": "https://api.github.com/users/KOLANICH/events{/privacy}",
            "received_events_url": "https://api.github.com/users/KOLANICH/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1483492174,
                "node_id": "MDU6TGFiZWwxNDgzNDkyMTc0",
                "url": "https://api.github.com/repos/textX/Arpeggio/labels/feature%20request",
                "name": "feature request",
                "color": "006b75",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-06-25T18:02:01Z",
        "updated_at": "2020-06-30T08:24:54Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "Arpeggio requires explicit first rule name. It can be assummed it is the first one - it is the usual convention. But that the user has to provide it is hardcoded in ParserPEG architecture (PEGVisitor is hardcoded), it cannot be changed nicely (without monkey-patching) without changes in arpeggio itself.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/78",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/78/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/78/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/78/events",
        "html_url": "https://github.com/textX/Arpeggio/pull/78",
        "id": 640613426,
        "node_id": "MDExOlB1bGxSZXF1ZXN0NDM1OTkwMjA3",
        "number": 78,
        "title": "Moved some metadata into setup.cfg",
        "user": {
            "login": "KOLANICH",
            "id": 240344,
            "node_id": "MDQ6VXNlcjI0MDM0NA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/240344?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/KOLANICH",
            "html_url": "https://github.com/KOLANICH",
            "followers_url": "https://api.github.com/users/KOLANICH/followers",
            "following_url": "https://api.github.com/users/KOLANICH/following{/other_user}",
            "gists_url": "https://api.github.com/users/KOLANICH/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/KOLANICH/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/KOLANICH/subscriptions",
            "organizations_url": "https://api.github.com/users/KOLANICH/orgs",
            "repos_url": "https://api.github.com/users/KOLANICH/repos",
            "events_url": "https://api.github.com/users/KOLANICH/events{/privacy}",
            "received_events_url": "https://api.github.com/users/KOLANICH/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-06-17T17:19:59Z",
        "updated_at": "2021-01-12T17:41:35Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/textX/Arpeggio/pulls/78",
            "html_url": "https://github.com/textX/Arpeggio/pull/78",
            "diff_url": "https://github.com/textX/Arpeggio/pull/78.diff",
            "patch_url": "https://github.com/textX/Arpeggio/pull/78.patch"
        },
        "body": "",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/75",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/75/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/75/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/75/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/75",
        "id": 611818058,
        "node_id": "MDU6SXNzdWU2MTE4MTgwNTg=",
        "number": 75,
        "title": "Is there a way to go back through a tree to already visited node?",
        "user": {
            "login": "ArturBraun",
            "id": 55237940,
            "node_id": "MDQ6VXNlcjU1MjM3OTQw",
            "avatar_url": "https://avatars.githubusercontent.com/u/55237940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ArturBraun",
            "html_url": "https://github.com/ArturBraun",
            "followers_url": "https://api.github.com/users/ArturBraun/followers",
            "following_url": "https://api.github.com/users/ArturBraun/following{/other_user}",
            "gists_url": "https://api.github.com/users/ArturBraun/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ArturBraun/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ArturBraun/subscriptions",
            "organizations_url": "https://api.github.com/users/ArturBraun/orgs",
            "repos_url": "https://api.github.com/users/ArturBraun/repos",
            "events_url": "https://api.github.com/users/ArturBraun/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ArturBraun/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-05-04T11:56:13Z",
        "updated_at": "2020-05-04T11:58:26Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I want to parse a \"while\" loop. My idea is to:\r\n1. Check the while loop condition (If it\u2019s false, jump to next node after ending of while nodes)\r\n2. If condition is true execute statements inside while loop\r\n3. If I meet the end node of while loop then I jump to the while loop beginning node and do step 1.\r\n\r\nMy question is as subject above. How to jump back to already visited node? Or maybe you have differents approches to parse the while loop. All ideas are welcome!",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/71",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/71/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/71/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/71/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/71",
        "id": 581720752,
        "node_id": "MDU6SXNzdWU1ODE3MjA3NTI=",
        "number": 71,
        "title": "NoMatch reports line,col, but debug messages report position.",
        "user": {
            "login": "StyXman",
            "id": 167327,
            "node_id": "MDQ6VXNlcjE2NzMyNw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/167327?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/StyXman",
            "html_url": "https://github.com/StyXman",
            "followers_url": "https://api.github.com/users/StyXman/followers",
            "following_url": "https://api.github.com/users/StyXman/following{/other_user}",
            "gists_url": "https://api.github.com/users/StyXman/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/StyXman/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/StyXman/subscriptions",
            "organizations_url": "https://api.github.com/users/StyXman/orgs",
            "repos_url": "https://api.github.com/users/StyXman/repos",
            "events_url": "https://api.github.com/users/StyXman/events{/privacy}",
            "received_events_url": "https://api.github.com/users/StyXman/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2020-03-15T15:37:48Z",
        "updated_at": "2020-03-19T12:21:28Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "From this page https://textx.github.io/Arpeggio/stable/handling_errors/ :\r\n\r\n```\r\nTraceback (most recent call last):\r\n  ...\r\narpeggio.NoMatch: Expected '+' or '-' or 'number' or \r\n  '(' at position (1, 6) => '23+4/*r-89'.\r\n```\r\n\r\nBut the debug messages show only the position in file (from another project I'm working on):\r\n\r\n```\r\n[...]\r\n                                                                 ?? Try match rule StrMatch(:) in set_attribute at position 15638 => -dasharray*: @primary\r\n                                                                  ++ Match ':' at 15638 => '-dasharray*:* @primary'\r\n                                                                  >> Matching rule expression=OrderedChoice in set_attribute at position 15639 => dasharray:* @primary-\r\n[...]\r\n```\r\n\r\nIt would be nice that the debug messages also reported line+col, as many editors only support displaying that instead of position in file.\r\n\r\nIf you could point me to where the code should be changed, I could even try to do the patch myself.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/70",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/70/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/70/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/70/events",
        "html_url": "https://github.com/textX/Arpeggio/pull/70",
        "id": 530632374,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzQ3MjYxNDUw",
        "number": 70,
        "title": "Arpeggio Refractor and cleanup",
        "user": {
            "login": "bitranox",
            "id": 8355239,
            "node_id": "MDQ6VXNlcjgzNTUyMzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8355239?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bitranox",
            "html_url": "https://github.com/bitranox",
            "followers_url": "https://api.github.com/users/bitranox/followers",
            "following_url": "https://api.github.com/users/bitranox/following{/other_user}",
            "gists_url": "https://api.github.com/users/bitranox/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bitranox/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bitranox/subscriptions",
            "organizations_url": "https://api.github.com/users/bitranox/orgs",
            "repos_url": "https://api.github.com/users/bitranox/repos",
            "events_url": "https://api.github.com/users/bitranox/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bitranox/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2019-11-30T21:28:55Z",
        "updated_at": "2020-06-15T16:02:52Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/textX/Arpeggio/pulls/70",
            "html_url": "https://github.com/textX/Arpeggio/pull/70",
            "diff_url": "https://github.com/textX/Arpeggio/pull/70.diff",
            "patch_url": "https://github.com/textX/Arpeggio/pull/70.patch"
        },
        "body": "Dear Igor,\r\nin order to implement PythonClassParser I started to refractor the monolythic __init__.py,\r\nto make things a bit more easy to handle.\r\n\r\n- dropped Python 2.7 - Python 3.5 Support (if someone needs it, they can use the current release)\r\n- cleaned out Python2.7 - 3.5 related code\r\n- started to implement strict type hinting\r\n- changed Imports to accomplish \"Doctest\" and Pytest under Pycharm\r\n- ovoid cluttering of the namespace on imports\r\n- shellscript to run pytest and mypy in a loop () locally without installing\r\n- pycodestyle (old: PEP8) testing and cleaning\r\n- started to put abc classes for the base classes\r\n- relocated /tests directory outside the sources\r\n- updated performance test shellscripts\r\n- code coverage reports - see : https://codecov.io/gh/bitranox/Arpeggio\r\n- adopted pytest-codestyle rules, not to quarrel about the densed function notation You like\r\n\r\nCheck out the latest commit, I guess from here we can start to work further.\r\n\r\nAll tests are working, I also found the performance tests - I will check it out later.\r\nYour comments are welcome, please let me know !\r\n\r\nRobert\r\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/69",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/69/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/69/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/69/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/69",
        "id": 528814010,
        "node_id": "MDU6SXNzdWU1Mjg4MTQwMTA=",
        "number": 69,
        "title": "Support Inheritance on Grammars and Visitors, enhance Visitor Definition",
        "user": {
            "login": "bitranox",
            "id": 8355239,
            "node_id": "MDQ6VXNlcjgzNTUyMzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8355239?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bitranox",
            "html_url": "https://github.com/bitranox",
            "followers_url": "https://api.github.com/users/bitranox/followers",
            "following_url": "https://api.github.com/users/bitranox/following{/other_user}",
            "gists_url": "https://api.github.com/users/bitranox/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bitranox/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bitranox/subscriptions",
            "organizations_url": "https://api.github.com/users/bitranox/orgs",
            "repos_url": "https://api.github.com/users/bitranox/repos",
            "events_url": "https://api.github.com/users/bitranox/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bitranox/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 17885754,
                "node_id": "MDU6TGFiZWwxNzg4NTc1NA==",
                "url": "https://api.github.com/repos/textX/Arpeggio/labels/enhancement",
                "name": "enhancement",
                "color": "84b6eb",
                "default": true,
                "description": null
            },
            {
                "id": 1483492174,
                "node_id": "MDU6TGFiZWwxNDgzNDkyMTc0",
                "url": "https://api.github.com/repos/textX/Arpeggio/labels/feature%20request",
                "name": "feature request",
                "color": "006b75",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-11-26T15:52:03Z",
        "updated_at": "2019-11-27T14:33:56Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I love Arpeggio, but now when really working with it, I would like to have certain features : \r\n\r\nsince I do Parsers for many different Formats, there are some Grammars which are repeating over and Over again - so i want to put them into a class, inherit them, monkey patch them etc. - thats working at the moment like this : \r\n\r\n```python\r\nclass GrammarBase(object):\r\n    grammar = arpeggio.ParsingExpression()\r\n    whitespace = '\\t '\r\n\r\n    class Visitor(arpeggio.PTNodeVisitor):\r\n        pass\r\n\r\n\r\nclass GrammarBasic(GrammarBase):\r\n    # PROBLEM1 - it works only with staticmethods\r\n    @staticmethod\r\n    def grammar_basic_1():\r\n        return arpeggio.RegExMatch(r\"...\")\r\n\r\n    @staticmethod\r\n    def grammar_basic_2():\r\n        return arpeggio.RegExMatch(r\"...\")\r\n\r\n    # grammar is the default I use - like in pypeg2\r\n    @staticmethod\r\n    def grammar():\r\n        return arpeggio.Sequence(arpeggio.RegExMatch(r\"...\"), GrammarBasic.grammar_basic_1, GrammarBasic.grammar_basic_2)\r\n\r\n\r\n    class Visitor(GrammarBase.Visitor):\r\n        # PROBLEM2 - the prefix \"visit_\" is really useless here\r\n        def visit_grammar_basic_1(self, node, children):\r\n            return <something useful>        \r\n        def visit_grammar_basic_2(self, node, children):\r\n            return <something useful>        \r\n\r\nclass GrammarSpecific1(GrammarBasic): \r\n    # override the default whitespace with a specific one\r\n    whitespace = '\\t \\n'\r\n    @staticmethod\r\n    def grammar_specific_1():\r\n        return arpeggio.Sequence(GrammarBasic.grammar_basic_1, GrammarBasic.grammar_basic_2)\r\n\r\n    # grammar is the default I use - like in pypeg2\r\n    @staticmethod\r\n   def grammar():\r\n        return arpeggio.Sequence(arpeggio.RegExMatch(r\"...\"), GrammarSpecific1.grammar_specific_1, GrammarBasic.grammar_basic_1)\r\n\r\n\r\n    class Visitor(GrammarBasic.Visitor, <and maybe some more>):\r\n        def visit_grammar_specific_1(self, node, children):\r\n            return <something useful>\r\n        # PROBLEM3 - Visitor gets confused, because it does not know\r\n        # which one to use - GrammarBasic.grammar or GrammarSpecific1.grammar\r\n        # so this is not possible !\r\n        # def visit_grammar(self, node, children):\r\n        #     return <something useful>\r\n\r\ndef parse_file(path_file: Union[str, pathlib.Path], grammar: GrammarBase):\r\n    \"\"\"\r\n    >>> read_file(path_file='/some_file.txt', grammar=GrammarSpecific1())\r\n    \"\"\"\r\n\r\n    with open(str(path_file), 'r') as data_file:\r\n        string_data = data_file.read()\r\n    parser = arp.ParserPython(grammar.grammar, ws=grammar.whitespace)\r\n    parse_tree = parser.parse(string_data)\r\n    data = arp.visit_parse_tree(parse_tree, grammar.Visitor())\r\n    return data\r\n\r\n```\r\nSo my proposals are : \r\n1. do not only store the function name of grammar definitions in the parse nodes, but the Object specification - so we dont get name confusions. At the moment You can not use the same names in  `GrammarBasic` and `GrammarSpecific`.\r\n\r\n2. get rif of the `visit_` prefix in the Visitor Class - its useless. You can look out for both for backward compatibility (with deprecation warning)\r\n\r\n3. Grammars should be able to be defined as standard methods of the class, not as ```@staticmethod```\r\n\r\n4. Visitors definition should be better like : \r\n\r\n```python\r\nclass Visitor(arpeggio.PTNodeVisitor):\r\n    # if grammar \"grammarobject\" like class.method is hit, some_name gots called\r\n    def some_name(self, grammarobject, node, children ):\r\n        return <something useful>\r\n```\r\nSo the name of the Visitor.method can be chosen as You like, and the correct method of the Visitor should be called, even it is inherited from another Visitor super().....\r\n\r\nIn short : \r\ngrammars defined in Classes should not collide, even if they have the same name as a method in their Base Class\r\nVisitors definition should be not ambiguouse , by not using the Method Name, but the rule object to define/map it.\r\n\r\nI hope I made myself clear, here an example : \r\n\r\n```python\r\nclass Visitor(arpeggio.PTNodeVisitor):\r\n    # if grammar \"grammarobject\" like class.method is hit, some_name gots called\r\n    def some_name(self, grammarobject1, node, children ):\r\n        return <something useful>\r\n\r\n    def some_name2(self, grammarobject2, node, children ):\r\n        return <something useful>\r\n\r\nclass Visitor2(Visitor):\r\n    def some_name3(self, grammarobject3, node, children ):\r\n        return <something useful>\r\n\r\n    # on grammarobject4, Visitor2.some_name should be called\r\n    def some_name(self, grammarobject4, node, children ):\r\n        return <something useful>\r\n\r\n    # on grammarobject1, Visitor2.some_name5 should be called,\r\n    # because it is overwritten with that definition\r\n    def some_name5(self, grammarobject1, node, children ):\r\n        return <something useful>\r\n\r\n```\r\n\r\n\r\nwhat do You developers think - any chances for that ? \r\ndo You think its a bad/good idea, and why ?\r\nMaybe there are easier ways and I use it wrong ?\r\nyours sincerely and \r\n\u0436\u0435\u043b\u0438\u043c \u0432\u0430\u043c \u043f\u0440\u0438\u0458\u0430\u0442\u0430\u043d \u0434\u0430\u043d Igor !\r\nRobert\r\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/67",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/67/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/67/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/67/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/67",
        "id": 511957610,
        "node_id": "MDU6SXNzdWU1MTE5NTc2MTA=",
        "number": 67,
        "title": "v1.9.0 tarball checksum changed",
        "user": {
            "login": "mabraham",
            "id": 112395,
            "node_id": "MDQ6VXNlcjExMjM5NQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/112395?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mabraham",
            "html_url": "https://github.com/mabraham",
            "followers_url": "https://api.github.com/users/mabraham/followers",
            "following_url": "https://api.github.com/users/mabraham/following{/other_user}",
            "gists_url": "https://api.github.com/users/mabraham/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mabraham/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mabraham/subscriptions",
            "organizations_url": "https://api.github.com/users/mabraham/orgs",
            "repos_url": "https://api.github.com/users/mabraham/repos",
            "events_url": "https://api.github.com/users/mabraham/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mabraham/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2019-10-24T13:47:41Z",
        "updated_at": "2019-10-25T13:50:03Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "The macports port of arpeggio v1.9.0 is currently broken because the checksums computed when the port was made (see https://github.com/macports/macports-ports/blob/master/python/py-arpeggio/Portfile) don't match those computed for the current download:\r\n\r\n```\r\n:notice:fetch --->  Attempting to fetch Arpeggio-1.9.0.tar.gz from https://github.com/igordejanovic/Arpeggio/tarball/v1.9.0\r\n:debug:fetch Privilege de-escalation not attempted as not running as root.\r\n:debug:checksum checksum phase started at Thu Oct 24 13:20:38 CEST 2019\r\n:notice:checksum --->  Verifying checksums for py37-arpeggio\r\n:debug:checksum Executing org.macports.checksum (py37-arpeggio)\r\n:info:checksum --->  Checksumming Arpeggio-1.9.0.tar.gz\r\n:debug:checksum Calculated (rmd160) is 8576eb4fb7419fa0835e71d356bd145fcf3f1adb\r\n:error:checksum Checksum (rmd160) mismatch for Arpeggio-1.9.0.tar.gz\r\n:info:checksum Portfile checksum: Arpeggio-1.9.0.tar.gz rmd160 2e9823273ad9a382aaa42dbc6553e3892f7f25d5\r\n:info:checksum Distfile checksum: Arpeggio-1.9.0.tar.gz rmd160 8576eb4fb7419fa0835e71d356bd145fcf3f1adb\r\n:debug:checksum Calculated (sha256) is 3bd25e9b21a514b9a6384c0929f1caa710a42a417819dd2136b2c04d6cc62507\r\n:error:checksum Checksum (sha256) mismatch for Arpeggio-1.9.0.tar.gz\r\n:info:checksum Portfile checksum: Arpeggio-1.9.0.tar.gz sha256 fc6e1bd37fd1c5620f86c338cfad3bfd73217e46d79af831a62c22c3fc0b184a\r\n:info:checksum Distfile checksum: Arpeggio-1.9.0.tar.gz sha256 3bd25e9b21a514b9a6384c0929f1caa710a42a417819dd2136b2c04d6cc62507\r\n:debug:checksum Calculated (size) is 757459\r\n:error:checksum Checksum (size) mismatch for Arpeggio-1.9.0.tar.gz\r\n:info:checksum Portfile checksum: Arpeggio-1.9.0.tar.gz size 758169\r\n:info:checksum Distfile checksum: Arpeggio-1.9.0.tar.gz size 757459\r\n:info:checksum The correct checksum line may be:\r\n:info:checksum checksums           rmd160  8576eb4fb7419fa0835e71d356bd145fcf3f1adb \\\r\n:info:checksum                     sha256  3bd25e9b21a514b9a6384c0929f1caa710a42a417819dd2136b2c04d6cc62507 \\\r\n:info:checksum                     size    757459\r\n:error:checksum Failed to checksum py37-arpeggio: Unable to verify file checksums\r\n:debug:checksum Error code: NONE\r\n```\r\n\r\nI downloaded it manually on two different systems and verified that the sha256sum matches that found by macports. So I conclude that the tarball was rebuilt somehow.\r\n\r\nPlease do not make \"updates\" to tarballs once computed, because downstream automation relies on them not changing. (Learned this myself once the hard way! :-))\r\n\r\nI will submit a fix to macports",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/66",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/66/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/66/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/66/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/66",
        "id": 502949327,
        "node_id": "MDU6SXNzdWU1MDI5NDkzMjc=",
        "number": 66,
        "title": "Bugfix release 1.9.2 is available",
        "user": {
            "login": "igordejanovic",
            "id": 1673425,
            "node_id": "MDQ6VXNlcjE2NzM0MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1673425?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igordejanovic",
            "html_url": "https://github.com/igordejanovic",
            "followers_url": "https://api.github.com/users/igordejanovic/followers",
            "following_url": "https://api.github.com/users/igordejanovic/following{/other_user}",
            "gists_url": "https://api.github.com/users/igordejanovic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igordejanovic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igordejanovic/subscriptions",
            "organizations_url": "https://api.github.com/users/igordejanovic/orgs",
            "repos_url": "https://api.github.com/users/igordejanovic/repos",
            "events_url": "https://api.github.com/users/igordejanovic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igordejanovic/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1169934149,
                "node_id": "MDU6TGFiZWwxMTY5OTM0MTQ5",
                "url": "https://api.github.com/repos/textX/Arpeggio/labels/announcement",
                "name": "announcement",
                "color": "fef2c0",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-10-05T11:01:59Z",
        "updated_at": "2019-10-05T11:01:59Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "active_lock_reason": null,
        "body": "No functional changes. Only testing and packaging fixes.\r\n\r\nref #65 #57 ",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/63",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/63/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/63/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/63/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/63",
        "id": 499773437,
        "node_id": "MDU6SXNzdWU0OTk3NzM0Mzc=",
        "number": 63,
        "title": "Bugfix release 1.9.1 is available",
        "user": {
            "login": "igordejanovic",
            "id": 1673425,
            "node_id": "MDQ6VXNlcjE2NzM0MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1673425?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igordejanovic",
            "html_url": "https://github.com/igordejanovic",
            "followers_url": "https://api.github.com/users/igordejanovic/followers",
            "following_url": "https://api.github.com/users/igordejanovic/following{/other_user}",
            "gists_url": "https://api.github.com/users/igordejanovic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igordejanovic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igordejanovic/subscriptions",
            "organizations_url": "https://api.github.com/users/igordejanovic/orgs",
            "repos_url": "https://api.github.com/users/igordejanovic/repos",
            "events_url": "https://api.github.com/users/igordejanovic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igordejanovic/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1169934149,
                "node_id": "MDU6TGFiZWwxMTY5OTM0MTQ5",
                "url": "https://api.github.com/repos/textX/Arpeggio/labels/announcement",
                "name": "announcement",
                "color": "fef2c0",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-09-28T13:30:13Z",
        "updated_at": "2019-09-28T13:30:13Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "active_lock_reason": null,
        "body": "Please see CHANGELOG.md",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/59",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/59/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/59/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/59/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/59",
        "id": 473759109,
        "node_id": "MDU6SXNzdWU0NzM3NTkxMDk=",
        "number": 59,
        "title": "Symbols with empty match are not preserved",
        "user": {
            "login": "zetaraku",
            "id": 9212875,
            "node_id": "MDQ6VXNlcjkyMTI4NzU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9212875?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zetaraku",
            "html_url": "https://github.com/zetaraku",
            "followers_url": "https://api.github.com/users/zetaraku/followers",
            "following_url": "https://api.github.com/users/zetaraku/following{/other_user}",
            "gists_url": "https://api.github.com/users/zetaraku/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zetaraku/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zetaraku/subscriptions",
            "organizations_url": "https://api.github.com/users/zetaraku/orgs",
            "repos_url": "https://api.github.com/users/zetaraku/repos",
            "events_url": "https://api.github.com/users/zetaraku/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zetaraku/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1483492174,
                "node_id": "MDU6TGFiZWwxNDgzNDkyMTc0",
                "url": "https://api.github.com/repos/textX/Arpeggio/labels/feature%20request",
                "name": "feature request",
                "color": "006b75",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-07-28T16:01:06Z",
        "updated_at": "2019-08-04T08:06:45Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "Here is a minimal example.\r\n\r\nGiven the grammar:\r\n\r\n```\r\nabc = a b c\r\na = \"a\"\r\nb = r'b?'\r\nc = \"c\"\r\n```\r\n\r\nWhen it parses \"abc\" the result is normal,\r\nbut when it parses \"ac\" the NonTerminal `b` just disapper in the parse tree like this:\r\n\r\n```\r\n>>> print(parse_tree)\r\na | c\r\n```\r\n\r\nThe result is the same when using `b = \"b\"?` instead.\r\n\r\nSince `b` is actually **matched**, shouldn't it be in the parse tree (like `a` or `c`) with `node.value == ''`?",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/56",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/56/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/56/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/56/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/56",
        "id": 458091459,
        "node_id": "MDU6SXNzdWU0NTgwOTE0NTk=",
        "number": 56,
        "title": "Keeping comments",
        "user": {
            "login": "fzipi",
            "id": 3012076,
            "node_id": "MDQ6VXNlcjMwMTIwNzY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3012076?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fzipi",
            "html_url": "https://github.com/fzipi",
            "followers_url": "https://api.github.com/users/fzipi/followers",
            "following_url": "https://api.github.com/users/fzipi/following{/other_user}",
            "gists_url": "https://api.github.com/users/fzipi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fzipi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fzipi/subscriptions",
            "organizations_url": "https://api.github.com/users/fzipi/orgs",
            "repos_url": "https://api.github.com/users/fzipi/repos",
            "events_url": "https://api.github.com/users/fzipi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fzipi/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1483492174,
                "node_id": "MDU6TGFiZWwxNDgzNDkyMTc0",
                "url": "https://api.github.com/repos/textX/Arpeggio/labels/feature%20request",
                "name": "feature request",
                "color": "006b75",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-06-19T15:48:03Z",
        "updated_at": "2019-08-04T08:11:10Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Related to https://github.com/textX/textX/issues/54#issuecomment-503527852.\r\n\r\nThere are some situations in you want to keep comments. For example, when transpiling things.\r\n\r\nDon't know what is the best way to do it, but having the comment and the line where it is should suffice.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/52",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/52/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/52/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/52/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/52",
        "id": 440027236,
        "node_id": "MDU6SXNzdWU0NDAwMjcyMzY=",
        "number": 52,
        "title": "Reserved Keywords ?",
        "user": {
            "login": "eliottparis",
            "id": 1750257,
            "node_id": "MDQ6VXNlcjE3NTAyNTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1750257?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eliottparis",
            "html_url": "https://github.com/eliottparis",
            "followers_url": "https://api.github.com/users/eliottparis/followers",
            "following_url": "https://api.github.com/users/eliottparis/following{/other_user}",
            "gists_url": "https://api.github.com/users/eliottparis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eliottparis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eliottparis/subscriptions",
            "organizations_url": "https://api.github.com/users/eliottparis/orgs",
            "repos_url": "https://api.github.com/users/eliottparis/repos",
            "events_url": "https://api.github.com/users/eliottparis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eliottparis/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 17885756,
                "node_id": "MDU6TGFiZWwxNzg4NTc1Ng==",
                "url": "https://api.github.com/repos/textX/Arpeggio/labels/question",
                "name": "question",
                "color": "cc317c",
                "default": true,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-05-03T12:39:19Z",
        "updated_at": "2019-05-07T08:49:33Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Hi, first of all, thanks for this library !\r\n\r\nSorry if I'm missing something obvious, but I'm wondering how I can simply handle reserved keywords in my grammar with Arpeggio.\r\n\r\nSuppose that I have some reserved keywords in my grammar, like `class` or `function`, and I don't want them to be recognized as valid `identifier`:\r\n\r\n```python\r\nfrom arpeggio import Kwd, EOF, ParserPython\r\nfrom arpeggio import RegExMatch as _\r\n\r\n##### GRAMMAR ################################################################\r\n\r\ndef identifier ():         return _(r'[a-zA-Z]\\w*') # generate ambiguities with reserved keywords\r\n# ...\r\ndef class_body ():         return '{', '}'\r\ndef class_name ():         return identifier\r\ndef class_declaration ():  return Kwd ('class'), class_name, class_body, EOF\r\n\r\n##### MAIN ###################################################################\r\n\r\ninput_program = 'class class { }'\r\nparser = ParserPython(class_declaration, ignore_case=False, debug=True)\r\nparser.parse(input_program)\r\n```\r\n\r\nThe code above will parse the text `'class class { }'` without errors, because the second word `class` match the rule `class_name` :\r\n\r\n```\r\n?? Try match rule class_name=RegExMatch([a-zA-Z]\\w*) in class_declaration at position 6 => class *class { }\r\n   ++ Match 'class' at 6 => 'class *class* { }'\r\n```\r\n\r\nFor now, I'm using the following workaround that excludes keywords from the `identifier` regex:\r\n\r\n```python\r\nreserved_keywords = ['class', 'function'] # ...\r\ndef identifier (): return _(r'(?!\\b({})\\b)([a-zA-Z]\\w*)'.format ('|'.join (reserved_keywords)))\r\n```\r\n\r\nIt works as I expected:\r\n\r\n```\r\narpeggio.NoMatch: Expected class_name at position (1, 7) => 'class *class { }'.\r\n```\r\n\r\nBut is there something more *automatic* in Arpeggio to achieve that same purpose ? I'm thinking of something like the [Keyword class in PyPEG](https://fdik.org/pyPEG/grammar_elements.html#keyword) that internally maintains a list of keywords used in the grammar.\r\n\r\nThanks !\r\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/49",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/49/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/49/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/49/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/49",
        "id": 409260407,
        "node_id": "MDU6SXNzdWU0MDkyNjA0MDc=",
        "number": 49,
        "title": "Support for correct PEG syntax ",
        "user": {
            "login": "jontxu",
            "id": 920327,
            "node_id": "MDQ6VXNlcjkyMDMyNw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/920327?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jontxu",
            "html_url": "https://github.com/jontxu",
            "followers_url": "https://api.github.com/users/jontxu/followers",
            "following_url": "https://api.github.com/users/jontxu/following{/other_user}",
            "gists_url": "https://api.github.com/users/jontxu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jontxu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jontxu/subscriptions",
            "organizations_url": "https://api.github.com/users/jontxu/orgs",
            "repos_url": "https://api.github.com/users/jontxu/repos",
            "events_url": "https://api.github.com/users/jontxu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jontxu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2019-02-12T11:52:02Z",
        "updated_at": "2019-02-25T10:47:43Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Hello,\r\n\r\nI have been using Arpeggio as a tool to test a grammar (re)written in PEG recently. It's a really good tool (a bit hard to understand the debugging output sometimes), but I found out that it doesn't really use the syntax defined on [the original PEG paper](http://bford.info/pub/lang/peg.pdf) by Bryan Ford. \r\n\r\nThe main differences are the use of `#` instead of `//` for comments and the lack of semicolon for rule endings. I've seen that there is also a *clean PEG* alternative which doesn't follow the actual syntax (uses `=` instead of `<-`, as far as I know).\r\n\r\nI understand that using the semicolon is much simpler that not using it when parsing PEG itself, but is there any reason behind the decision? Are there any plans to support the correct PEG syntax? It doesn't deviate much from the norm, so I think doing it might be a good idea.\r\n\r\nThanks in advance.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/47",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/47/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/47/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/47/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/47",
        "id": 393691496,
        "node_id": "MDU6SXNzdWUzOTM2OTE0OTY=",
        "number": 47,
        "title": "Transfer of Arpeggio to textX organization",
        "user": {
            "login": "igordejanovic",
            "id": 1673425,
            "node_id": "MDQ6VXNlcjE2NzM0MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1673425?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igordejanovic",
            "html_url": "https://github.com/igordejanovic",
            "followers_url": "https://api.github.com/users/igordejanovic/followers",
            "following_url": "https://api.github.com/users/igordejanovic/following{/other_user}",
            "gists_url": "https://api.github.com/users/igordejanovic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igordejanovic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igordejanovic/subscriptions",
            "organizations_url": "https://api.github.com/users/igordejanovic/orgs",
            "repos_url": "https://api.github.com/users/igordejanovic/repos",
            "events_url": "https://api.github.com/users/igordejanovic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igordejanovic/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1169934149,
                "node_id": "MDU6TGFiZWwxMTY5OTM0MTQ5",
                "url": "https://api.github.com/repos/textX/Arpeggio/labels/announcement",
                "name": "announcement",
                "color": "fef2c0",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2018-12-22T17:52:16Z",
        "updated_at": "2018-12-27T19:42:58Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "active_lock_reason": null,
        "body": "The Arpeggio project is moving to its new home under [textX](https://github.com/textX) organization by the end of the next week.\r\nPlease see [here](https://github.com/igordejanovic/textX/issues/122) for the discussion. \r\n\r\nI'll post here the date of the transfer operation when I make a detailed plan and the necessary steps for you to take if you have local clones of this repo.\r\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/42",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/42/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/42/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/42/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/42",
        "id": 308291495,
        "node_id": "MDU6SXNzdWUzMDgyOTE0OTU=",
        "number": 42,
        "title": "Token not appearing in child nodes",
        "user": {
            "login": "dodumosu",
            "id": 1408662,
            "node_id": "MDQ6VXNlcjE0MDg2NjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1408662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dodumosu",
            "html_url": "https://github.com/dodumosu",
            "followers_url": "https://api.github.com/users/dodumosu/followers",
            "following_url": "https://api.github.com/users/dodumosu/following{/other_user}",
            "gists_url": "https://api.github.com/users/dodumosu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dodumosu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dodumosu/subscriptions",
            "organizations_url": "https://api.github.com/users/dodumosu/orgs",
            "repos_url": "https://api.github.com/users/dodumosu/repos",
            "events_url": "https://api.github.com/users/dodumosu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dodumosu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 17885756,
                "node_id": "MDU6TGFiZWwxNzg4NTc1Ng==",
                "url": "https://api.github.com/repos/textX/Arpeggio/labels/question",
                "name": "question",
                "color": "cc317c",
                "default": true,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "igordejanovic",
            "id": 1673425,
            "node_id": "MDQ6VXNlcjE2NzM0MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1673425?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igordejanovic",
            "html_url": "https://github.com/igordejanovic",
            "followers_url": "https://api.github.com/users/igordejanovic/followers",
            "following_url": "https://api.github.com/users/igordejanovic/following{/other_user}",
            "gists_url": "https://api.github.com/users/igordejanovic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igordejanovic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igordejanovic/subscriptions",
            "organizations_url": "https://api.github.com/users/igordejanovic/orgs",
            "repos_url": "https://api.github.com/users/igordejanovic/repos",
            "events_url": "https://api.github.com/users/igordejanovic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igordejanovic/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "igordejanovic",
                "id": 1673425,
                "node_id": "MDQ6VXNlcjE2NzM0MjU=",
                "avatar_url": "https://avatars.githubusercontent.com/u/1673425?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/igordejanovic",
                "html_url": "https://github.com/igordejanovic",
                "followers_url": "https://api.github.com/users/igordejanovic/followers",
                "following_url": "https://api.github.com/users/igordejanovic/following{/other_user}",
                "gists_url": "https://api.github.com/users/igordejanovic/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/igordejanovic/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/igordejanovic/subscriptions",
                "organizations_url": "https://api.github.com/users/igordejanovic/orgs",
                "repos_url": "https://api.github.com/users/igordejanovic/repos",
                "events_url": "https://api.github.com/users/igordejanovic/events{/privacy}",
                "received_events_url": "https://api.github.com/users/igordejanovic/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 4,
        "created_at": "2018-03-24T19:23:48Z",
        "updated_at": "2019-09-28T11:58:39Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Hello. I'm not quite sure what I'm doing wrong, but I tried to extend your calc example to work with more operators and aid my understanding of how to work with Arpeggio, and everything except the exponent and null rules are working as expected.\r\n\r\nI get an `IndexError` when I use 'NULL' in any expression. I also realized that any expression involving '^' didn't work as expected. For example, with the original (commented out) code, the expression '4 ^ 2' would return 4.0.\r\n\r\nI'm sure this is all my own mistake, but if you could clarify this, I'd be most grateful. Thanks in advance.\r\n\r\n```\r\ngrammar = '''\r\nnumber = r'\\d+\\.{0,1}\\d*'\r\nvariable = r'[A-Z]+'\r\nnull = \"NULL\"\r\nvalue = null / number / variable / \"(\" expression \")\"\r\nexponent = value ((\"^\") value)*\r\nproduct = exponent ((\"*\" / \"/\") exponent)*\r\nsum = product ((\"+\" / \"-\") product)*\r\ncomparison = sum ((\">=\" / \">\" / \"<=\" / \"<\" / \"==\" / \"!=\") sum)*\r\nexpression = comparison ((\"&&\" / \"||\") comparison)*\r\nbuilder = expression+ EOF\r\n'''\r\n\r\nOPERATIONS = {\r\n    '+': operator.iadd,\r\n    '-': operator.isub,\r\n    '*': operator.imul,\r\n    '/': operator.itruediv,\r\n    '^': operator.ipow,\r\n    '>=': operator.ge,\r\n    '>': operator.gt,\r\n    '<=': operator.le,\r\n    '<': operator.lt,\r\n    '==': operator.eq,\r\n    '!=': operator.ne,\r\n    '&&': operator.and_,\r\n    '||': operator.or_\r\n}\r\n\r\nclass TreeVisitor(PTNodeVisitor):\r\n    def visit_null(self, node, children):\r\n        return None\r\n\r\n    def visit_number(self, node, children):\r\n        return float(node.value)\r\n\r\n    def visit_value(self, node, children):\r\n        return children[-1]\r\n\r\n    def visit_exponent(self, node, children):\r\n        # TODO: not sure why the exponent is a special case,\r\n        # but the sign isn't being consumed/returned in the parse\r\n        # tree\r\n        # ---- ORIGINAL CODE ----\r\n        # exponent = children[0]\r\n        # for i in range(2, len(children), 2):\r\n        #     sign = children[i - 1]\r\n        #     exponent = OPERATIONS[sign](exponent, children[i])\r\n        #\r\n        # return exponent\r\n        # ---- END ORIGINAL CODE ----\r\n        if len(children) == 1:\r\n            return children[0]\r\n\r\n        exponent = children[0]\r\n        for i in children[1:]:\r\n            exponent **= i\r\n\r\n        return exponent\r\n\r\n    def visit_product(self, node, children):\r\n        product = children[0]\r\n        for i in range(2, len(children), 2):\r\n            sign = children[i - 1]\r\n            product = OPERATIONS[sign](product, children[i])\r\n\r\n        return product\r\n\r\n    def visit_sum(self, node, children):\r\n        total = children[0]\r\n        for i in range(2, len(children), 2):\r\n            sign = children[i - 1]\r\n            total = OPERATIONS[sign](total, children[i])\r\n\r\n        return total\r\n\r\n    def visit_comparison(self, node, children):\r\n        comparison = children[0]\r\n        for i in range(2, len(children), 2):\r\n            sign = children[i - 1]\r\n            comparison = OPERATIONS[sign](comparison, children[i])\r\n\r\n        return comparison\r\n\r\n    def visit_expression(self, node, children):\r\n        expression = children[0]\r\n        for i in range(2, len(children), 2):\r\n            sign = children[i - 1]\r\n            expression = OPERATIONS[sign](expression, children[i])\r\n\r\n        return expression\r\n\r\n\r\nparser = ParserPEG(grammar, 'builder')\r\n\r\n\r\ndef process_builder_expression(expression):\r\n    tree = parser.parse(expression)\r\n    return visit_parse_tree(tree, TreeVisitor())\r\n```",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/39",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/39/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/39/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/39/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/39",
        "id": 255010547,
        "node_id": "MDU6SXNzdWUyNTUwMTA1NDc=",
        "number": 39,
        "title": "Update docs to reflext RegExMatch changes",
        "user": {
            "login": "igordejanovic",
            "id": 1673425,
            "node_id": "MDQ6VXNlcjE2NzM0MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1673425?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igordejanovic",
            "html_url": "https://github.com/igordejanovic",
            "followers_url": "https://api.github.com/users/igordejanovic/followers",
            "following_url": "https://api.github.com/users/igordejanovic/following{/other_user}",
            "gists_url": "https://api.github.com/users/igordejanovic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igordejanovic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igordejanovic/subscriptions",
            "organizations_url": "https://api.github.com/users/igordejanovic/orgs",
            "repos_url": "https://api.github.com/users/igordejanovic/repos",
            "events_url": "https://api.github.com/users/igordejanovic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igordejanovic/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-09-04T11:13:19Z",
        "updated_at": "2017-09-04T11:13:19Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "active_lock_reason": null,
        "body": "New params introduced by PR #38 from @Aluriak \r\nDocs needs update.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/36",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/36/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/36/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/36/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/36",
        "id": 240842822,
        "node_id": "MDU6SXNzdWUyNDA4NDI4MjI=",
        "number": 36,
        "title": "Implement deepcopy for parsed nodes",
        "user": {
            "login": "demianw",
            "id": 272705,
            "node_id": "MDQ6VXNlcjI3MjcwNQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/272705?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/demianw",
            "html_url": "https://github.com/demianw",
            "followers_url": "https://api.github.com/users/demianw/followers",
            "following_url": "https://api.github.com/users/demianw/following{/other_user}",
            "gists_url": "https://api.github.com/users/demianw/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/demianw/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/demianw/subscriptions",
            "organizations_url": "https://api.github.com/users/demianw/orgs",
            "repos_url": "https://api.github.com/users/demianw/repos",
            "events_url": "https://api.github.com/users/demianw/events{/privacy}",
            "received_events_url": "https://api.github.com/users/demianw/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 17885754,
                "node_id": "MDU6TGFiZWwxNzg4NTc1NA==",
                "url": "https://api.github.com/repos/textX/Arpeggio/labels/enhancement",
                "name": "enhancement",
                "color": "84b6eb",
                "default": true,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2017-07-06T04:40:54Z",
        "updated_at": "2018-07-24T08:11:22Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Being able to deep copy nodes will enable implementing strategies requiring parse tree transformations such as syntactic sugar or static analyses of the language. Hence, it would be good to be able to copy nodes.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/29",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/29/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/29/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/29/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/29",
        "id": 181145800,
        "node_id": "MDU6SXNzdWUxODExNDU4MDA=",
        "number": 29,
        "title": "Support for injecting extra rules written in Python into PEG grammars",
        "user": {
            "login": "ninmesara",
            "id": 16024629,
            "node_id": "MDQ6VXNlcjE2MDI0NjI5",
            "avatar_url": "https://avatars.githubusercontent.com/u/16024629?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ninmesara",
            "html_url": "https://github.com/ninmesara",
            "followers_url": "https://api.github.com/users/ninmesara/followers",
            "following_url": "https://api.github.com/users/ninmesara/following{/other_user}",
            "gists_url": "https://api.github.com/users/ninmesara/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ninmesara/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ninmesara/subscriptions",
            "organizations_url": "https://api.github.com/users/ninmesara/orgs",
            "repos_url": "https://api.github.com/users/ninmesara/repos",
            "events_url": "https://api.github.com/users/ninmesara/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ninmesara/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2016-10-05T12:59:17Z",
        "updated_at": "2018-02-20T19:12:30Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "It would be useful to be able to inject rules written as python functions into PEG grammars.\nThis would accomplish two things:\n1. Greater portability for libraries. I could publish a library with python functions which anyone could use regardless of whether they're using the `peg`, `cleanpeg` or `python` parsers. Python functions, although more cumbersome to write, are more composable.\n2. It would allow allow the user to write special rules able to respect whitespace in PEG files, while skipping whitespace in the rest of the rules. I believe this is currently impossible without rewriting the whole grammar in Python.\n\nI'd suggest the following API:\n\n``` python\nfrom lib.external import rule1, rule2\nfrom arpeggio.cleanpeg import ParserPEG\nparser = ParserPEG(calc_grammar,\n    \"calc\", \n    extra_rules={'rule_name1': rule1,  'rule_name2': rule2})\n```\n\nThe user could then use `'rule_name1'` and `'rule_name2'` in the file, and the rules would be automatically resolve. There might be a problem with name clashes between user defined rules and inner rules defined by the external functions, though. I'm not familiar enough with Arpeggio's internals to be sure.\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/28",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/28/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/28/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/28/events",
        "html_url": "https://github.com/textX/Arpeggio/pull/28",
        "id": 158109797,
        "node_id": "MDExOlB1bGxSZXF1ZXN0NzIzMjM3OTM=",
        "number": 28,
        "title": "adding support for shortest choice",
        "user": {
            "login": "leiyangyou",
            "id": 104397,
            "node_id": "MDQ6VXNlcjEwNDM5Nw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/104397?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/leiyangyou",
            "html_url": "https://github.com/leiyangyou",
            "followers_url": "https://api.github.com/users/leiyangyou/followers",
            "following_url": "https://api.github.com/users/leiyangyou/following{/other_user}",
            "gists_url": "https://api.github.com/users/leiyangyou/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/leiyangyou/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/leiyangyou/subscriptions",
            "organizations_url": "https://api.github.com/users/leiyangyou/orgs",
            "repos_url": "https://api.github.com/users/leiyangyou/repos",
            "events_url": "https://api.github.com/users/leiyangyou/events{/privacy}",
            "received_events_url": "https://api.github.com/users/leiyangyou/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2016-06-02T10:35:18Z",
        "updated_at": "2016-06-03T12:47:40Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/textX/Arpeggio/pulls/28",
            "html_url": "https://github.com/textX/Arpeggio/pull/28",
            "diff_url": "https://github.com/textX/Arpeggio/pull/28.diff",
            "patch_url": "https://github.com/textX/Arpeggio/pull/28.patch"
        },
        "body": "Hi,\n\nHopefully this is useful for someone (A ShortestChoice variant of OrderedChoice)\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/24",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/24/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/24/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/24/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/24",
        "id": 114464158,
        "node_id": "MDU6SXNzdWUxMTQ0NjQxNTg=",
        "number": 24,
        "title": "Do not suppress rules with one child sequences",
        "user": {
            "login": "igordejanovic",
            "id": 1673425,
            "node_id": "MDQ6VXNlcjE2NzM0MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1673425?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igordejanovic",
            "html_url": "https://github.com/igordejanovic",
            "followers_url": "https://api.github.com/users/igordejanovic/followers",
            "following_url": "https://api.github.com/users/igordejanovic/following{/other_user}",
            "gists_url": "https://api.github.com/users/igordejanovic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igordejanovic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igordejanovic/subscriptions",
            "organizations_url": "https://api.github.com/users/igordejanovic/orgs",
            "repos_url": "https://api.github.com/users/igordejanovic/repos",
            "events_url": "https://api.github.com/users/igordejanovic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igordejanovic/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2015-11-01T11:10:08Z",
        "updated_at": "2017-01-17T11:22:26Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "active_lock_reason": null,
        "body": "For grammars that have rules with one-child sequence (i.e. delegating to other rules) an optimisation measure will suppress those node from the parser model.\nThis causes problems in semantic analysis as the visitors will not get called.\n\n``` python\ndef qfile():             return ZeroOrMore(entry), EOF\ndef entry():            return header, data\ndef header():           return \"Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\"\ndef data():             return _min, q1, med, mean, q3, _max\ndef number():           return _(r'\\d*\\.\\d*|\\d+')\ndef _min():             return number\ndef q1():               return number\ndef med():              return number\ndef mean():             return number\ndef q3():               return number\ndef _max():             return number\n```\n\nHere `_min, q1, med...` rules are delegating to `number` rule.\nIf we now write visitor method:\n\n``` python\n    def visit_number(self, node, children):\n        return float(node.value)\n```\n\nIf will not get called as the `number` node from the parser model is suppressed.\n\nThis optimisation measure should be controlled with a parser param.\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/23",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/23/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/23/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/23/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/23",
        "id": 113684342,
        "node_id": "MDU6SXNzdWUxMTM2ODQzNDI=",
        "number": 23,
        "title": "Support for infinite loops detection and reporting",
        "user": {
            "login": "igordejanovic",
            "id": 1673425,
            "node_id": "MDQ6VXNlcjE2NzM0MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1673425?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igordejanovic",
            "html_url": "https://github.com/igordejanovic",
            "followers_url": "https://api.github.com/users/igordejanovic/followers",
            "following_url": "https://api.github.com/users/igordejanovic/following{/other_user}",
            "gists_url": "https://api.github.com/users/igordejanovic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igordejanovic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igordejanovic/subscriptions",
            "organizations_url": "https://api.github.com/users/igordejanovic/orgs",
            "repos_url": "https://api.github.com/users/igordejanovic/repos",
            "events_url": "https://api.github.com/users/igordejanovic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igordejanovic/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 17885754,
                "node_id": "MDU6TGFiZWwxNzg4NTc1NA==",
                "url": "https://api.github.com/repos/textX/Arpeggio/labels/enhancement",
                "name": "enhancement",
                "color": "84b6eb",
                "default": true,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2015-10-27T20:41:06Z",
        "updated_at": "2016-05-31T13:59:45Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "active_lock_reason": null,
        "body": "In the case of left recursive grammar Arpeggio will end with `RecursionError`.\nIt would be nice to have a detailed report why that happen and where in the grammar is the left recursive loop.\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/textX/Arpeggio/issues/5",
        "repository_url": "https://api.github.com/repos/textX/Arpeggio",
        "labels_url": "https://api.github.com/repos/textX/Arpeggio/issues/5/labels{/name}",
        "comments_url": "https://api.github.com/repos/textX/Arpeggio/issues/5/comments",
        "events_url": "https://api.github.com/repos/textX/Arpeggio/issues/5/events",
        "html_url": "https://github.com/textX/Arpeggio/issues/5",
        "id": 26290424,
        "node_id": "MDU6SXNzdWUyNjI5MDQyNA==",
        "number": 5,
        "title": "Support for left recursion",
        "user": {
            "login": "igordejanovic",
            "id": 1673425,
            "node_id": "MDQ6VXNlcjE2NzM0MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1673425?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/igordejanovic",
            "html_url": "https://github.com/igordejanovic",
            "followers_url": "https://api.github.com/users/igordejanovic/followers",
            "following_url": "https://api.github.com/users/igordejanovic/following{/other_user}",
            "gists_url": "https://api.github.com/users/igordejanovic/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/igordejanovic/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/igordejanovic/subscriptions",
            "organizations_url": "https://api.github.com/users/igordejanovic/orgs",
            "repos_url": "https://api.github.com/users/igordejanovic/repos",
            "events_url": "https://api.github.com/users/igordejanovic/events{/privacy}",
            "received_events_url": "https://api.github.com/users/igordejanovic/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2014-01-25T10:18:37Z",
        "updated_at": "2014-01-25T10:18:37Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "active_lock_reason": null,
        "body": "",
        "performed_via_github_app": null
    }
]