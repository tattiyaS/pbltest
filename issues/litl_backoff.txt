[
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/108",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/108/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/108/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/108/events",
        "html_url": "https://github.com/litl/backoff/issues/108",
        "id": 722236658,
        "node_id": "MDU6SXNzdWU3MjIyMzY2NTg=",
        "number": 108,
        "title": "Specify exceptions with specific details",
        "user": {
            "login": "deeplook",
            "id": 1001778,
            "node_id": "MDQ6VXNlcjEwMDE3Nzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1001778?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/deeplook",
            "html_url": "https://github.com/deeplook",
            "followers_url": "https://api.github.com/users/deeplook/followers",
            "following_url": "https://api.github.com/users/deeplook/following{/other_user}",
            "gists_url": "https://api.github.com/users/deeplook/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/deeplook/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/deeplook/subscriptions",
            "organizations_url": "https://api.github.com/users/deeplook/orgs",
            "repos_url": "https://api.github.com/users/deeplook/repos",
            "events_url": "https://api.github.com/users/deeplook/events{/privacy}",
            "received_events_url": "https://api.github.com/users/deeplook/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2020-10-15T11:11:52Z",
        "updated_at": "2020-10-16T12:47:03Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "First: very cool/useful package! Thanks!!\r\n\r\nI would like to backoff/retry certain HTTP exceptions like 429, too many requests, but at the moment this isn't possible because there is only a generic `requests.exceptions.HTTPError`. I've looked into `backoff.on_exception()` and it looks like it could be extended to have something like a `details` parameter, maybe a dict with some keys and expected values. Does that sound doable? If so I could give it a try... ",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/107",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/107/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/107/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/107/events",
        "html_url": "https://github.com/litl/backoff/issues/107",
        "id": 722194651,
        "node_id": "MDU6SXNzdWU3MjIxOTQ2NTE=",
        "number": 107,
        "title": "Add install section to README",
        "user": {
            "login": "deeplook",
            "id": 1001778,
            "node_id": "MDQ6VXNlcjEwMDE3Nzg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1001778?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/deeplook",
            "html_url": "https://github.com/deeplook",
            "followers_url": "https://api.github.com/users/deeplook/followers",
            "following_url": "https://api.github.com/users/deeplook/following{/other_user}",
            "gists_url": "https://api.github.com/users/deeplook/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/deeplook/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/deeplook/subscriptions",
            "organizations_url": "https://api.github.com/users/deeplook/orgs",
            "repos_url": "https://api.github.com/users/deeplook/repos",
            "events_url": "https://api.github.com/users/deeplook/events{/privacy}",
            "received_events_url": "https://api.github.com/users/deeplook/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-10-15T10:11:12Z",
        "updated_at": "2020-10-15T10:11:12Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Because it's a standard good practice to tell people how to install something. ;) ",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/105",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/105/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/105/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/105/events",
        "html_url": "https://github.com/litl/backoff/pull/105",
        "id": 704900604,
        "node_id": "MDExOlB1bGxSZXF1ZXN0NDg5NzQwMDE2",
        "number": 105,
        "title": "Add typing information to external API",
        "user": {
            "login": "leonhard-s",
            "id": 35902139,
            "node_id": "MDQ6VXNlcjM1OTAyMTM5",
            "avatar_url": "https://avatars.githubusercontent.com/u/35902139?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/leonhard-s",
            "html_url": "https://github.com/leonhard-s",
            "followers_url": "https://api.github.com/users/leonhard-s/followers",
            "following_url": "https://api.github.com/users/leonhard-s/following{/other_user}",
            "gists_url": "https://api.github.com/users/leonhard-s/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/leonhard-s/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/leonhard-s/subscriptions",
            "organizations_url": "https://api.github.com/users/leonhard-s/orgs",
            "repos_url": "https://api.github.com/users/leonhard-s/repos",
            "events_url": "https://api.github.com/users/leonhard-s/events{/privacy}",
            "received_events_url": "https://api.github.com/users/leonhard-s/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2020-09-19T15:17:38Z",
        "updated_at": "2020-10-08T07:53:44Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/litl/backoff/pulls/105",
            "html_url": "https://github.com/litl/backoff/pull/105",
            "diff_url": "https://github.com/litl/backoff/pull/105.diff",
            "patch_url": "https://github.com/litl/backoff/pull/105.patch"
        },
        "body": "As mentioned in #104, I have had a typed version locally for a while to satisfy my own linters. However my version was using the Python 3.5 type annotation syntax and utilities, which would break the Python 2.7 compatibility of the package. So, I converted them to the Python 2 type comment syntax for this PR.\r\n\r\nNot exactly thrilled about those `try`-block guarded imports, but it is the only way to properly type Python 2 compatible code. Python 2.7 may be end-of-life, but this does not feel worth breaking compatibility over.\r\n\r\nI also only covered the external API, i.e. any methods that are included in `__init__.py`'s `__all__` list. None of the runtime code has been touched, but I also have not validated this draft on versions other than Python 3.8.5 yet.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/104",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/104/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/104/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/104/events",
        "html_url": "https://github.com/litl/backoff/issues/104",
        "id": 703234866,
        "node_id": "MDU6SXNzdWU3MDMyMzQ4NjY=",
        "number": 104,
        "title": "Support for type hints?",
        "user": {
            "login": "edsion1107",
            "id": 1925286,
            "node_id": "MDQ6VXNlcjE5MjUyODY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1925286?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/edsion1107",
            "html_url": "https://github.com/edsion1107",
            "followers_url": "https://api.github.com/users/edsion1107/followers",
            "following_url": "https://api.github.com/users/edsion1107/following{/other_user}",
            "gists_url": "https://api.github.com/users/edsion1107/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/edsion1107/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/edsion1107/subscriptions",
            "organizations_url": "https://api.github.com/users/edsion1107/orgs",
            "repos_url": "https://api.github.com/users/edsion1107/repos",
            "events_url": "https://api.github.com/users/edsion1107/events{/privacy}",
            "received_events_url": "https://api.github.com/users/edsion1107/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2020-09-17T03:26:53Z",
        "updated_at": "2020-12-31T19:46:38Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "\r\n![image](https://user-images.githubusercontent.com/1925286/93416364-4146ba00-f8d8-11ea-96ac-4a5da877c120.png)\r\n\r\nmypy tell me : `Skipping analyzing 'backoff' (19:1)`\u3002\r\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/103",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/103/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/103/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/103/events",
        "html_url": "https://github.com/litl/backoff/pull/103",
        "id": 699504129,
        "node_id": "MDExOlB1bGxSZXF1ZXN0NDg1MjM4NDMw",
        "number": 103,
        "title": "Improve performance of expo by multiplying previous result",
        "user": {
            "login": "whonore",
            "id": 7121530,
            "node_id": "MDQ6VXNlcjcxMjE1MzA=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7121530?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/whonore",
            "html_url": "https://github.com/whonore",
            "followers_url": "https://api.github.com/users/whonore/followers",
            "following_url": "https://api.github.com/users/whonore/following{/other_user}",
            "gists_url": "https://api.github.com/users/whonore/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/whonore/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/whonore/subscriptions",
            "organizations_url": "https://api.github.com/users/whonore/orgs",
            "repos_url": "https://api.github.com/users/whonore/repos",
            "events_url": "https://api.github.com/users/whonore/events{/privacy}",
            "received_events_url": "https://api.github.com/users/whonore/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2020-09-11T16:22:08Z",
        "updated_at": "2020-09-15T17:05:20Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/litl/backoff/pulls/103",
            "html_url": "https://github.com/litl/backoff/pull/103",
            "diff_url": "https://github.com/litl/backoff/pull/103.diff",
            "patch_url": "https://github.com/litl/backoff/pull/103.patch"
        },
        "body": "This computes the exponential by multiplying the previous result by `base` instead of computing it from scratch with `**` each time, which seems to be about an order of magnitude faster. On my machine the following tests report around 2.63 seconds for `expo_old` and 0.10 for `expo_new`.\r\n\r\n```python\r\ndef expo_old(base=2, factor=1, max_value=None):\r\n    n = 0\r\n    while True:\r\n        a = factor * base ** n\r\n        if max_value is None or a < max_value:\r\n            yield a\r\n            n += 1\r\n        else:\r\n            yield max_value\r\n\r\ndef expo_new(base=2, factor=1, max_value=None):\r\n    a = 1\r\n    while True:\r\n        if max_value is None or a < max_value:\r\n            yield factor * a\r\n            a *= base\r\n        else:\r\n            yield max_value\r\n\r\nimport timeit\r\n\r\nfor e in (expo_old(), expo_new()):\r\n    print(timeit.timeit('for i in range(50): next(e)', globals={'e': e}, number=1000))\r\n```",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/102",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/102/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/102/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/102/events",
        "html_url": "https://github.com/litl/backoff/issues/102",
        "id": 695150038,
        "node_id": "MDU6SXNzdWU2OTUxNTAwMzg=",
        "number": 102,
        "title": "Option to use the \"Retry-After\" header",
        "user": {
            "login": "tiptop96",
            "id": 31468763,
            "node_id": "MDQ6VXNlcjMxNDY4NzYz",
            "avatar_url": "https://avatars.githubusercontent.com/u/31468763?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tiptop96",
            "html_url": "https://github.com/tiptop96",
            "followers_url": "https://api.github.com/users/tiptop96/followers",
            "following_url": "https://api.github.com/users/tiptop96/following{/other_user}",
            "gists_url": "https://api.github.com/users/tiptop96/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tiptop96/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tiptop96/subscriptions",
            "organizations_url": "https://api.github.com/users/tiptop96/orgs",
            "repos_url": "https://api.github.com/users/tiptop96/repos",
            "events_url": "https://api.github.com/users/tiptop96/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tiptop96/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2020-09-07T14:19:34Z",
        "updated_at": "2020-09-16T16:09:19Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I think it would be a good idea if we could use the \"Retry-After\" header.\r\n\r\nEither as the `base` arg to `backoff.expo` or just in itself.\r\n\r\nI could create a PR this week if this sounds interesting. ",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/101",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/101/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/101/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/101/events",
        "html_url": "https://github.com/litl/backoff/issues/101",
        "id": 661188624,
        "node_id": "MDU6SXNzdWU2NjExODg2MjQ=",
        "number": 101,
        "title": "Allow conditional on_exception backoff",
        "user": {
            "login": "FichteFoll",
            "id": 931051,
            "node_id": "MDQ6VXNlcjkzMTA1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/931051?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/FichteFoll",
            "html_url": "https://github.com/FichteFoll",
            "followers_url": "https://api.github.com/users/FichteFoll/followers",
            "following_url": "https://api.github.com/users/FichteFoll/following{/other_user}",
            "gists_url": "https://api.github.com/users/FichteFoll/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/FichteFoll/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/FichteFoll/subscriptions",
            "organizations_url": "https://api.github.com/users/FichteFoll/orgs",
            "repos_url": "https://api.github.com/users/FichteFoll/repos",
            "events_url": "https://api.github.com/users/FichteFoll/events{/privacy}",
            "received_events_url": "https://api.github.com/users/FichteFoll/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-07-20T00:07:25Z",
        "updated_at": "2020-07-20T00:07:25Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "For certain exceptions I that need to differentiate by their parameters and not their exception class, I would like to use a different backoff mechanism than for others that use the same exception type.\r\nFor a more concrete example, let's say a function raises `ClientError` and I want to retry fewer times when the exception's argument contains `\"No route to host\"`.\r\n\r\nI suggest to allow providing a callable as the second parameter to `on_exception` that receives the exception. Using multiple decorators, it would then be possible to choose certain options based on the exception details and would allow otherwise more complex exception condition filters. It may or may not be useful to also pass the same details dict as for event handlers.\r\n\r\nThe case of different decorators being hit isn't documented in detail, but I would assume they are simply nested and each decorator tracks its limits individually.\r\n\r\nAlternatively, provide the details dict as an argument to the `giveup` callable, so that it can decide to give up if a certain error string is included and a retry count of n is reached. That would be enough for my use case.\r\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/95",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/95/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/95/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/95/events",
        "html_url": "https://github.com/litl/backoff/issues/95",
        "id": 577456883,
        "node_id": "MDU6SXNzdWU1Nzc0NTY4ODM=",
        "number": 95,
        "title": "Passing the max_tries attribute in function",
        "user": {
            "login": "itsparser",
            "id": 13918750,
            "node_id": "MDQ6VXNlcjEzOTE4NzUw",
            "avatar_url": "https://avatars.githubusercontent.com/u/13918750?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itsparser",
            "html_url": "https://github.com/itsparser",
            "followers_url": "https://api.github.com/users/itsparser/followers",
            "following_url": "https://api.github.com/users/itsparser/following{/other_user}",
            "gists_url": "https://api.github.com/users/itsparser/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itsparser/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itsparser/subscriptions",
            "organizations_url": "https://api.github.com/users/itsparser/orgs",
            "repos_url": "https://api.github.com/users/itsparser/repos",
            "events_url": "https://api.github.com/users/itsparser/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itsparser/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-03-08T07:07:27Z",
        "updated_at": "2020-03-08T07:07:27Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Get the max_tries from the function to get the dynamically from the function ",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/93",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/93/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/93/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/93/events",
        "html_url": "https://github.com/litl/backoff/issues/93",
        "id": 563185935,
        "node_id": "MDU6SXNzdWU1NjMxODU5MzU=",
        "number": 93,
        "title": "Support min_time to override the initial wait ?",
        "user": {
            "login": "stuaxo",
            "id": 179677,
            "node_id": "MDQ6VXNlcjE3OTY3Nw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/179677?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stuaxo",
            "html_url": "https://github.com/stuaxo",
            "followers_url": "https://api.github.com/users/stuaxo/followers",
            "following_url": "https://api.github.com/users/stuaxo/following{/other_user}",
            "gists_url": "https://api.github.com/users/stuaxo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stuaxo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stuaxo/subscriptions",
            "organizations_url": "https://api.github.com/users/stuaxo/orgs",
            "repos_url": "https://api.github.com/users/stuaxo/repos",
            "events_url": "https://api.github.com/users/stuaxo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stuaxo/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-02-11T12:50:57Z",
        "updated_at": "2020-02-11T12:51:07Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "It would be great to have a minimum time to wait, to compliment the max_time.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/92",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/92/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/92/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/92/events",
        "html_url": "https://github.com/litl/backoff/issues/92",
        "id": 562296970,
        "node_id": "MDU6SXNzdWU1NjIyOTY5NzA=",
        "number": 92,
        "title": "Minimum delay",
        "user": {
            "login": "alandtse",
            "id": 7086117,
            "node_id": "MDQ6VXNlcjcwODYxMTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7086117?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alandtse",
            "html_url": "https://github.com/alandtse",
            "followers_url": "https://api.github.com/users/alandtse/followers",
            "following_url": "https://api.github.com/users/alandtse/following{/other_user}",
            "gists_url": "https://api.github.com/users/alandtse/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alandtse/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alandtse/subscriptions",
            "organizations_url": "https://api.github.com/users/alandtse/orgs",
            "repos_url": "https://api.github.com/users/alandtse/repos",
            "events_url": "https://api.github.com/users/alandtse/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alandtse/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-02-10T03:02:31Z",
        "updated_at": "2020-02-10T03:02:31Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Is there a way to specify a minimum delay? For example, we want the first retry to be at 15 seconds and then increase the delay per the formula?\r\n\r\n```python\r\n        a = minimum + factor * base ** n\r\n\r\n```\r\n\r\nIf not, any issue if we add one? I can submit a PR.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/91",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/91/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/91/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/91/events",
        "html_url": "https://github.com/litl/backoff/issues/91",
        "id": 555619402,
        "node_id": "MDU6SXNzdWU1NTU2MTk0MDI=",
        "number": 91,
        "title": "Nesting multiple decorators breaks waiting times",
        "user": {
            "login": "martinvol",
            "id": 698027,
            "node_id": "MDQ6VXNlcjY5ODAyNw==",
            "avatar_url": "https://avatars.githubusercontent.com/u/698027?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/martinvol",
            "html_url": "https://github.com/martinvol",
            "followers_url": "https://api.github.com/users/martinvol/followers",
            "following_url": "https://api.github.com/users/martinvol/following{/other_user}",
            "gists_url": "https://api.github.com/users/martinvol/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/martinvol/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/martinvol/subscriptions",
            "organizations_url": "https://api.github.com/users/martinvol/orgs",
            "repos_url": "https://api.github.com/users/martinvol/repos",
            "events_url": "https://api.github.com/users/martinvol/events{/privacy}",
            "received_events_url": "https://api.github.com/users/martinvol/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2020-01-27T14:40:54Z",
        "updated_at": "2020-01-27T15:25:40Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Look at this simple example and notice the waiting times does not increase as expected:\r\n\r\n```\r\nIn [23]: def backoff_hdlr(details):\r\n    ...:     print (\"Backing off {wait:0.1f} seconds afters {tries} tries \"\r\n    ...:            \"calling function {target} with args {args} and kwargs \"\r\n    ...:            \"{kwargs}\".format(**details))\r\n    ...:\r\n    ...: @backoff.on_exception(backoff.expo, ValueError,on_backoff=backoff_hdlr)\r\n    ...: @backoff.on_exception(backoff.expo, TypeError,on_backoff=backoff_hdlr)\r\n    ...: def get_url(url):\r\n    ...:     raise ValueError\r\n    ...:\r\n    ...: get_url(\"\")\r\nBacking off 0.8 seconds afters 1 tries calling function <function get_url at 0x10a7e2048> with args ('',) and kwargs {}\r\nBacking off 1.3 seconds afters 2 tries calling function <function get_url at 0x10a7e2048> with args ('',) and kwargs {}\r\nBacking off 3.2 seconds afters 3 tries calling function <function get_url at 0x10a7e2048> with args ('',) and kwargs {}\r\nBacking off 0.5 seconds afters 4 tries calling function <function get_url at 0x10a7e2048> with args ('',) and kwargs {}\r\nBacking off 2.6 seconds afters 5 tries calling function <function get_url at 0x10a7e2048> with args ('',) and kwargs {}\r\nBacking off 3.7 seconds afters 6 tries calling function <function get_url at 0x10a7e2048> with args ('',) and kwargs {}\r\nBacking off 2.3 seconds afters 7 tries calling function <function get_url at 0x10a7e2048> with args ('',) and kwargs {}\r\nBacking off 90.7 seconds afters 8 tries calling function <function get_url at 0x10a7e2048> with args ('',) and kwargs {}\r\nBacking off 175.3 seconds afters 9 tries calling function <function get_url at 0x10a7e2048> with args ('',) and kwargs {}\r\nBacking off 146.8 seconds afters 10 tries calling function <function get_url at 0x10a7e2048> with args ('',) and kwargs {}\r\nBacking off 479.5 seconds afters 11 tries calling function <function get_url at 0x10a7e2048> with args ('',) and kwargs {}\r\n```\r\n\r\n(see the 0.5 seconds in the 4th log)\r\n\r\nIf we just leave one exponential backoff now behaves as expected:\r\n\r\n```\r\nIn [25]: def backoff_hdlr(details):\r\n    ...:     print (\"Backing off {wait:0.1f} seconds afters {tries} tries \"\r\n    ...:            \"calling function {target} with args {args} and kwargs \"\r\n    ...:            \"{kwargs}\".format(**details))\r\n    ...:\r\n    ...: @backoff.on_exception(backoff.expo, ValueError,on_backoff=backoff_hdlr)\r\n    ...: def get_url(url):\r\n    ...:     raise ValueError\r\n    ...:\r\n    ...: get_url(\"\")\r\nBacking off 0.2 seconds afters 1 tries calling function <function get_url at 0x10a32d620> with args ('',) and kwargs {}\r\nBacking off 0.2 seconds afters 2 tries calling function <function get_url at 0x10a32d620> with args ('',) and kwargs {}\r\nBacking off 2.1 seconds afters 3 tries calling function <function get_url at 0x10a32d620> with args ('',) and kwargs {}\r\nBacking off 4.8 seconds afters 4 tries calling function <function get_url at 0x10a32d620> with args ('',) and kwargs {}\r\nBacking off 10.5 seconds afters 5 tries calling function <function get_url at 0x10a32d620> with args ('',) and kwargs {}\r\n```\r\n\r\nTested with `backoff ==1.8.1` and saw no relevant changes in the changelog since then.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/90",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/90/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/90/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/90/events",
        "html_url": "https://github.com/litl/backoff/pull/90",
        "id": 536726920,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzUyMjA3NjIx",
        "number": 90,
        "title": "Add on_try callback",
        "user": {
            "login": "bgreen-litl",
            "id": 1483313,
            "node_id": "MDQ6VXNlcjE0ODMzMTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1483313?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bgreen-litl",
            "html_url": "https://github.com/bgreen-litl",
            "followers_url": "https://api.github.com/users/bgreen-litl/followers",
            "following_url": "https://api.github.com/users/bgreen-litl/following{/other_user}",
            "gists_url": "https://api.github.com/users/bgreen-litl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bgreen-litl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bgreen-litl/subscriptions",
            "organizations_url": "https://api.github.com/users/bgreen-litl/orgs",
            "repos_url": "https://api.github.com/users/bgreen-litl/repos",
            "events_url": "https://api.github.com/users/bgreen-litl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bgreen-litl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-12-12T02:55:02Z",
        "updated_at": "2019-12-12T02:55:02Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/litl/backoff/pulls/90",
            "html_url": "https://github.com/litl/backoff/pull/90",
            "diff_url": "https://github.com/litl/backoff/pull/90.diff",
            "patch_url": "https://github.com/litl/backoff/pull/90.patch"
        },
        "body": null,
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/89",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/89/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/89/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/89/events",
        "html_url": "https://github.com/litl/backoff/issues/89",
        "id": 535464160,
        "node_id": "MDU6SXNzdWU1MzU0NjQxNjA=",
        "number": 89,
        "title": "on_attempt callback",
        "user": {
            "login": "AlexHill",
            "id": 1011483,
            "node_id": "MDQ6VXNlcjEwMTE0ODM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1011483?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/AlexHill",
            "html_url": "https://github.com/AlexHill",
            "followers_url": "https://api.github.com/users/AlexHill/followers",
            "following_url": "https://api.github.com/users/AlexHill/following{/other_user}",
            "gists_url": "https://api.github.com/users/AlexHill/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/AlexHill/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/AlexHill/subscriptions",
            "organizations_url": "https://api.github.com/users/AlexHill/orgs",
            "repos_url": "https://api.github.com/users/AlexHill/repos",
            "events_url": "https://api.github.com/users/AlexHill/events{/privacy}",
            "received_events_url": "https://api.github.com/users/AlexHill/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-12-10T03:11:25Z",
        "updated_at": "2019-12-12T03:00:40Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "It would be useful to have an `on_attempt` callback which was called before every invocation of the decorated function - seems like that would complete the callback suite :)\r\n\r\nMy use-case is updating some state (i.e. \"connecting\" / \"waiting\" / \"connected\") that it's not practical to modify from inside my decorated function. if I wasn't using backoff, I would update the state immediately before and after calling my connect function.\r\n\r\nI can make a PR if there's support for this idea!",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/72",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/72/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/72/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/72/events",
        "html_url": "https://github.com/litl/backoff/issues/72",
        "id": 435848646,
        "node_id": "MDU6SXNzdWU0MzU4NDg2NDY=",
        "number": 72,
        "title": "In `on_exception` pass current exception's instance to `on_giveup`",
        "user": {
            "login": "michaeltcoelho",
            "id": 3949827,
            "node_id": "MDQ6VXNlcjM5NDk4Mjc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/3949827?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/michaeltcoelho",
            "html_url": "https://github.com/michaeltcoelho",
            "followers_url": "https://api.github.com/users/michaeltcoelho/followers",
            "following_url": "https://api.github.com/users/michaeltcoelho/following{/other_user}",
            "gists_url": "https://api.github.com/users/michaeltcoelho/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/michaeltcoelho/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/michaeltcoelho/subscriptions",
            "organizations_url": "https://api.github.com/users/michaeltcoelho/orgs",
            "repos_url": "https://api.github.com/users/michaeltcoelho/repos",
            "events_url": "https://api.github.com/users/michaeltcoelho/events{/privacy}",
            "received_events_url": "https://api.github.com/users/michaeltcoelho/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-04-22T19:06:45Z",
        "updated_at": "2019-04-22T19:08:06Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "It would be nice if the current exception being handled in `on_exception` function could pass the exception's instance to the `on_giveup` handler.\r\n\r\nAlso i've noticed that there's only an \"empty\" raise statement after giving up on retrying. Wouldn't it be correct to reraise the current exception's instance itself?\r\n\r\n**When `StopIteration` is raised the exception being handled when calling the decorated function is reraised.\r\n\r\nSnippet with the code i'm talking about:\r\n\r\nhttps://github.com/litl/backoff/blob/229d30adce4128f093550a1761c49594c78df4b4/backoff/_sync.py#L100-L108",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/71",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/71/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/71/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/71/events",
        "html_url": "https://github.com/litl/backoff/issues/71",
        "id": 426151803,
        "node_id": "MDU6SXNzdWU0MjYxNTE4MDM=",
        "number": 71,
        "title": "setting default logger level clobbers existing configuration",
        "user": {
            "login": "seansfkelley",
            "id": 2101409,
            "node_id": "MDQ6VXNlcjIxMDE0MDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2101409?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/seansfkelley",
            "html_url": "https://github.com/seansfkelley",
            "followers_url": "https://api.github.com/users/seansfkelley/followers",
            "following_url": "https://api.github.com/users/seansfkelley/following{/other_user}",
            "gists_url": "https://api.github.com/users/seansfkelley/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/seansfkelley/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/seansfkelley/subscriptions",
            "organizations_url": "https://api.github.com/users/seansfkelley/orgs",
            "repos_url": "https://api.github.com/users/seansfkelley/repos",
            "events_url": "https://api.github.com/users/seansfkelley/events{/privacy}",
            "received_events_url": "https://api.github.com/users/seansfkelley/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-03-27T19:47:18Z",
        "updated_at": "2020-04-03T14:39:40Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I have a project where I configure loggers in the root `__init__.py`:\r\n\r\n```py\r\n# foo-project/foo/__init__.py\r\nimport logging\r\n\r\nlogging.getLogger('backoff').setLevel(logging.FATAL)\r\n```\r\n\r\n```py\r\n# foo-project/foo/bar.py\r\nimport backoff\r\n\r\n@backoff...\r\ndef fn(...):\r\n  pass\r\n```\r\n\r\nHowever, this means that my configuration is overwritten because my `__init__.py` is necessarily imported before `bar.py`, which then imports `backoff` and hits https://github.com/litl/backoff/blob/229d30adce4128f093550a1761c49594c78df4b4/backoff/_common.py#L11-L13\r\n\r\nThere's a workaround in that I can change `__init__.py` to look like\r\n\r\n```py\r\nimport logging\r\nimport backoff # not used here; side-effect trigger logging initialization\r\n\r\nlogging.getLogger('backoff').setLevel(logging.FATAL)\r\n```\r\n\r\nWhich is a little inelegant.\r\n\r\nIs there a way that backoff could be written to respect existing settings of the logger if they exist? This is perhaps also a broader problem with `logging` or idiomatic Python logging patterns; if that is the case feel free the close this out (though if you happen to know any good relevant documents on logging best practices, I'd love to have them -- I wasn't able to find anything better than my workaround above.)",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/54",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/54/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/54/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/54/events",
        "html_url": "https://github.com/litl/backoff/issues/54",
        "id": 328555353,
        "node_id": "MDU6SXNzdWUzMjg1NTUzNTM=",
        "number": 54,
        "title": "Question: Unit Testing a Decorated Function with max_time",
        "user": {
            "login": "fxfitz",
            "id": 6355826,
            "node_id": "MDQ6VXNlcjYzNTU4MjY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6355826?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fxfitz",
            "html_url": "https://github.com/fxfitz",
            "followers_url": "https://api.github.com/users/fxfitz/followers",
            "following_url": "https://api.github.com/users/fxfitz/following{/other_user}",
            "gists_url": "https://api.github.com/users/fxfitz/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fxfitz/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fxfitz/subscriptions",
            "organizations_url": "https://api.github.com/users/fxfitz/orgs",
            "repos_url": "https://api.github.com/users/fxfitz/repos",
            "events_url": "https://api.github.com/users/fxfitz/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fxfitz/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2018-06-01T15:05:19Z",
        "updated_at": "2019-03-31T10:57:10Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I currently have a function that looks like the following:\r\n\r\n```python\r\n@backoff.on_exception(\r\n    backoff.expo,\r\n    RuntimeError,\r\n    max_time=30\r\n)\r\ndef get_rules(url):\r\n    response = requests.get(url)\r\n    if not response.ok:\r\n        msg = 'Unable to get latest rules: HTTP {} {}'.format(\r\n            response.status_code,\r\n            response.reason\r\n\r\n        )\r\n        raise RuntimeError(msg)\r\n\r\n    return response.text\r\n```\r\n\r\nI'm having trouble when unit testing this since now it is retrying for 30 seconds.\r\n\r\nWhat should I mock/monkeypatch so this won't retry for 30 seconds?",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/47",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/47/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/47/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/47/events",
        "html_url": "https://github.com/litl/backoff/issues/47",
        "id": 302911964,
        "node_id": "MDU6SXNzdWUzMDI5MTE5NjQ=",
        "number": 47,
        "title": "Cancel backoff-initiated sleep (for coroutines only)",
        "user": {
            "login": "terrisgit",
            "id": 6069365,
            "node_id": "MDQ6VXNlcjYwNjkzNjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6069365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/terrisgit",
            "html_url": "https://github.com/terrisgit",
            "followers_url": "https://api.github.com/users/terrisgit/followers",
            "following_url": "https://api.github.com/users/terrisgit/following{/other_user}",
            "gists_url": "https://api.github.com/users/terrisgit/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/terrisgit/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/terrisgit/subscriptions",
            "organizations_url": "https://api.github.com/users/terrisgit/orgs",
            "repos_url": "https://api.github.com/users/terrisgit/repos",
            "events_url": "https://api.github.com/users/terrisgit/events{/privacy}",
            "received_events_url": "https://api.github.com/users/terrisgit/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2018-03-06T23:47:40Z",
        "updated_at": "2020-07-20T00:24:47Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "When it comes time to shut down the app, I would like to get a list of all of the asyncio.Task's that are sleeping due to backoff and cancel them (causing the real exceptions - not asyncio.CancelledException - to be raised up the stacks). This is needed when the sleep is for, say, five minutes. And I want this behavior to be conditional based on 'kwargs' passed to the @ backoff 'd function. Perhaps provide access to a global list of (details, Task) tuples that can be iterated through when, say, SIGTERM is intercepted.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/46",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/46/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/46/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/46/events",
        "html_url": "https://github.com/litl/backoff/issues/46",
        "id": 301575648,
        "node_id": "MDU6SXNzdWUzMDE1NzU2NDg=",
        "number": 46,
        "title": "'giveup' needs args and kwargs of the function to be retried",
        "user": {
            "login": "terrisgit",
            "id": 6069365,
            "node_id": "MDQ6VXNlcjYwNjkzNjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/6069365?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/terrisgit",
            "html_url": "https://github.com/terrisgit",
            "followers_url": "https://api.github.com/users/terrisgit/followers",
            "following_url": "https://api.github.com/users/terrisgit/following{/other_user}",
            "gists_url": "https://api.github.com/users/terrisgit/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/terrisgit/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/terrisgit/subscriptions",
            "organizations_url": "https://api.github.com/users/terrisgit/orgs",
            "repos_url": "https://api.github.com/users/terrisgit/repos",
            "events_url": "https://api.github.com/users/terrisgit/events{/privacy}",
            "received_events_url": "https://api.github.com/users/terrisgit/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-03-01T22:00:37Z",
        "updated_at": "2020-12-31T19:52:36Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I have a use case for a 'giveup' function to work conditionally, based on the arguments passed to the function to be retried.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/42",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/42/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/42/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/42/events",
        "html_url": "https://github.com/litl/backoff/issues/42",
        "id": 250624102,
        "node_id": "MDU6SXNzdWUyNTA2MjQxMDI=",
        "number": 42,
        "title": "backoff.expo base",
        "user": {
            "login": "gregroberts",
            "id": 5047021,
            "node_id": "MDQ6VXNlcjUwNDcwMjE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5047021?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gregroberts",
            "html_url": "https://github.com/gregroberts",
            "followers_url": "https://api.github.com/users/gregroberts/followers",
            "following_url": "https://api.github.com/users/gregroberts/following{/other_user}",
            "gists_url": "https://api.github.com/users/gregroberts/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gregroberts/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gregroberts/subscriptions",
            "organizations_url": "https://api.github.com/users/gregroberts/orgs",
            "repos_url": "https://api.github.com/users/gregroberts/repos",
            "events_url": "https://api.github.com/users/gregroberts/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gregroberts/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2017-08-16T13:19:43Z",
        "updated_at": "2020-04-21T14:54:18Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "First off, crackin' little library. Really like the api.\r\n\r\nHowever, in backoff.expo:\r\n\r\nhttps://github.com/litl/backoff/blob/master/backoff/_wait_gen.py#L14\r\n\r\nHaving n=0 means the second attempt will **always** happen only 1 second after the first attempt, regardles of base, factor.\r\n\r\nMy assumption was that base would set the minimum backoff time.\r\n\r\nIs this intended behaviour? To me it seems counter-intuitive to the meaning of the 'base' parameter!\r\n\r\nThis could be addressed in one of two simple ways.\r\n\r\nChange \r\nhttps://github.com/litl/backoff/blob/master/backoff/_wait_gen.py#L14\r\n\r\nto\r\n\r\n    n = 1\r\n\r\nOR\r\n\r\nchange \r\n\r\nhttps://github.com/litl/backoff/blob/master/backoff/_wait_gen.py#L16\r\n\r\nto\r\n\r\n    a = base * factor ** n\r\n\r\n\r\nEither of these changes would mean the minimum retry interval was equal to base, and not 1.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/38",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/38/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/38/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/38/events",
        "html_url": "https://github.com/litl/backoff/issues/38",
        "id": 234825269,
        "node_id": "MDU6SXNzdWUyMzQ4MjUyNjk=",
        "number": 38,
        "title": "Inspect exception or return value in wait_gen (or wait_gen override)",
        "user": {
            "login": "steinitzu",
            "id": 1033963,
            "node_id": "MDQ6VXNlcjEwMzM5NjM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1033963?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/steinitzu",
            "html_url": "https://github.com/steinitzu",
            "followers_url": "https://api.github.com/users/steinitzu/followers",
            "following_url": "https://api.github.com/users/steinitzu/following{/other_user}",
            "gists_url": "https://api.github.com/users/steinitzu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/steinitzu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/steinitzu/subscriptions",
            "organizations_url": "https://api.github.com/users/steinitzu/orgs",
            "repos_url": "https://api.github.com/users/steinitzu/repos",
            "events_url": "https://api.github.com/users/steinitzu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/steinitzu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-06-09T13:22:41Z",
        "updated_at": "2017-06-09T17:45:44Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I wanted to see if there is interest in an API addition to allow users to determine wait time based on exception or return value from the decorated function.  \r\n\r\nOne use case being: You're sending requests to a rate limited API. API blocks your request but is nice enough to include `Retry-After` header in the response.  \r\n`Retry-After` contains the exact number of seconds you should wait before making another request.   \r\n\r\nIf I could access the exception or response somehow before wait time is decided, I could check for this header and if present use its value, otherwise fall back on a `wait_gen`  \r\nUsing any kind of calculated time function is very hit and miss in this scenario and mostly wasteful.   \r\n\r\nI'm thinking about adding an optional `wait_override` argument to the decorators. This would be a function that gets passed the exception (for `backoff.on_exception`) or the retry-able's return value (for `backoff.on_predicate`).  \r\nSo that users can do something like this:  \r\n\r\n```python\r\ndef my_override(exception):\r\n    headers = getattr(e, 'headers', {})\r\n    seconds = headers.get('Retry-After')\r\n    # If None is returned, wait_gen takes over\r\n    return int(seconds) if seconds else None\r\n    \r\n@backoff.on_exception(backoff.expo, HTTPError, wait_override=my_override)    \r\ndef request_thing(url):\r\n    response = do_request(...)    \r\n    response.raise_for_status()\r\n    return response\r\n```",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/36",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/36/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/36/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/36/events",
        "html_url": "https://github.com/litl/backoff/issues/36",
        "id": 233710095,
        "node_id": "MDU6SXNzdWUyMzM3MTAwOTU=",
        "number": 36,
        "title": "Expose conditional backoff",
        "user": {
            "login": "kkirsche",
            "id": 947110,
            "node_id": "MDQ6VXNlcjk0NzExMA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/947110?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kkirsche",
            "html_url": "https://github.com/kkirsche",
            "followers_url": "https://api.github.com/users/kkirsche/followers",
            "following_url": "https://api.github.com/users/kkirsche/following{/other_user}",
            "gists_url": "https://api.github.com/users/kkirsche/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kkirsche/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kkirsche/subscriptions",
            "organizations_url": "https://api.github.com/users/kkirsche/orgs",
            "repos_url": "https://api.github.com/users/kkirsche/repos",
            "events_url": "https://api.github.com/users/kkirsche/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kkirsche/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2017-06-05T21:02:59Z",
        "updated_at": "2017-06-07T13:18:37Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "It would be amazing to expose a conditional backoff API that would allow users creating things like API clients to expose to their end users the option to retry or not",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/19",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/19/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/19/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/19/events",
        "html_url": "https://github.com/litl/backoff/pull/19",
        "id": 183203835,
        "node_id": "MDExOlB1bGxSZXF1ZXN0ODk0ODk5OTY=",
        "number": 19,
        "title": "add common factor for decay",
        "user": {
            "login": "mapix",
            "id": 932699,
            "node_id": "MDQ6VXNlcjkzMjY5OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/932699?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mapix",
            "html_url": "https://github.com/mapix",
            "followers_url": "https://api.github.com/users/mapix/followers",
            "following_url": "https://api.github.com/users/mapix/following{/other_user}",
            "gists_url": "https://api.github.com/users/mapix/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mapix/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mapix/subscriptions",
            "organizations_url": "https://api.github.com/users/mapix/orgs",
            "repos_url": "https://api.github.com/users/mapix/repos",
            "events_url": "https://api.github.com/users/mapix/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mapix/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2016-10-15T11:08:50Z",
        "updated_at": "2016-10-18T13:38:06Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/litl/backoff/pulls/19",
            "html_url": "https://github.com/litl/backoff/pull/19",
            "diff_url": "https://github.com/litl/backoff/pull/19.diff",
            "patch_url": "https://github.com/litl/backoff/pull/19.patch"
        },
        "body": "@bgreen-litl  pls review\n- Add `factor` decorator to control sleep time unit.\n\n```\n>>> x = backoff.on_exception(backoff.fibo, Exception, max_tries=4, jitter=None)(t)\n>>> x()\nBacking off t() 1.0s (Exception: a)\nBacking off t() 1.0s (Exception: a)\nBacking off t() 2.0s (Exception: a)\nGiving up t() after 4 tries (Exception: a)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/vagrant/backoff/backoff.py\", line 302, in retry\n    ret = target(*args, **kwargs)\n  File \"<stdin>\", line 2, in t\nException: a\n>>> x = backoff.on_exception(backoff.factor(backoff.fibo, 0.1), Exception, max_tries=4, jitter=None)(t)\n>>> x()\nBacking off t() 0.1s (Exception: a)\nBacking off t() 0.1s (Exception: a)\nBacking off t() 0.2s (Exception: a)\nGiving up t() after 4 tries (Exception: a)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/vagrant/backoff/backoff.py\", line 302, in retry\n    ret = target(*args, **kwargs)\n  File \"<stdin>\", line 2, in t\nException: a\n```\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/litl/backoff/issues/18",
        "repository_url": "https://api.github.com/repos/litl/backoff",
        "labels_url": "https://api.github.com/repos/litl/backoff/issues/18/labels{/name}",
        "comments_url": "https://api.github.com/repos/litl/backoff/issues/18/comments",
        "events_url": "https://api.github.com/repos/litl/backoff/issues/18/events",
        "html_url": "https://github.com/litl/backoff/issues/18",
        "id": 177574974,
        "node_id": "MDU6SXNzdWUxNzc1NzQ5NzQ=",
        "number": 18,
        "title": "Backoff code inside function",
        "user": {
            "login": "luckydonald",
            "id": 2737108,
            "node_id": "MDQ6VXNlcjI3MzcxMDg=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2737108?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/luckydonald",
            "html_url": "https://github.com/luckydonald",
            "followers_url": "https://api.github.com/users/luckydonald/followers",
            "following_url": "https://api.github.com/users/luckydonald/following{/other_user}",
            "gists_url": "https://api.github.com/users/luckydonald/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/luckydonald/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/luckydonald/subscriptions",
            "organizations_url": "https://api.github.com/users/luckydonald/orgs",
            "repos_url": "https://api.github.com/users/luckydonald/repos",
            "events_url": "https://api.github.com/users/luckydonald/events{/privacy}",
            "received_events_url": "https://api.github.com/users/luckydonald/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 10,
        "created_at": "2016-09-17T13:08:50Z",
        "updated_at": "2020-04-30T19:24:55Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I am calling some functions of a lib i wanna backoff.\r\nProblem is, I cannot modify the lib.\r\n\r\n> ``` python\r\n> import backoff\r\n> from requests.exceptions import TimeoutError\r\n> from somewhere import library\r\n> ```\r\n\r\nSo I am looking for something like:\r\n\r\n``` python\r\nwith backoff.on_exception(backoff.expo, TimeoutError, max_tries=8):\r\n    library.some_function(yada, blah, foo, bar)\r\n# end if\r\n```\r\n\r\nor\r\n\r\n``` python\r\nwhile backoff.on_exception(backoff.expo, TimeoutError, max_tries=8):\r\n    library.some_function(yada, blah, foo, bar)\r\n# end if\r\n```\r\n\r\nNot sure what is possible to do.\r\n\r\n**Edit** (2017-04-27): Calling just one function can be solved like seen [below](#issuecomment-297772840)\r\n",
        "performed_via_github_app": null
    }
]