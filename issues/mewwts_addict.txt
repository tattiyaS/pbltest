[
    {
        "url": "https://api.github.com/repos/mewwts/addict/issues/133",
        "repository_url": "https://api.github.com/repos/mewwts/addict",
        "labels_url": "https://api.github.com/repos/mewwts/addict/issues/133/labels{/name}",
        "comments_url": "https://api.github.com/repos/mewwts/addict/issues/133/comments",
        "events_url": "https://api.github.com/repos/mewwts/addict/issues/133/events",
        "html_url": "https://github.com/mewwts/addict/issues/133",
        "id": 756390302,
        "node_id": "MDU6SXNzdWU3NTYzOTAzMDI=",
        "number": 133,
        "title": "Dict.__missing__ implementation leads to surprising behaviour",
        "user": {
            "login": "hl037",
            "id": 2771764,
            "node_id": "MDQ6VXNlcjI3NzE3NjQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2771764?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hl037",
            "html_url": "https://github.com/hl037",
            "followers_url": "https://api.github.com/users/hl037/followers",
            "following_url": "https://api.github.com/users/hl037/following{/other_user}",
            "gists_url": "https://api.github.com/users/hl037/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hl037/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hl037/subscriptions",
            "organizations_url": "https://api.github.com/users/hl037/orgs",
            "repos_url": "https://api.github.com/users/hl037/repos",
            "events_url": "https://api.github.com/users/hl037/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hl037/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-12-03T17:15:39Z",
        "updated_at": "2020-12-03T17:35:14Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "All the `__parent`, `__key` and `__missing__` implementation details lead to surprising behaviors, like this one : \r\n\r\n```\r\nIn [1]: from addict import Dict\r\n\r\nIn [2]: d = Dict()\r\n\r\nIn [3]: a1 = d.a\r\n\r\nIn [4]: a2 = d.a\r\n\r\nIn [5]: a1.b = 1\r\n\r\nIn [6]: a1.c = 2\r\n\r\nIn [7]: d\r\nOut[7]: {'a': {'b': 1, 'c': 2}}\r\n\r\nIn [8]: a2.d = 3\r\n\r\nIn [9]: d\r\nOut[9]: {'a': {'d': 3}}\r\n\r\nIn [10]: \r\n```\r\n\r\nSince I really enjoy this library, I think it may be a good idea to start a discussion on how we could solve the problem.\r\n\r\nI though about re-implementing `__missing__` with a cache using `weakref.WeakValueDictionary` for \"pending potential child dict\". The Idea is to always return the same instance with `__missing__`, but keeping the current behavior to \"really\" add it only when a nested key is set (with `__setitem__` on the child dict).\r\n\r\nProceeding this way would keep the current behavior of discarding the nested Dict if not used, but avoiding the strange behavior I exposed.\r\n\r\nWhat do you think ? (since I am not a definitive expert with addict, I prefer check with you if there are any stuff I missed, or if there are future plans that would either make this impossible either solve the problem, before implementing it myself)\r\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/mewwts/addict/issues/132",
        "repository_url": "https://api.github.com/repos/mewwts/addict",
        "labels_url": "https://api.github.com/repos/mewwts/addict/issues/132/labels{/name}",
        "comments_url": "https://api.github.com/repos/mewwts/addict/issues/132/comments",
        "events_url": "https://api.github.com/repos/mewwts/addict/issues/132/events",
        "html_url": "https://github.com/mewwts/addict/issues/132",
        "id": 754193624,
        "node_id": "MDU6SXNzdWU3NTQxOTM2MjQ=",
        "number": 132,
        "title": "'function' object has no attribute when using freeze as a field",
        "user": {
            "login": "ethanyanjiali",
            "id": 8679679,
            "node_id": "MDQ6VXNlcjg2Nzk2Nzk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/8679679?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ethanyanjiali",
            "html_url": "https://github.com/ethanyanjiali",
            "followers_url": "https://api.github.com/users/ethanyanjiali/followers",
            "following_url": "https://api.github.com/users/ethanyanjiali/following{/other_user}",
            "gists_url": "https://api.github.com/users/ethanyanjiali/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ethanyanjiali/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ethanyanjiali/subscriptions",
            "organizations_url": "https://api.github.com/users/ethanyanjiali/orgs",
            "repos_url": "https://api.github.com/users/ethanyanjiali/repos",
            "events_url": "https://api.github.com/users/ethanyanjiali/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ethanyanjiali/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-12-01T09:02:13Z",
        "updated_at": "2020-12-01T09:02:13Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "This is a breaking change in 2.4.0 because `freeze` is a function now",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/mewwts/addict/issues/119",
        "repository_url": "https://api.github.com/repos/mewwts/addict",
        "labels_url": "https://api.github.com/repos/mewwts/addict/issues/119/labels{/name}",
        "comments_url": "https://api.github.com/repos/mewwts/addict/issues/119/comments",
        "events_url": "https://api.github.com/repos/mewwts/addict/issues/119/events",
        "html_url": "https://github.com/mewwts/addict/pull/119",
        "id": 571407746,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzgwMjk3NDc4",
        "number": 119,
        "title": "Support nested keys",
        "user": {
            "login": "eevleevs",
            "id": 5012744,
            "node_id": "MDQ6VXNlcjUwMTI3NDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/5012744?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/eevleevs",
            "html_url": "https://github.com/eevleevs",
            "followers_url": "https://api.github.com/users/eevleevs/followers",
            "following_url": "https://api.github.com/users/eevleevs/following{/other_user}",
            "gists_url": "https://api.github.com/users/eevleevs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/eevleevs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/eevleevs/subscriptions",
            "organizations_url": "https://api.github.com/users/eevleevs/orgs",
            "repos_url": "https://api.github.com/users/eevleevs/repos",
            "events_url": "https://api.github.com/users/eevleevs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/eevleevs/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2020-02-26T14:16:05Z",
        "updated_at": "2020-11-21T16:18:44Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/mewwts/addict/pulls/119",
            "html_url": "https://github.com/mewwts/addict/pull/119",
            "diff_url": "https://github.com/mewwts/addict/pull/119.diff",
            "patch_url": "https://github.com/mewwts/addict/pull/119.patch"
        },
        "body": "Allows body['query.filtered.query.match.description']",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/mewwts/addict/issues/117",
        "repository_url": "https://api.github.com/repos/mewwts/addict",
        "labels_url": "https://api.github.com/repos/mewwts/addict/issues/117/labels{/name}",
        "comments_url": "https://api.github.com/repos/mewwts/addict/issues/117/comments",
        "events_url": "https://api.github.com/repos/mewwts/addict/issues/117/events",
        "html_url": "https://github.com/mewwts/addict/issues/117",
        "id": 491722779,
        "node_id": "MDU6SXNzdWU0OTE3MjI3Nzk=",
        "number": 117,
        "title": "nested dict access via a pathing system",
        "user": {
            "login": "RitikShah",
            "id": 20506548,
            "node_id": "MDQ6VXNlcjIwNTA2NTQ4",
            "avatar_url": "https://avatars.githubusercontent.com/u/20506548?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/RitikShah",
            "html_url": "https://github.com/RitikShah",
            "followers_url": "https://api.github.com/users/RitikShah/followers",
            "following_url": "https://api.github.com/users/RitikShah/following{/other_user}",
            "gists_url": "https://api.github.com/users/RitikShah/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/RitikShah/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/RitikShah/subscriptions",
            "organizations_url": "https://api.github.com/users/RitikShah/orgs",
            "repos_url": "https://api.github.com/users/RitikShah/repos",
            "events_url": "https://api.github.com/users/RitikShah/events{/privacy}",
            "received_events_url": "https://api.github.com/users/RitikShah/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-09-10T14:49:33Z",
        "updated_at": "2021-01-07T17:11:06Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "aka: being able to access a nested item via an xpath-esque syntax\r\n\r\n```\r\n>>> from addict import Dict\r\n>>> a = Dict()\r\n>>> a.b.c = 10\r\n>>> a.b.d = 20\r\n>>> a.c.c = 100\r\n>>> a.c.d = 200\r\n>>>\r\n>>> a.search('a/b/c')  # or a.search('a.b.c')\r\n10\r\n>>> a.search('a/b').c = 11\r\n>>> a.b.c\r\n11\r\n>>> a.search('a/b/[cd]')\r\n(11, 20)\r\n>>> a.search('a/b/[cd]', full_path=True)\r\n{a: {b: {c: 11, d: 20}}}\r\n>>> a.search('a/*/c', full_path=True)\r\n{a: {b: {c: 11}, c: {c: 100}}\r\n\r\n```\r\n\r\nThere's a lot more that could be expanded upon this. This is basically like the [dpath](https://github.com/akesterson/dpath-python) library or the [jsonpointer](https://github.com/stefankoegl/python-json-pointer) library but integrated into the library.\r\n\r\nI think this is a good opportunity for a kind of superdict as this as it implements a lot of possibilities. It could be as simple as binding the dpath functions internally making that lib a requirement (eh), or maybe creating an interface akin to that.\r\n\r\nHowever, I realize this is a lot to request (hehe) and probably is more work than warranted (I could try to take a stab at it potentially). Another less extreme idea is just to add simple iterable get and set.\r\nex:\r\n\r\n```\r\n>>> from addict import Dict\r\n>>> a = Dict()\r\n>>> a.b.c = 10\r\n>>> a.get_from(['a', 'b', 'c'])\r\n10\r\n>>> a.set_from(['a', 'b', 'c'], 20)\r\n>>> a.b.c\r\n20\r\n>>> # this functionality can easily be replicated but it uses eval so it's not favorable\r\n>>> path = '.'.join(['a', 'b', 'c'])\r\n>>> eval(f'a.{path}')  # yuck\r\n20\r\n\r\n```\r\n\r\nThese are just a couple ideas I had. I think the first idea might be taking it a lil too far but the latter does fit in with the rest of this class I feel. Just wondering what you thought. I potentially may come with a pull request if I find the time.\r\n\r\nThanks!\r\n~ Ritik Shah ~",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/mewwts/addict/issues/110",
        "repository_url": "https://api.github.com/repos/mewwts/addict",
        "labels_url": "https://api.github.com/repos/mewwts/addict/issues/110/labels{/name}",
        "comments_url": "https://api.github.com/repos/mewwts/addict/issues/110/comments",
        "events_url": "https://api.github.com/repos/mewwts/addict/issues/110/events",
        "html_url": "https://github.com/mewwts/addict/issues/110",
        "id": 412663051,
        "node_id": "MDU6SXNzdWU0MTI2NjMwNTE=",
        "number": 110,
        "title": "Deep setattr and gettattr when attribute names contain '.'",
        "user": {
            "login": "evanjtravis",
            "id": 9142617,
            "node_id": "MDQ6VXNlcjkxNDI2MTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9142617?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/evanjtravis",
            "html_url": "https://github.com/evanjtravis",
            "followers_url": "https://api.github.com/users/evanjtravis/followers",
            "following_url": "https://api.github.com/users/evanjtravis/following{/other_user}",
            "gists_url": "https://api.github.com/users/evanjtravis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/evanjtravis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/evanjtravis/subscriptions",
            "organizations_url": "https://api.github.com/users/evanjtravis/orgs",
            "repos_url": "https://api.github.com/users/evanjtravis/repos",
            "events_url": "https://api.github.com/users/evanjtravis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/evanjtravis/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-02-20T22:40:49Z",
        "updated_at": "2020-09-12T07:15:32Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Would it be possible (prudent?) for the `Dict.__setattr__` and `Dict.__getattr__` functions to be modified to make nested attribute gets/sets when given attribute names that contain periods?\r\n\r\nFor example:\r\n```\r\n>>> from addict import Dict\r\n>>> \r\n>>> d = Dict()\r\n>>> d.date.year = 2019\r\n>>> setattr(d, \"date.month\", \"FEB\")\r\n>>>\r\n>>> d.date.year\r\n2019\r\n>>> getattr(d, \"date.month\")\r\n'FEB'\r\n>>> getattr(d, \"date.year\")\r\n{} # Desired output: 2019\r\n>>> d.date.month\r\n{} # Desired output: 'FEB'\r\n>>>\r\n```",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/mewwts/addict/issues/105",
        "repository_url": "https://api.github.com/repos/mewwts/addict",
        "labels_url": "https://api.github.com/repos/mewwts/addict/issues/105/labels{/name}",
        "comments_url": "https://api.github.com/repos/mewwts/addict/issues/105/comments",
        "events_url": "https://api.github.com/repos/mewwts/addict/issues/105/events",
        "html_url": "https://github.com/mewwts/addict/issues/105",
        "id": 392713857,
        "node_id": "MDU6SXNzdWUzOTI3MTM4NTc=",
        "number": 105,
        "title": "Nested dicts create nested attributes on Dict(), but not on update()",
        "user": {
            "login": "gnudiff",
            "id": 19990504,
            "node_id": "MDQ6VXNlcjE5OTkwNTA0",
            "avatar_url": "https://avatars.githubusercontent.com/u/19990504?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gnudiff",
            "html_url": "https://github.com/gnudiff",
            "followers_url": "https://api.github.com/users/gnudiff/followers",
            "following_url": "https://api.github.com/users/gnudiff/following{/other_user}",
            "gists_url": "https://api.github.com/users/gnudiff/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gnudiff/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gnudiff/subscriptions",
            "organizations_url": "https://api.github.com/users/gnudiff/orgs",
            "repos_url": "https://api.github.com/users/gnudiff/repos",
            "events_url": "https://api.github.com/users/gnudiff/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gnudiff/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2018-12-19T17:53:42Z",
        "updated_at": "2020-11-26T20:15:15Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "pip installed addict 2.2.0 on Python 2.7.12/Ubuntu 16.04.5 LTS\r\n\r\nIf you create Dict() with initial data, all the nested dicts are converted to attributes.\r\nIf you update an existing Dict(), the nested dicts remain dicts and nested attributes are not created.\r\n\r\n[This, by the way, is contrary to what happens with the two analogues AttrDict and EasyDict. Those two, on the other hand, do not support creation of nested attributes on the fly at assignment, like d=Dict() d.a.b.c=1 ]\r\n\r\n```\r\n>>> from addict import Dict\r\n>>> d={'A': 1, 'B': { 'C':2, 'D':3 }}\r\n>>> x=Dict(d)\r\n>>> x.B\r\n{'C': 2, 'D': 3}\r\n>>> x.B.C\r\n2\r\n>>> y=Dict()\r\n>>> y.update(d)\r\n>>> y.B # appears similar\r\n{'C': 2, 'D': 3}\r\n>>> y.B.C\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nAttributeError: 'dict' object has no attribute 'C'\r\n\r\n```",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/mewwts/addict/issues/101",
        "repository_url": "https://api.github.com/repos/mewwts/addict",
        "labels_url": "https://api.github.com/repos/mewwts/addict/issues/101/labels{/name}",
        "comments_url": "https://api.github.com/repos/mewwts/addict/issues/101/comments",
        "events_url": "https://api.github.com/repos/mewwts/addict/issues/101/events",
        "html_url": "https://github.com/mewwts/addict/issues/101",
        "id": 352322739,
        "node_id": "MDU6SXNzdWUzNTIzMjI3Mzk=",
        "number": 101,
        "title": "Attributes lost from Dict child classes",
        "user": {
            "login": "MisterVladimir",
            "id": 9156497,
            "node_id": "MDQ6VXNlcjkxNTY0OTc=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9156497?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MisterVladimir",
            "html_url": "https://github.com/MisterVladimir",
            "followers_url": "https://api.github.com/users/MisterVladimir/followers",
            "following_url": "https://api.github.com/users/MisterVladimir/following{/other_user}",
            "gists_url": "https://api.github.com/users/MisterVladimir/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MisterVladimir/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MisterVladimir/subscriptions",
            "organizations_url": "https://api.github.com/users/MisterVladimir/orgs",
            "repos_url": "https://api.github.com/users/MisterVladimir/repos",
            "events_url": "https://api.github.com/users/MisterVladimir/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MisterVladimir/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 11,
        "created_at": "2018-08-20T22:45:40Z",
        "updated_at": "2019-02-11T07:09:39Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "When I implement my own class that inherits from Dict, I get an error accessing the attributes of the nested items. That is, anything besides the top node does not contain my class' attributes. \r\n\r\nThe class:\r\n\r\n```python\r\nfrom six import string_types\r\nfrom collections import Iterable\r\nfrom addict import Dict\r\n\r\n\r\ndef isiterable(arg):\r\n    # copied from\r\n    # https://stackoverflow.com/questions/1055360/how-to-tell-a-variable-is-iterable-but-not-a-string/44328500#44328500\r\n    return isinstance(arg, Iterable) and not isinstance(arg, string_types)\r\n\r\n\r\nclass IndexedDict(Dict):\r\n    \"\"\"\r\n    Allows setting and getting keys/values by passing in the key index. \r\n\r\n    We cannot use an integer key to set a value to None. The workaround is to\r\n    use a slice:\r\n    >>> d = IndexedDict()\r\n    >>> d['a'] = 0\r\n    >>> d.iloc(slice(1), [None])\r\n    >>> d\r\n    {'a': None}\r\n    \"\"\"\r\n    def _get_with_int(self, key, value):\r\n        return self[key]\r\n\r\n    def _get_with_slice(self, key, value):\r\n        return [self[k] for k in key]\r\n\r\n    def _set_with_int(self, key, value):\r\n        self[key] = value\r\n\r\n    def _set_with_slice(self, key, value):\r\n        for k, v in zip(key, value):\r\n            self[k] = v\r\n\r\n    def iloc(self, i, value=None):\r\n        # throws IndexError if the key has not already been set\r\n        keys = list(self.keys())[i]\r\n        method_dict = {(True, False): self._get_with_int,\r\n                       (True, True): self._get_with_slice,\r\n                       (False, False): self._set_with_int,\r\n                       (False, True): self._set_with_slice}\r\n\r\n        method = method_dict[(value is None, \r\n                              isiterable(keys) and isiterable(value))]\r\n        return method(keys, value)\r\n```\r\n\r\nThe errors come up when I do:\r\n\r\n```python\r\nd = IndexedDict()\r\nd['a']['b']['c'] = 5\r\ntype(d['a']['b']) # returns Dict\r\n# set value of 'c' key to 1\r\n# tries to call iloc() on Dict\r\nd['c'].iloc(0, 1)\r\n```\r\n\r\nI think this can be fixed by changing `__getitem__` to return a instance of `self.__class__` instead of `Dict`.\r\n```python\r\ndef __getitem__(self, name):\r\n    if name not in self:\r\n        return self.__class__(__parent=self, __key=name)\r\n    return super().__getitem__(name)\r\n```\r\nor maybe instead of using the if/then statement in `__getitem__` we could just add a `__missing__` method and get rid of `__getitem__` altogether. Besides the if/then statement, as it stands `Dict`'s `__getitem__` is the same as `dict.__getitem__`\r\n```python\r\ndef __missing__(self, name):\r\n    return self.__class__(__parent=self, __key=name)\r\n```\r\ninstead of \r\n```python\r\ndef __getitem__(self, name):\r\n    if name not in self:\r\n        return Dict(__parent=self, __key=name)\r\n    return super().__getitem__(name)\r\n```\r\n\r\nTo be consistent, I'd also change any references to super(Dict, self) to super() e.g. in `__deepcopy__`.",
        "performed_via_github_app": null
    }
]