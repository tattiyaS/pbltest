[
    {
        "url": "https://api.github.com/repos/simonpercivall/astunparse/issues/59",
        "repository_url": "https://api.github.com/repos/simonpercivall/astunparse",
        "labels_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/59/labels{/name}",
        "comments_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/59/comments",
        "events_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/59/events",
        "html_url": "https://github.com/simonpercivall/astunparse/pull/59",
        "id": 711339674,
        "node_id": "MDExOlB1bGxSZXF1ZXN0NDk1MDExMzk3",
        "number": 59,
        "title": "Use correct write call for FormattedValue",
        "user": {
            "login": "VHellendoorn",
            "id": 1426353,
            "node_id": "MDQ6VXNlcjE0MjYzNTM=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1426353?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/VHellendoorn",
            "html_url": "https://github.com/VHellendoorn",
            "followers_url": "https://api.github.com/users/VHellendoorn/followers",
            "following_url": "https://api.github.com/users/VHellendoorn/following{/other_user}",
            "gists_url": "https://api.github.com/users/VHellendoorn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/VHellendoorn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/VHellendoorn/subscriptions",
            "organizations_url": "https://api.github.com/users/VHellendoorn/orgs",
            "repos_url": "https://api.github.com/users/VHellendoorn/repos",
            "events_url": "https://api.github.com/users/VHellendoorn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/VHellendoorn/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-09-29T18:11:32Z",
        "updated_at": "2020-09-29T18:11:32Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/simonpercivall/astunparse/pulls/59",
            "html_url": "https://github.com/simonpercivall/astunparse/pull/59",
            "diff_url": "https://github.com/simonpercivall/astunparse/pull/59.diff",
            "patch_url": "https://github.com/simonpercivall/astunparse/pull/59.patch"
        },
        "body": "The unparser for formatted values incorrectly referred to `_fstring_JoinedStr`, which expects a `values` property that `FormattedValue`s don't have. This PR updates to the correct call.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/simonpercivall/astunparse/issues/58",
        "repository_url": "https://api.github.com/repos/simonpercivall/astunparse",
        "labels_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/58/labels{/name}",
        "comments_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/58/comments",
        "events_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/58/events",
        "html_url": "https://github.com/simonpercivall/astunparse/issues/58",
        "id": 667625300,
        "node_id": "MDU6SXNzdWU2Njc2MjUzMDA=",
        "number": 58,
        "title": "incorrect escaped string unparse",
        "user": {
            "login": "scgbckbone",
            "id": 25349625,
            "node_id": "MDQ6VXNlcjI1MzQ5NjI1",
            "avatar_url": "https://avatars.githubusercontent.com/u/25349625?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/scgbckbone",
            "html_url": "https://github.com/scgbckbone",
            "followers_url": "https://api.github.com/users/scgbckbone/followers",
            "following_url": "https://api.github.com/users/scgbckbone/following{/other_user}",
            "gists_url": "https://api.github.com/users/scgbckbone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/scgbckbone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scgbckbone/subscriptions",
            "organizations_url": "https://api.github.com/users/scgbckbone/orgs",
            "repos_url": "https://api.github.com/users/scgbckbone/repos",
            "events_url": "https://api.github.com/users/scgbckbone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/scgbckbone/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-07-29T07:42:52Z",
        "updated_at": "2020-07-29T07:42:52Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "create a file with following contents and name it `target.py`:\r\n\r\n```python3\r\nphys_vol_name = \"test123\"\r\nraise RuntimeError(f'Can\\'t find the volume group \"{phys_vol_name}\"')\r\n```\r\n\r\nthen use this script to parse & unparse to create new file `result.py`\r\n```python3\r\nimport ast\r\nimport astunparse\r\n\r\nwith open(\"target.py\", \"r\") as f:\r\n    res = astunparse.unparse(ast.parse(f.read()))\r\n\r\nwith open(\"result.py\", \"w\") as ff:\r\n    ff.write(res)\r\n```\r\n\r\nwhen you run `result.py` you get syntaxt error:\r\n```python3\r\nFile \"result.py\", line 3\r\n    raise RuntimeError(f\"\"\"Can't find the volume group \"{phys_vol_name}\"\"\"\")\r\n                                                                           ^\r\nSyntaxError: EOL while scanning string literal\r\n```",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/simonpercivall/astunparse/issues/57",
        "repository_url": "https://api.github.com/repos/simonpercivall/astunparse",
        "labels_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/57/labels{/name}",
        "comments_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/57/comments",
        "events_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/57/events",
        "html_url": "https://github.com/simonpercivall/astunparse/pull/57",
        "id": 653504171,
        "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ2NDEwMDk1",
        "number": 57,
        "title": "Fix, test and support Python 3.9",
        "user": {
            "login": "hroncok",
            "id": 2401856,
            "node_id": "MDQ6VXNlcjI0MDE4NTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2401856?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hroncok",
            "html_url": "https://github.com/hroncok",
            "followers_url": "https://api.github.com/users/hroncok/followers",
            "following_url": "https://api.github.com/users/hroncok/following{/other_user}",
            "gists_url": "https://api.github.com/users/hroncok/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hroncok/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hroncok/subscriptions",
            "organizations_url": "https://api.github.com/users/hroncok/orgs",
            "repos_url": "https://api.github.com/users/hroncok/repos",
            "events_url": "https://api.github.com/users/hroncok/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hroncok/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-07-08T18:23:10Z",
        "updated_at": "2020-07-09T16:18:00Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/simonpercivall/astunparse/pulls/57",
            "html_url": "https://github.com/simonpercivall/astunparse/pull/57",
            "diff_url": "https://github.com/simonpercivall/astunparse/pull/57.diff",
            "patch_url": "https://github.com/simonpercivall/astunparse/pull/57.patch"
        },
        "body": "Fixes https://github.com/simonpercivall/astunparse/issues/56",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/simonpercivall/astunparse/issues/56",
        "repository_url": "https://api.github.com/repos/simonpercivall/astunparse",
        "labels_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/56/labels{/name}",
        "comments_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/56/comments",
        "events_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/56/events",
        "html_url": "https://github.com/simonpercivall/astunparse/issues/56",
        "id": 633754106,
        "node_id": "MDU6SXNzdWU2MzM3NTQxMDY=",
        "number": 56,
        "title": "Test issues with Python 3.9",
        "user": {
            "login": "hroncok",
            "id": 2401856,
            "node_id": "MDQ6VXNlcjI0MDE4NTY=",
            "avatar_url": "https://avatars.githubusercontent.com/u/2401856?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hroncok",
            "html_url": "https://github.com/hroncok",
            "followers_url": "https://api.github.com/users/hroncok/followers",
            "following_url": "https://api.github.com/users/hroncok/following{/other_user}",
            "gists_url": "https://api.github.com/users/hroncok/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hroncok/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hroncok/subscriptions",
            "organizations_url": "https://api.github.com/users/hroncok/orgs",
            "repos_url": "https://api.github.com/users/hroncok/repos",
            "events_url": "https://api.github.com/users/hroncok/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hroncok/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "simonpercivall",
            "id": 153659,
            "node_id": "MDQ6VXNlcjE1MzY1OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/153659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/simonpercivall",
            "html_url": "https://github.com/simonpercivall",
            "followers_url": "https://api.github.com/users/simonpercivall/followers",
            "following_url": "https://api.github.com/users/simonpercivall/following{/other_user}",
            "gists_url": "https://api.github.com/users/simonpercivall/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/simonpercivall/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/simonpercivall/subscriptions",
            "organizations_url": "https://api.github.com/users/simonpercivall/orgs",
            "repos_url": "https://api.github.com/users/simonpercivall/repos",
            "events_url": "https://api.github.com/users/simonpercivall/events{/privacy}",
            "received_events_url": "https://api.github.com/users/simonpercivall/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "simonpercivall",
                "id": 153659,
                "node_id": "MDQ6VXNlcjE1MzY1OQ==",
                "avatar_url": "https://avatars.githubusercontent.com/u/153659?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/simonpercivall",
                "html_url": "https://github.com/simonpercivall",
                "followers_url": "https://api.github.com/users/simonpercivall/followers",
                "following_url": "https://api.github.com/users/simonpercivall/following{/other_user}",
                "gists_url": "https://api.github.com/users/simonpercivall/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/simonpercivall/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/simonpercivall/subscriptions",
                "organizations_url": "https://api.github.com/users/simonpercivall/orgs",
                "repos_url": "https://api.github.com/users/simonpercivall/repos",
                "events_url": "https://api.github.com/users/simonpercivall/events{/privacy}",
                "received_events_url": "https://api.github.com/users/simonpercivall/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 6,
        "created_at": "2020-06-07T20:53:41Z",
        "updated_at": "2020-07-08T18:25:43Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "body": "Hello. In Fedora development version, we have recently updated to Python 3.9.0b1. Here are some test failures we get w/astunparse:\r\n\r\n```\r\n$ tox -e py39\r\npy39 develop-inst-noop: .../astunparse\r\npy39 installed: -e git://github.com/simonpercivall/astunparse.git@2acce01fcdda2ea32eea835c30ccca21aaff7297#egg=astunparse,coverage==3.7.1,six==1.15.0\r\npy39 run-test-pre: PYTHONHASHSEED='209768785'\r\npy39 run-test: commands[0] | .../astunparse/.tox/py39/bin/python setup.py test\r\nrunning test\r\nWARNING: Testing via this command is deprecated and will be removed in a future version. Users looking for a generic test entry point independent of test runner are encouraged to use tox.\r\nrunning egg_info\r\nwriting lib/astunparse.egg-info/PKG-INFO\r\nwriting dependency_links to lib/astunparse.egg-info/dependency_links.txt\r\nwriting requirements to lib/astunparse.egg-info/requires.txt\r\nwriting top-level names to lib/astunparse.egg-info/top_level.txt\r\nreading manifest file 'lib/astunparse.egg-info/SOURCES.txt'\r\nreading manifest template 'MANIFEST.in'\r\nwriting manifest file 'lib/astunparse.egg-info/SOURCES.txt'\r\nrunning build_ext\r\ntest_annotations (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_async_comp_and_gen_in_async_function (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_async_comprehension (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_async_for (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_async_function_def (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_async_generator_expression (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_async_with (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_async_with_as (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_bytes (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_chained_comparisons (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_class_decorators (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_class_definition (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_complex_f_string (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_del_statement (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_dict_comprehension (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_dict_with_unpacking (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_elifs (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_files (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_for_else (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_formatted_value (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_function_arguments (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_huge_float (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_imaginary_literals (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_import_many (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_integer_parens (tests.test_unparse.UnparseTestCase) ... skipped 'Only works for Python < 3.6'\r\ntest_joined_str (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_joined_str_361 (tests.test_unparse.UnparseTestCase) ... skipped 'Only supported on 3.6.0'\r\ntest_lambda_parentheses (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_min_int27 (tests.test_unparse.UnparseTestCase) ... skipped 'Only works for Python 2'\r\ntest_min_int30 (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_negative_zero (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_nonlocal (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_parser_modes (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_raise_from (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_relative_import (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_repr (tests.test_unparse.UnparseTestCase) ... skipped 'Only for Python 2'\r\ntest_set_comprehension (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_set_literal (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_shifts (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_starred_assignment (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_try_except_finally (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_unary_parens (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_variable_annotation (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_while_else (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_with_as (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_with_simple (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_with_two_items (tests.test_unparse.UnparseTestCase) ... ok\r\ntest_annotations (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_async_comp_and_gen_in_async_function (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_async_comprehension (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_async_for (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_async_function_def (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_async_generator_expression (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_async_with (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_async_with_as (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_bytes (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_chained_comparisons (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_class_decorators (tests.test_dump.DumpTestCase) ... ok\r\ntest_class_definition (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_complex_f_string (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_del_statement (tests.test_dump.DumpTestCase) ... ok\r\ntest_dict_comprehension (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_dict_with_unpacking (tests.test_dump.DumpTestCase) ... ok\r\ntest_elifs (tests.test_dump.DumpTestCase) ... ok\r\ntest_files (tests.test_dump.DumpTestCase) ... ok\r\ntest_for_else (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_formatted_value (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_function_arguments (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_huge_float (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_imaginary_literals (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_import_many (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_integer_parens (tests.test_dump.DumpTestCase) ... skipped 'Only works for Python < 3.6'\r\ntest_joined_str (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_joined_str_361 (tests.test_dump.DumpTestCase) ... skipped 'Only supported on 3.6.0'\r\ntest_lambda_parentheses (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_min_int27 (tests.test_dump.DumpTestCase) ... skipped 'Only works for Python 2'\r\ntest_min_int30 (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_negative_zero (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_nonlocal (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_parser_modes (tests.test_dump.DumpTestCase) ... ok\r\ntest_raise_from (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_relative_import (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_repr (tests.test_dump.DumpTestCase) ... skipped 'Only for Python 2'\r\ntest_set_comprehension (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_set_literal (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_shifts (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_starred_assignment (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_try_except_finally (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_unary_parens (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_variable_annotation (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_while_else (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_with_as (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_with_simple (tests.test_dump.DumpTestCase) ... FAIL\r\ntest_with_two_items (tests.test_dump.DumpTestCase) ... FAIL\r\n\r\n======================================================================\r\nFAIL: test_annotations (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 331, in test_annotations\r\n    self.check_roundtrip(\"def f(a : int): pass\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[113 chars]ad()), type_comment=None)], vararg=None, kwonl[133 chars]=[])\" != \"Modu[113 chars]ad()))], kwonlyargs=[], kw_defaults=[], defaul[56 chars]=[])\"\r\nDiff is 1031 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_async_comp_and_gen_in_async_function (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 356, in test_async_comp_and_gen_in_async_function\r\n    self.check_roundtrip(async_comprehensions_and_generators)\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[84 chars]=[], vararg=None, kwonlyargs=[], kw_defaults=[[1944 chars]=[])\" != \"Modu[84 chars]=[], kwonlyargs=[], kw_defaults=[], defaults=[[1725 chars]=[])\"\r\nDiff is 3952 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_async_comprehension (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 360, in test_async_comprehension\r\n    self.check_roundtrip(\"{i async for i in aiter() if i % 2}\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[247 chars]stant(value=2, kind=None))], is_async=1)]))], type_ignores=[])\" != \"Modu[247 chars]stant(value=2))], is_async=1)]))], type_ignores=[])\"\r\nDiff is 1175 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_async_for (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 418, in test_async_for\r\n    self.check_roundtrip(async_for)\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[71 chars]=[], vararg=None, kwonlyargs=[], kw_defaults=[[262 chars]=[])\" != \"Modu[71 chars]=[], kwonlyargs=[], kw_defaults=[], defaults=[[185 chars]=[])\"\r\nDiff is 704 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_async_function_def (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 414, in test_async_function_def\r\n    self.check_roundtrip(async_function_def)\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[71 chars]=[], vararg=None, kwonlyargs=[], kw_defaults=[[145 chars]=[])\" != \"Modu[71 chars]=[], kwonlyargs=[], kw_defaults=[], defaults=[[87 chars]=[])\"\r\nDiff is 949 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_async_generator_expression (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 366, in test_async_generator_expression\r\n    self.check_roundtrip(\"(i ** 2 async for i in agen())\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[101 chars]lue=2, kind=None)), generators=[comprehension([138 chars]=[])\" != \"Modu[101 chars]lue=2)), generators=[comprehension(target=Name[127 chars]=[])\"\r\n- Module(body=[Expr(value=GeneratorExp(elt=BinOp(left=Name(id='i', ctx=Load()), op=Pow(), right=Constant(value=2, kind=None)), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='agen', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=1)]))], type_ignores=[])\r\n+ Module(body=[Expr(value=GeneratorExp(elt=BinOp(left=Name(id='i', ctx=Load()), op=Pow(), right=Constant(value=2)), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='agen', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=1)]))], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_async_with (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 422, in test_async_with\r\n    self.check_roundtrip(async_with)\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[71 chars]=[], vararg=None, kwonlyargs=[], kw_defaults=[[292 chars]=[])\" != \"Modu[71 chars]=[], kwonlyargs=[], kw_defaults=[], defaults=[[195 chars]=[])\"\r\nDiff is 744 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_async_with_as (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 426, in test_async_with_as\r\n    self.check_roundtrip(async_with_as)\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[71 chars]=[], vararg=None, kwonlyargs=[], kw_defaults=[[313 chars]=[])\" != \"Modu[71 chars]=[], kwonlyargs=[], kw_defaults=[], defaults=[[236 chars]=[])\"\r\nDiff is 806 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_bytes (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 294, in test_bytes\r\n    self.check_roundtrip(\"b'123'\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Module(body=[Expr(value=Constant(value=b'123', kind=None))], type_ignores=[])\" != \"Module(body=[Expr(value=Constant(value=b'123'))], type_ignores=[])\"\r\n- Module(body=[Expr(value=Constant(value=b'123', kind=None))], type_ignores=[])\r\n?                                              -----------\r\n+ Module(body=[Expr(value=Constant(value=b'123'))], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_chained_comparisons (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 261, in test_chained_comparisons\r\n    self.check_roundtrip(\"1 < 4 <= 5\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: 'Modu[44 chars]lue=1, kind=None), ops=[Lt(), LtE()], comparat[81 chars]=[])' != 'Modu[44 chars]lue=1), ops=[Lt(), LtE()], comparators=[Consta[48 chars]=[])'\r\n- Module(body=[Expr(value=Compare(left=Constant(value=1, kind=None), ops=[Lt(), LtE()], comparators=[Constant(value=4, kind=None), Constant(value=5, kind=None)]))], type_ignores=[])\r\n?                                                      -----------                                                   -----------                   -----------\r\n+ Module(body=[Expr(value=Compare(left=Constant(value=1), ops=[Lt(), LtE()], comparators=[Constant(value=4), Constant(value=5)]))], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_class_definition (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 374, in test_class_definition\r\n    self.check_roundtrip(\"class A(metaclass=type, *[], **{}): pass\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[164 chars]word(arg=None, value=Dict(keys=[], values=[]))[51 chars]=[])\" != \"Modu[164 chars]word(value=Dict(keys=[], values=[]))], body=[P[41 chars]=[])\"\r\nDiff is 721 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_complex_f_string (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 327, in test_complex_f_string\r\n    self.check_roundtrip(complex_f_string)\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[51 chars]e='-', kind=None), FormattedValue(value=Joined[519 chars]=[])\" != \"Modu[51 chars]e='-'), FormattedValue(value=JoinedStr(values=[359 chars]=[])\"\r\nDiff is 1095 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_dict_comprehension (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 347, in test_dict_comprehension\r\n    self.check_roundtrip(\"{x: x*x for x in range(10)}\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[269 chars]ue=10, kind=None)], keywords=[]), ifs=[], is_a[25 chars]=[])\" != \"Modu[269 chars]ue=10)], keywords=[]), ifs=[], is_async=0)]))][14 chars]=[])\"\r\nDiff is 1273 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_for_else (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 206, in test_for_else\r\n    self.check_roundtrip(for_else)\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[66 chars]=[], vararg=None, kwonlyargs=[], kw_defaults=[[482 chars]=[])\" != \"Modu[66 chars]=[], kwonlyargs=[], kw_defaults=[], defaults=[[334 chars]=[])\"\r\nDiff is 1063 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_formatted_value (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 298, in test_formatted_value\r\n    self.check_roundtrip('f\"{value}\"')\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[81 chars]oad()), conversion=-1, format_spec=None)]))], type_ignores=[])\" != \"Modu[81 chars]oad()), conversion=-1)]))], type_ignores=[])\"\r\n- Module(body=[Expr(value=JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1, format_spec=None)]))], type_ignores=[])\r\n?                                                                                                           ------------------\r\n+ Module(body=[Expr(value=JoinedStr(values=[FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1)]))], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_function_arguments (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 265, in test_function_arguments\r\n    self.check_roundtrip(\"def f(): pass\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[66 chars]=[], vararg=None, kwonlyargs=[], kw_defaults=[[110 chars]=[])\" != \"Modu[66 chars]=[], kwonlyargs=[], kw_defaults=[], defaults=[[52 chars]=[])\"\r\n- Module(body=[FunctionDef(name='f', args=arguments(posonlyargs=[], args=[], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=[Pass()], decorator_list=[], returns=None, type_comment=None)], type_ignores=[])\r\n?                                                                           -------------                                ------------                                              ---------------------------------\r\n+ Module(body=[FunctionDef(name='f', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[])], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_huge_float (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 223, in test_huge_float\r\n    self.check_roundtrip(\"1e1000\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: 'Module(body=[Expr(value=Constant(value=inf, kind=None))], type_ignores=[])' != 'Module(body=[Expr(value=Constant(value=inf))], type_ignores=[])'\r\n- Module(body=[Expr(value=Constant(value=inf, kind=None))], type_ignores=[])\r\n?                                           -----------\r\n+ Module(body=[Expr(value=Constant(value=inf))], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_imaginary_literals (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 239, in test_imaginary_literals\r\n    self.check_roundtrip(\"7j\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: 'Module(body=[Expr(value=Constant(value=7j, kind=None))], type_ignores=[])' != 'Module(body=[Expr(value=Constant(value=7j))], type_ignores=[])'\r\n- Module(body=[Expr(value=Constant(value=7j, kind=None))], type_ignores=[])\r\n?                                          -----------\r\n+ Module(body=[Expr(value=Constant(value=7j))], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_import_many (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 283, in test_import_many\r\n    self.check_roundtrip(import_many)\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[35 chars]fred', asname=None), alias(name='barney', asna[25 chars]=[])\" != \"Modu[35 chars]fred'), alias(name='barney')])], type_ignores=[])\"\r\n- Module(body=[Import(names=[alias(name='fred', asname=None), alias(name='barney', asname=None)])], type_ignores=[])\r\n?                                             -------------                      -------------\r\n+ Module(body=[Import(names=[alias(name='fred'), alias(name='barney')])], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_joined_str (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 305, in test_joined_str\r\n    self.check_roundtrip('f\"{key}={value!s}\"')\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[95 chars]on=-1, format_spec=None), Constant(value='=', [114 chars]=[])\" != \"Modu[95 chars]on=-1), Constant(value='='), FormattedValue(va[67 chars]=[])\"\r\n- Module(body=[Expr(value=JoinedStr(values=[FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1, format_spec=None), Constant(value='=', kind=None), FormattedValue(value=Name(id='value', ctx=Load()), conversion=115, format_spec=None)]))], type_ignores=[])\r\n+ Module(body=[Expr(value=JoinedStr(values=[FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1), Constant(value='='), FormattedValue(value=Name(id='value', ctx=Load()), conversion=115)]))], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_lambda_parentheses (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 258, in test_lambda_parentheses\r\n    self.check_roundtrip(\"(lambda: int)()\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[72 chars]=[], vararg=None, kwonlyargs=[], kw_defaults=[[100 chars]=[])\" != \"Modu[72 chars]=[], kwonlyargs=[], kw_defaults=[], defaults=[[75 chars]=[])\"\r\n- Module(body=[Expr(value=Call(func=Lambda(args=arguments(posonlyargs=[], args=[], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]), body=Name(id='int', ctx=Load())), args=[], keywords=[]))], type_ignores=[])\r\n?                                                                                 -------------                                ------------\r\n+ Module(body=[Expr(value=Call(func=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='int', ctx=Load())), args=[], keywords=[]))], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_min_int30 (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 235, in test_min_int30\r\n    self.check_roundtrip(str(-2**31))\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: 'Modu[43 chars]and=Constant(value=2147483648, kind=None)))], type_ignores=[])' != 'Modu[43 chars]and=Constant(value=2147483648)))], type_ignores=[])'\r\n- Module(body=[Expr(value=UnaryOp(op=USub(), operand=Constant(value=2147483648, kind=None)))], type_ignores=[])\r\n?                                                                             -----------\r\n+ Module(body=[Expr(value=UnaryOp(op=USub(), operand=Constant(value=2147483648)))], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_negative_zero (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 248, in test_negative_zero\r\n    self.check_roundtrip(\"-0\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: 'Modu[34 chars]b(), operand=Constant(value=0, kind=None)))], type_ignores=[])' != 'Modu[34 chars]b(), operand=Constant(value=0)))], type_ignores=[])'\r\n- Module(body=[Expr(value=UnaryOp(op=USub(), operand=Constant(value=0, kind=None)))], type_ignores=[])\r\n?                                                                    -----------\r\n+ Module(body=[Expr(value=UnaryOp(op=USub(), operand=Constant(value=0)))], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_nonlocal (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 287, in test_nonlocal\r\n    self.check_roundtrip(nonlocal_ex)\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[66 chars]=[], vararg=None, kwonlyargs=[], kw_defaults=[[837 chars]=[])\" != \"Modu[66 chars]=[], kwonlyargs=[], kw_defaults=[], defaults=[[573 chars]=[])\"\r\nDiff is 1657 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_raise_from (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 291, in test_raise_from\r\n    self.check_roundtrip(raise_from)\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[52 chars]lue=1, kind=None), op=Div(), right=Constant(va[234 chars]=[])\" != \"Modu[52 chars]lue=1), op=Div(), right=Constant(value=0)))], [212 chars]=[])\"\r\nDiff is 665 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_relative_import (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 280, in test_relative_import\r\n    self.check_roundtrip(relative_import)\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[15 chars]From(module=None, names=[alias(name='fred', as[201 chars]=[])\" != \"Modu[15 chars]From(names=[alias(name='fred')], level=1), Imp[149 chars]=[])\"\r\n- Module(body=[ImportFrom(module=None, names=[alias(name='fred', asname=None)], level=1), ImportFrom(module=None, names=[alias(name='barney', asname=None)], level=2), ImportFrom(module='australia', names=[alias(name='shrimp', asname='prawns')], level=1)], type_ignores=[])\r\n+ Module(body=[ImportFrom(names=[alias(name='fred')], level=1), ImportFrom(names=[alias(name='barney')], level=2), ImportFrom(module='australia', names=[alias(name='shrimp', asname='prawns')], level=1)], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_set_comprehension (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 343, in test_set_comprehension\r\n    self.check_roundtrip(\"{x for x in range(5)}\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[180 chars]lue=5, kind=None)], keywords=[]), ifs=[], is_a[25 chars]=[])\" != \"Modu[180 chars]lue=5)], keywords=[]), ifs=[], is_async=0)]))][14 chars]=[])\"\r\nDiff is 917 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_set_literal (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 339, in test_set_literal\r\n    self.check_roundtrip(\"{'a', 'b', 'c'}\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[43 chars]e='a', kind=None), Constant(value='b', kind=No[53 chars]=[])\" != \"Modu[43 chars]e='a'), Constant(value='b'), Constant(value='c[20 chars]=[])\"\r\n- Module(body=[Expr(value=Set(elts=[Constant(value='a', kind=None), Constant(value='b', kind=None), Constant(value='c', kind=None)]))], type_ignores=[])\r\n?                                                     -----------                     -----------                     -----------\r\n+ Module(body=[Expr(value=Set(elts=[Constant(value='a'), Constant(value='b'), Constant(value='c')]))], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_shifts (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 202, in test_shifts\r\n    self.check_roundtrip(\"45 << 2\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: 'Modu[43 chars]ue=45, kind=None), op=LShift(), right=Constant[37 chars]=[])' != 'Modu[43 chars]ue=45), op=LShift(), right=Constant(value=2)))[15 chars]=[])'\r\n- Module(body=[Expr(value=BinOp(left=Constant(value=45, kind=None), op=LShift(), right=Constant(value=2, kind=None)))], type_ignores=[])\r\n?                                                     -----------                                      -----------\r\n+ Module(body=[Expr(value=BinOp(left=Constant(value=45), op=LShift(), right=Constant(value=2)))], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_starred_assignment (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 385, in test_starred_assignment\r\n    self.check_roundtrip(\"a, *b, c = seq\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[171 chars]e(id='seq', ctx=Load()), type_comment=None)], type_ignores=[])\" != \"Modu[171 chars]e(id='seq', ctx=Load()))], type_ignores=[])\"\r\nDiff is 895 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_try_except_finally (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 381, in test_try_except_finally\r\n    self.check_roundtrip(try_except_finally)\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[115 chars]()), name=None, body=[Expr(value=Name(id='suit[252 chars]=[])\" != \"Modu[115 chars]()), body=[Expr(value=Name(id='suite2', ctx=Lo[230 chars]=[])\"\r\nDiff is 827 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_unary_parens (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 212, in test_unary_parens\r\n    self.check_roundtrip(\"(-1)**7\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: 'Modu[69 chars]lue=1, kind=None)), op=Pow(), right=Constant(v[35 chars]=[])' != 'Modu[69 chars]lue=1)), op=Pow(), right=Constant(value=7)))],[13 chars]=[])'\r\n- Module(body=[Expr(value=BinOp(left=UnaryOp(op=USub(), operand=Constant(value=1, kind=None)), op=Pow(), right=Constant(value=7, kind=None)))], type_ignores=[])\r\n?                                                                               -----------                                    -----------\r\n+ Module(body=[Expr(value=BinOp(left=UnaryOp(op=USub(), operand=Constant(value=1)), op=Pow(), right=Constant(value=7)))], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_variable_annotation (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 392, in test_variable_annotation\r\n    self.check_roundtrip(\"a: int\")\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[70 chars]d='int', ctx=Load()), value=None, simple=1)], type_ignores=[])\" != \"Modu[70 chars]d='int', ctx=Load()), simple=1)], type_ignores=[])\"\r\n- Module(body=[AnnAssign(target=Name(id='a', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=None, simple=1)], type_ignores=[])\r\n?                                                                                                 ------------\r\n+ Module(body=[AnnAssign(target=Name(id='a', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1)], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_while_else (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 209, in test_while_else\r\n    self.check_roundtrip(while_else)\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[66 chars]=[], vararg=None, kwonlyargs=[], kw_defaults=[[372 chars]=[])\" != \"Modu[66 chars]=[], kwonlyargs=[], kw_defaults=[], defaults=[[243 chars]=[])\"\r\nDiff is 862 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_with_as (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 406, in test_with_as\r\n    self.check_roundtrip(with_as)\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[170 chars]'suite1', ctx=Load()))], type_comment=None)], type_ignores=[])\" != \"Modu[170 chars]'suite1', ctx=Load()))])], type_ignores=[])\"\r\nDiff is 891 characters long. Set self.maxDiff to None to see it.\r\n\r\n======================================================================\r\nFAIL: test_with_simple (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 403, in test_with_simple\r\n    self.check_roundtrip(with_simple)\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[95 chars]s=[]), optional_vars=None)], body=[Expr(value=[66 chars]=[])\" != \"Modu[95 chars]s=[]))], body=[Expr(value=Name(id='suite1', ct[27 chars]=[])\"\r\n- Module(body=[With(items=[withitem(context_expr=Call(func=Name(id='f', ctx=Load()), args=[], keywords=[]), optional_vars=None)], body=[Expr(value=Name(id='suite1', ctx=Load()))], type_comment=None)], type_ignores=[])\r\n?                                                                                                         --------------------                                                    -------------------\r\n+ Module(body=[With(items=[withitem(context_expr=Call(func=Name(id='f', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Name(id='suite1', ctx=Load()))])], type_ignores=[])\r\n\r\n\r\n======================================================================\r\nFAIL: test_with_two_items (tests.test_dump.DumpTestCase)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \".../astunparse/tests/common.py\", line 410, in test_with_two_items\r\n    self.check_roundtrip(with_two_items)\r\n  File \".../astunparse/tests/test_dump.py\", line 24, in check_roundtrip\r\n    self.assertASTEqual(dump1, dump2)\r\n  File \".../astunparse/tests/test_dump.py\", line 18, in assertASTEqual\r\n    self.assertEqual(dump1, dump2)\r\nAssertionError: \"Modu[293 chars]'suite1', ctx=Load()))], type_comment=None)], type_ignores=[])\" != \"Modu[293 chars]'suite1', ctx=Load()))])], type_ignores=[])\"\r\nDiff is 1377 characters long. Set self.maxDiff to None to see it.\r\n\r\n----------------------------------------------------------------------\r\nRan 94 tests in 0.060s\r\n\r\nFAILED (failures=37, skipped=8)\r\nTest failed: <unittest.runner.TextTestResult run=94 errors=0 failures=37>\r\nerror: Test failed: <unittest.runner.TextTestResult run=94 errors=0 failures=37>\r\nERROR: InvocationError for command .../astunparse/.tox/py39/bin/python setup.py test (exited with code 1)\r\n___________________________________ summary ____________________________________\r\nERROR:   py39: commands failed\r\n\r\n```",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/simonpercivall/astunparse/issues/53",
        "repository_url": "https://api.github.com/repos/simonpercivall/astunparse",
        "labels_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/53/labels{/name}",
        "comments_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/53/comments",
        "events_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/53/events",
        "html_url": "https://github.com/simonpercivall/astunparse/pull/53",
        "id": 599934254,
        "node_id": "MDExOlB1bGxSZXF1ZXN0NDAzNDc1MzA5",
        "number": 53,
        "title": "Fix literal attribute access on Python 3.6 and 3.7",
        "user": {
            "login": "hauntsaninja",
            "id": 12621235,
            "node_id": "MDQ6VXNlcjEyNjIxMjM1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12621235?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hauntsaninja",
            "html_url": "https://github.com/hauntsaninja",
            "followers_url": "https://api.github.com/users/hauntsaninja/followers",
            "following_url": "https://api.github.com/users/hauntsaninja/following{/other_user}",
            "gists_url": "https://api.github.com/users/hauntsaninja/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hauntsaninja/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hauntsaninja/subscriptions",
            "organizations_url": "https://api.github.com/users/hauntsaninja/orgs",
            "repos_url": "https://api.github.com/users/hauntsaninja/repos",
            "events_url": "https://api.github.com/users/hauntsaninja/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hauntsaninja/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "simonpercivall",
            "id": 153659,
            "node_id": "MDQ6VXNlcjE1MzY1OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/153659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/simonpercivall",
            "html_url": "https://github.com/simonpercivall",
            "followers_url": "https://api.github.com/users/simonpercivall/followers",
            "following_url": "https://api.github.com/users/simonpercivall/following{/other_user}",
            "gists_url": "https://api.github.com/users/simonpercivall/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/simonpercivall/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/simonpercivall/subscriptions",
            "organizations_url": "https://api.github.com/users/simonpercivall/orgs",
            "repos_url": "https://api.github.com/users/simonpercivall/repos",
            "events_url": "https://api.github.com/users/simonpercivall/events{/privacy}",
            "received_events_url": "https://api.github.com/users/simonpercivall/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "simonpercivall",
                "id": 153659,
                "node_id": "MDQ6VXNlcjE1MzY1OQ==",
                "avatar_url": "https://avatars.githubusercontent.com/u/153659?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/simonpercivall",
                "html_url": "https://github.com/simonpercivall",
                "followers_url": "https://api.github.com/users/simonpercivall/followers",
                "following_url": "https://api.github.com/users/simonpercivall/following{/other_user}",
                "gists_url": "https://api.github.com/users/simonpercivall/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/simonpercivall/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/simonpercivall/subscriptions",
                "organizations_url": "https://api.github.com/users/simonpercivall/orgs",
                "repos_url": "https://api.github.com/users/simonpercivall/repos",
                "events_url": "https://api.github.com/users/simonpercivall/events{/privacy}",
                "received_events_url": "https://api.github.com/users/simonpercivall/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 1,
        "created_at": "2020-04-15T00:14:10Z",
        "updated_at": "2020-07-06T12:28:16Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/simonpercivall/astunparse/pulls/53",
            "html_url": "https://github.com/simonpercivall/astunparse/pull/53",
            "diff_url": "https://github.com/simonpercivall/astunparse/pull/53.diff",
            "patch_url": "https://github.com/simonpercivall/astunparse/pull/53.patch"
        },
        "body": "Fixes #50",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/simonpercivall/astunparse/issues/52",
        "repository_url": "https://api.github.com/repos/simonpercivall/astunparse",
        "labels_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/52/labels{/name}",
        "comments_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/52/comments",
        "events_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/52/events",
        "html_url": "https://github.com/simonpercivall/astunparse/pull/52",
        "id": 599929207,
        "node_id": "MDExOlB1bGxSZXF1ZXN0NDAzNDcxMTMz",
        "number": 52,
        "title": "Add tests for walrus and positional-only args",
        "user": {
            "login": "hauntsaninja",
            "id": 12621235,
            "node_id": "MDQ6VXNlcjEyNjIxMjM1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12621235?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hauntsaninja",
            "html_url": "https://github.com/hauntsaninja",
            "followers_url": "https://api.github.com/users/hauntsaninja/followers",
            "following_url": "https://api.github.com/users/hauntsaninja/following{/other_user}",
            "gists_url": "https://api.github.com/users/hauntsaninja/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hauntsaninja/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hauntsaninja/subscriptions",
            "organizations_url": "https://api.github.com/users/hauntsaninja/orgs",
            "repos_url": "https://api.github.com/users/hauntsaninja/repos",
            "events_url": "https://api.github.com/users/hauntsaninja/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hauntsaninja/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "simonpercivall",
            "id": 153659,
            "node_id": "MDQ6VXNlcjE1MzY1OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/153659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/simonpercivall",
            "html_url": "https://github.com/simonpercivall",
            "followers_url": "https://api.github.com/users/simonpercivall/followers",
            "following_url": "https://api.github.com/users/simonpercivall/following{/other_user}",
            "gists_url": "https://api.github.com/users/simonpercivall/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/simonpercivall/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/simonpercivall/subscriptions",
            "organizations_url": "https://api.github.com/users/simonpercivall/orgs",
            "repos_url": "https://api.github.com/users/simonpercivall/repos",
            "events_url": "https://api.github.com/users/simonpercivall/events{/privacy}",
            "received_events_url": "https://api.github.com/users/simonpercivall/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "simonpercivall",
                "id": 153659,
                "node_id": "MDQ6VXNlcjE1MzY1OQ==",
                "avatar_url": "https://avatars.githubusercontent.com/u/153659?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/simonpercivall",
                "html_url": "https://github.com/simonpercivall",
                "followers_url": "https://api.github.com/users/simonpercivall/followers",
                "following_url": "https://api.github.com/users/simonpercivall/following{/other_user}",
                "gists_url": "https://api.github.com/users/simonpercivall/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/simonpercivall/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/simonpercivall/subscriptions",
                "organizations_url": "https://api.github.com/users/simonpercivall/orgs",
                "repos_url": "https://api.github.com/users/simonpercivall/repos",
                "events_url": "https://api.github.com/users/simonpercivall/events{/privacy}",
                "received_events_url": "https://api.github.com/users/simonpercivall/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-04-14T23:59:46Z",
        "updated_at": "2020-07-06T12:28:31Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/simonpercivall/astunparse/pulls/52",
            "html_url": "https://github.com/simonpercivall/astunparse/pull/52",
            "diff_url": "https://github.com/simonpercivall/astunparse/pull/52.diff",
            "patch_url": "https://github.com/simonpercivall/astunparse/pull/52.patch"
        },
        "body": "The positional-only arg tests are based on those in CPython's master's\r\nLib/test/test_ast.py",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/simonpercivall/astunparse/issues/51",
        "repository_url": "https://api.github.com/repos/simonpercivall/astunparse",
        "labels_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/51/labels{/name}",
        "comments_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/51/comments",
        "events_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/51/events",
        "html_url": "https://github.com/simonpercivall/astunparse/pull/51",
        "id": 599925717,
        "node_id": "MDExOlB1bGxSZXF1ZXN0NDAzNDY4Mjkz",
        "number": 51,
        "title": "Merge in test cases from 3.8",
        "user": {
            "login": "hauntsaninja",
            "id": 12621235,
            "node_id": "MDQ6VXNlcjEyNjIxMjM1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12621235?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hauntsaninja",
            "html_url": "https://github.com/hauntsaninja",
            "followers_url": "https://api.github.com/users/hauntsaninja/followers",
            "following_url": "https://api.github.com/users/hauntsaninja/following{/other_user}",
            "gists_url": "https://api.github.com/users/hauntsaninja/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hauntsaninja/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hauntsaninja/subscriptions",
            "organizations_url": "https://api.github.com/users/hauntsaninja/orgs",
            "repos_url": "https://api.github.com/users/hauntsaninja/repos",
            "events_url": "https://api.github.com/users/hauntsaninja/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hauntsaninja/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "simonpercivall",
            "id": 153659,
            "node_id": "MDQ6VXNlcjE1MzY1OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/153659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/simonpercivall",
            "html_url": "https://github.com/simonpercivall",
            "followers_url": "https://api.github.com/users/simonpercivall/followers",
            "following_url": "https://api.github.com/users/simonpercivall/following{/other_user}",
            "gists_url": "https://api.github.com/users/simonpercivall/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/simonpercivall/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/simonpercivall/subscriptions",
            "organizations_url": "https://api.github.com/users/simonpercivall/orgs",
            "repos_url": "https://api.github.com/users/simonpercivall/repos",
            "events_url": "https://api.github.com/users/simonpercivall/events{/privacy}",
            "received_events_url": "https://api.github.com/users/simonpercivall/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "simonpercivall",
                "id": 153659,
                "node_id": "MDQ6VXNlcjE1MzY1OQ==",
                "avatar_url": "https://avatars.githubusercontent.com/u/153659?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/simonpercivall",
                "html_url": "https://github.com/simonpercivall",
                "followers_url": "https://api.github.com/users/simonpercivall/followers",
                "following_url": "https://api.github.com/users/simonpercivall/following{/other_user}",
                "gists_url": "https://api.github.com/users/simonpercivall/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/simonpercivall/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/simonpercivall/subscriptions",
                "organizations_url": "https://api.github.com/users/simonpercivall/orgs",
                "repos_url": "https://api.github.com/users/simonpercivall/repos",
                "events_url": "https://api.github.com/users/simonpercivall/events{/privacy}",
                "received_events_url": "https://api.github.com/users/simonpercivall/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-04-14T23:48:51Z",
        "updated_at": "2020-07-06T12:28:11Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/simonpercivall/astunparse/pulls/51",
            "html_url": "https://github.com/simonpercivall/astunparse/pull/51",
            "diff_url": "https://github.com/simonpercivall/astunparse/pull/51.diff",
            "patch_url": "https://github.com/simonpercivall/astunparse/pull/51.patch"
        },
        "body": "This ensures that the tests in common.py are a superset of those in\r\n3.8's Lib/test/test_tools/test_unparse.py",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/simonpercivall/astunparse/issues/50",
        "repository_url": "https://api.github.com/repos/simonpercivall/astunparse",
        "labels_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/50/labels{/name}",
        "comments_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/50/comments",
        "events_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/50/events",
        "html_url": "https://github.com/simonpercivall/astunparse/issues/50",
        "id": 599923111,
        "node_id": "MDU6SXNzdWU1OTk5MjMxMTE=",
        "number": 50,
        "title": "Skipped test for Python 3.6 is valid code",
        "user": {
            "login": "hauntsaninja",
            "id": 12621235,
            "node_id": "MDQ6VXNlcjEyNjIxMjM1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12621235?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hauntsaninja",
            "html_url": "https://github.com/hauntsaninja",
            "followers_url": "https://api.github.com/users/hauntsaninja/followers",
            "following_url": "https://api.github.com/users/hauntsaninja/following{/other_user}",
            "gists_url": "https://api.github.com/users/hauntsaninja/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hauntsaninja/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hauntsaninja/subscriptions",
            "organizations_url": "https://api.github.com/users/hauntsaninja/orgs",
            "repos_url": "https://api.github.com/users/hauntsaninja/repos",
            "events_url": "https://api.github.com/users/hauntsaninja/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hauntsaninja/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-04-14T23:40:43Z",
        "updated_at": "2020-04-14T23:40:43Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "This test fails (if you unskip it) for Python 3.6 and 3.7 (but works for Python 3.8, presumably because of ast.Constant changes?)\r\n```\r\n@unittest.skipUnless(sys.version_info < (3, 6), \"Only works for Python < 3.6\")\r\n    def test_integer_parens(self):\r\n        self.check_roundtrip(\"3 .__abs__()\")\r\n```\r\n\r\nThe issue is astunparse doesn't add back in the necessary space:\r\n```\r\nPython 3.6.10 (default, Jan 23 2020, 23:35:52) \r\n[GCC 4.2.1 Compatible Apple LLVM 11.0.0 (clang-1100.0.33.17)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> 3 .__abs__()\r\n3\r\n>>> 3.__abs__()\r\n  File \"<stdin>\", line 1\r\n    3.__abs__()\r\n            ^\r\nSyntaxError: invalid syntax\r\n>>> import ast\r\n>>> import astunparse\r\n>>> astunparse.unparse(ast.parse(\"3 .__abs__()\"))\r\n'\\n3.__abs__()\\n'\r\n```",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/simonpercivall/astunparse/issues/49",
        "repository_url": "https://api.github.com/repos/simonpercivall/astunparse",
        "labels_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/49/labels{/name}",
        "comments_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/49/comments",
        "events_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/49/events",
        "html_url": "https://github.com/simonpercivall/astunparse/pull/49",
        "id": 599915566,
        "node_id": "MDExOlB1bGxSZXF1ZXN0NDAzNDYwMDY3",
        "number": 49,
        "title": "Update README.md to reflect Python 3.8 support",
        "user": {
            "login": "hauntsaninja",
            "id": 12621235,
            "node_id": "MDQ6VXNlcjEyNjIxMjM1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12621235?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hauntsaninja",
            "html_url": "https://github.com/hauntsaninja",
            "followers_url": "https://api.github.com/users/hauntsaninja/followers",
            "following_url": "https://api.github.com/users/hauntsaninja/following{/other_user}",
            "gists_url": "https://api.github.com/users/hauntsaninja/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hauntsaninja/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hauntsaninja/subscriptions",
            "organizations_url": "https://api.github.com/users/hauntsaninja/orgs",
            "repos_url": "https://api.github.com/users/hauntsaninja/repos",
            "events_url": "https://api.github.com/users/hauntsaninja/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hauntsaninja/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "simonpercivall",
            "id": 153659,
            "node_id": "MDQ6VXNlcjE1MzY1OQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/153659?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/simonpercivall",
            "html_url": "https://github.com/simonpercivall",
            "followers_url": "https://api.github.com/users/simonpercivall/followers",
            "following_url": "https://api.github.com/users/simonpercivall/following{/other_user}",
            "gists_url": "https://api.github.com/users/simonpercivall/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/simonpercivall/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/simonpercivall/subscriptions",
            "organizations_url": "https://api.github.com/users/simonpercivall/orgs",
            "repos_url": "https://api.github.com/users/simonpercivall/repos",
            "events_url": "https://api.github.com/users/simonpercivall/events{/privacy}",
            "received_events_url": "https://api.github.com/users/simonpercivall/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "simonpercivall",
                "id": 153659,
                "node_id": "MDQ6VXNlcjE1MzY1OQ==",
                "avatar_url": "https://avatars.githubusercontent.com/u/153659?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/simonpercivall",
                "html_url": "https://github.com/simonpercivall",
                "followers_url": "https://api.github.com/users/simonpercivall/followers",
                "following_url": "https://api.github.com/users/simonpercivall/following{/other_user}",
                "gists_url": "https://api.github.com/users/simonpercivall/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/simonpercivall/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/simonpercivall/subscriptions",
                "organizations_url": "https://api.github.com/users/simonpercivall/orgs",
                "repos_url": "https://api.github.com/users/simonpercivall/repos",
                "events_url": "https://api.github.com/users/simonpercivall/events{/privacy}",
                "received_events_url": "https://api.github.com/users/simonpercivall/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-04-14T23:19:17Z",
        "updated_at": "2020-07-06T12:28:47Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/simonpercivall/astunparse/pulls/49",
            "html_url": "https://github.com/simonpercivall/astunparse/pull/49",
            "diff_url": "https://github.com/simonpercivall/astunparse/pull/49.diff",
            "patch_url": "https://github.com/simonpercivall/astunparse/pull/49.patch"
        },
        "body": "Fixes #48",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/simonpercivall/astunparse/issues/48",
        "repository_url": "https://api.github.com/repos/simonpercivall/astunparse",
        "labels_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/48/labels{/name}",
        "comments_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/48/comments",
        "events_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/48/events",
        "html_url": "https://github.com/simonpercivall/astunparse/issues/48",
        "id": 599914583,
        "node_id": "MDU6SXNzdWU1OTk5MTQ1ODM=",
        "number": 48,
        "title": "Clarify Python version compatibility",
        "user": {
            "login": "hauntsaninja",
            "id": 12621235,
            "node_id": "MDQ6VXNlcjEyNjIxMjM1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12621235?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hauntsaninja",
            "html_url": "https://github.com/hauntsaninja",
            "followers_url": "https://api.github.com/users/hauntsaninja/followers",
            "following_url": "https://api.github.com/users/hauntsaninja/following{/other_user}",
            "gists_url": "https://api.github.com/users/hauntsaninja/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hauntsaninja/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hauntsaninja/subscriptions",
            "organizations_url": "https://api.github.com/users/hauntsaninja/orgs",
            "repos_url": "https://api.github.com/users/hauntsaninja/repos",
            "events_url": "https://api.github.com/users/hauntsaninja/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hauntsaninja/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2020-04-14T23:16:51Z",
        "updated_at": "2020-04-15T00:17:54Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "README mentions support for Python 2.6 through 3.5, however astunparse appears to have Python 3.8 support. I noticed, however, that there don't appear to be any tests for the walrus operator or positional-only args.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/simonpercivall/astunparse/issues/47",
        "repository_url": "https://api.github.com/repos/simonpercivall/astunparse",
        "labels_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/47/labels{/name}",
        "comments_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/47/comments",
        "events_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/47/events",
        "html_url": "https://github.com/simonpercivall/astunparse/issues/47",
        "id": 599911501,
        "node_id": "MDU6SXNzdWU1OTk5MTE1MDE=",
        "number": 47,
        "title": "Better support for docstrings",
        "user": {
            "login": "hauntsaninja",
            "id": 12621235,
            "node_id": "MDQ6VXNlcjEyNjIxMjM1",
            "avatar_url": "https://avatars.githubusercontent.com/u/12621235?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hauntsaninja",
            "html_url": "https://github.com/hauntsaninja",
            "followers_url": "https://api.github.com/users/hauntsaninja/followers",
            "following_url": "https://api.github.com/users/hauntsaninja/following{/other_user}",
            "gists_url": "https://api.github.com/users/hauntsaninja/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hauntsaninja/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hauntsaninja/subscriptions",
            "organizations_url": "https://api.github.com/users/hauntsaninja/orgs",
            "repos_url": "https://api.github.com/users/hauntsaninja/repos",
            "events_url": "https://api.github.com/users/hauntsaninja/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hauntsaninja/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2020-04-14T23:08:29Z",
        "updated_at": "2020-04-15T10:35:55Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Thanks for a useful library!\r\n\r\nastunparse doesn't special case docstrings:\r\n```\r\n>>> print(astunparse.unparse(ast.parse('''def f(): \"\"\"multi\\n    line\\n    docstring\\n    \"\"\" ''')))\r\n\r\ndef f():\r\n    'multi\\n    line\\n    docstring\\n    '\r\n```\r\nwhereas Python 3.9 handles it more idiomatically:\r\n```\r\n>>> print(ast.unparse(ast.parse('''def f(): \"\"\"multi\\n    line\\n    docstring\\n    \"\"\" ''')))\r\n\r\ndef f():\r\n    \"\"\"multi\r\n    line\r\n    docstring\r\n    \"\"\"\r\n```\r\n\r\nNote the implementation in Python 3.9 also handles other issues, like #38, better.\r\n\r\nMore generally, I was wondering if there's a plan to attempt to use the Python 3.9 implementation. Let me know if this is something you want and if you would want help!",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/simonpercivall/astunparse/issues/46",
        "repository_url": "https://api.github.com/repos/simonpercivall/astunparse",
        "labels_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/46/labels{/name}",
        "comments_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/46/comments",
        "events_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/46/events",
        "html_url": "https://github.com/simonpercivall/astunparse/issues/46",
        "id": 567992284,
        "node_id": "MDU6SXNzdWU1Njc5OTIyODQ=",
        "number": 46,
        "title": "JFYI: Looks like this functionality is finally coming to the ast module",
        "user": {
            "login": "Ark-kun",
            "id": 1829149,
            "node_id": "MDQ6VXNlcjE4MjkxNDk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1829149?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Ark-kun",
            "html_url": "https://github.com/Ark-kun",
            "followers_url": "https://api.github.com/users/Ark-kun/followers",
            "following_url": "https://api.github.com/users/Ark-kun/following{/other_user}",
            "gists_url": "https://api.github.com/users/Ark-kun/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Ark-kun/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Ark-kun/subscriptions",
            "organizations_url": "https://api.github.com/users/Ark-kun/orgs",
            "repos_url": "https://api.github.com/users/Ark-kun/repos",
            "events_url": "https://api.github.com/users/Ark-kun/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Ark-kun/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-02-20T01:27:42Z",
        "updated_at": "2020-02-20T01:27:42Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "See https://github.com/python/cpython/pull/17302",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/simonpercivall/astunparse/issues/39",
        "repository_url": "https://api.github.com/repos/simonpercivall/astunparse",
        "labels_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/39/labels{/name}",
        "comments_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/39/comments",
        "events_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/39/events",
        "html_url": "https://github.com/simonpercivall/astunparse/issues/39",
        "id": 490679297,
        "node_id": "MDU6SXNzdWU0OTA2NzkyOTc=",
        "number": 39,
        "title": "--dump flag is broken",
        "user": {
            "login": "pfalcon",
            "id": 500451,
            "node_id": "MDQ6VXNlcjUwMDQ1MQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/500451?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pfalcon",
            "html_url": "https://github.com/pfalcon",
            "followers_url": "https://api.github.com/users/pfalcon/followers",
            "following_url": "https://api.github.com/users/pfalcon/following{/other_user}",
            "gists_url": "https://api.github.com/users/pfalcon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pfalcon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pfalcon/subscriptions",
            "organizations_url": "https://api.github.com/users/pfalcon/orgs",
            "repos_url": "https://api.github.com/users/pfalcon/repos",
            "events_url": "https://api.github.com/users/pfalcon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pfalcon/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-09-07T20:53:12Z",
        "updated_at": "2019-12-22T20:02:31Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "Initial problem starts here:\r\n\r\n~~~\r\n    parser.add_argument(\r\n        '--dump',\r\n        type=bool,\r\n        help=\"Show a pretty-printed AST instead of the source\"\r\n    )\r\n~~~\r\n\r\nIt would rather be `action=\"store_true\"`.\r\n\r\nWorking that around and running as `python3 -m astunparse test.py --dump=True`, with a trivial test.py of `print(1)` leads to the exception below. Because a filename is passed to a function which actually expects an AST tree.\r\n\r\n~~~\r\n$ python3 -m astunparse test.py --dump=True\r\ntest.py\r\n=======\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"/usr/lib/python3.6/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/pfalcon/projects-3rdparty/Python/Python-ast/astunparse/lib/astunparse/__main__.py\", line 48, in <module>\r\n    main(sys.argv[1:])\r\n  File \"/home/pfalcon/projects-3rdparty/Python/Python-ast/astunparse/lib/astunparse/__main__.py\", line 44, in main\r\n    roundtrip_recursive(target, dump_tree=arguments.dump)\r\n  File \"/home/pfalcon/projects-3rdparty/Python/Python-ast/astunparse/lib/astunparse/__main__.py\", line 14, in roundtrip_recursive\r\n    dump(target)\r\n  File \"/home/pfalcon/projects-3rdparty/Python/Python-ast/astunparse/lib/astunparse/__init__.py\", line 19, in dump\r\n    Printer(file=v).visit(tree)\r\n  File \"/home/pfalcon/projects-3rdparty/Python/Python-ast/astunparse/lib/astunparse/printer.py\", line 16, in visit\r\n    super(Printer, self).visit(node)\r\n  File \"/usr/lib/python3.6/ast.py\", line 253, in visit\r\n    return visitor(node)\r\n  File \"/home/pfalcon/projects-3rdparty/Python/Python-ast/astunparse/lib/astunparse/printer.py\", line 30, in generic_visit\r\n    children = [(name + \"=\", value) for name, value in ast.iter_fields(node)]\r\n  File \"/home/pfalcon/projects-3rdparty/Python/Python-ast/astunparse/lib/astunparse/printer.py\", line 30, in <listcomp>\r\n    children = [(name + \"=\", value) for name, value in ast.iter_fields(node)]\r\n  File \"/usr/lib/python3.6/ast.py\", line 171, in iter_fields\r\n    for field in node._fields:\r\nAttributeError: 'str' object has no attribute '_fields'\r\n~~~ \r\n",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/simonpercivall/astunparse/issues/38",
        "repository_url": "https://api.github.com/repos/simonpercivall/astunparse",
        "labels_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/38/labels{/name}",
        "comments_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/38/comments",
        "events_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/38/events",
        "html_url": "https://github.com/simonpercivall/astunparse/issues/38",
        "id": 450109529,
        "node_id": "MDU6SXNzdWU0NTAxMDk1Mjk=",
        "number": 38,
        "title": "extra parens on every expression",
        "user": {
            "login": "belm0",
            "id": 1708631,
            "node_id": "MDQ6VXNlcjE3MDg2MzE=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1708631?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/belm0",
            "html_url": "https://github.com/belm0",
            "followers_url": "https://api.github.com/users/belm0/followers",
            "following_url": "https://api.github.com/users/belm0/following{/other_user}",
            "gists_url": "https://api.github.com/users/belm0/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/belm0/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/belm0/subscriptions",
            "organizations_url": "https://api.github.com/users/belm0/orgs",
            "repos_url": "https://api.github.com/users/belm0/repos",
            "events_url": "https://api.github.com/users/belm0/events{/privacy}",
            "received_events_url": "https://api.github.com/users/belm0/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-05-30T03:11:36Z",
        "updated_at": "2019-05-30T03:11:36Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "body": "I understand the utility doesn't aim to exactly replicate the original source, but having extra parens on every expression is a fairly distracting artifact when looking at unparse output.\r\n\r\nIs astunparse able to deduce when the parens are extraneous?",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/simonpercivall/astunparse/issues/27",
        "repository_url": "https://api.github.com/repos/simonpercivall/astunparse",
        "labels_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/27/labels{/name}",
        "comments_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/27/comments",
        "events_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/27/events",
        "html_url": "https://github.com/simonpercivall/astunparse/pull/27",
        "id": 357524361,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MjEzNTE2NTIz",
        "number": 27,
        "title": "Allow user to specify version_info",
        "user": {
            "login": "dbieber",
            "id": 892765,
            "node_id": "MDQ6VXNlcjg5Mjc2NQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/892765?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dbieber",
            "html_url": "https://github.com/dbieber",
            "followers_url": "https://api.github.com/users/dbieber/followers",
            "following_url": "https://api.github.com/users/dbieber/following{/other_user}",
            "gists_url": "https://api.github.com/users/dbieber/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dbieber/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dbieber/subscriptions",
            "organizations_url": "https://api.github.com/users/dbieber/orgs",
            "repos_url": "https://api.github.com/users/dbieber/repos",
            "events_url": "https://api.github.com/users/dbieber/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dbieber/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-09-06T07:13:23Z",
        "updated_at": "2020-01-15T17:08:49Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/simonpercivall/astunparse/pulls/27",
            "html_url": "https://github.com/simonpercivall/astunparse/pull/27",
            "diff_url": "https://github.com/simonpercivall/astunparse/pull/27.diff",
            "patch_url": "https://github.com/simonpercivall/astunparse/pull/27.patch"
        },
        "body": "Allow user to specify version_info rather than assuming AST version matches the current Python version. This is useful if the user is using e.g. gast to get a different AST version from the Python version they are using.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/simonpercivall/astunparse/issues/23",
        "repository_url": "https://api.github.com/repos/simonpercivall/astunparse",
        "labels_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/23/labels{/name}",
        "comments_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/23/comments",
        "events_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/23/events",
        "html_url": "https://github.com/simonpercivall/astunparse/pull/23",
        "id": 299884972,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MTcxMTQyNjQ2",
        "number": 23,
        "title": "Use __class__.__name__ for boolops lookup",
        "user": {
            "login": "dbieber",
            "id": 892765,
            "node_id": "MDQ6VXNlcjg5Mjc2NQ==",
            "avatar_url": "https://avatars.githubusercontent.com/u/892765?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dbieber",
            "html_url": "https://github.com/dbieber",
            "followers_url": "https://api.github.com/users/dbieber/followers",
            "following_url": "https://api.github.com/users/dbieber/following{/other_user}",
            "gists_url": "https://api.github.com/users/dbieber/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dbieber/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dbieber/subscriptions",
            "organizations_url": "https://api.github.com/users/dbieber/orgs",
            "repos_url": "https://api.github.com/users/dbieber/repos",
            "events_url": "https://api.github.com/users/dbieber/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dbieber/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-02-23T23:44:33Z",
        "updated_at": "2018-10-01T01:09:29Z",
        "closed_at": null,
        "author_association": "NONE",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/simonpercivall/astunparse/pulls/23",
            "html_url": "https://github.com/simonpercivall/astunparse/pull/23",
            "diff_url": "https://github.com/simonpercivall/astunparse/pull/23.diff",
            "patch_url": "https://github.com/simonpercivall/astunparse/pull/23.patch"
        },
        "body": "cmpops, binops, and unops already used this technique, but boolops did not.\r\nThe reason this technique is preferred to using __class__ for the lookup is that when working with e.g. gast (a cross version compatible AST) the exact type match required by the __class__ lookup fails (since gast.And != ast.And), whereas the name based lookup works fine.",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/simonpercivall/astunparse/issues/22",
        "repository_url": "https://api.github.com/repos/simonpercivall/astunparse",
        "labels_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/22/labels{/name}",
        "comments_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/22/comments",
        "events_url": "https://api.github.com/repos/simonpercivall/astunparse/issues/22/events",
        "html_url": "https://github.com/simonpercivall/astunparse/pull/22",
        "id": 233846782,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MTI0MTU3NDU0",
        "number": 22,
        "title": "test on typed_ast",
        "user": {
            "login": "graingert",
            "id": 413772,
            "node_id": "MDQ6VXNlcjQxMzc3Mg==",
            "avatar_url": "https://avatars.githubusercontent.com/u/413772?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/graingert",
            "html_url": "https://github.com/graingert",
            "followers_url": "https://api.github.com/users/graingert/followers",
            "following_url": "https://api.github.com/users/graingert/following{/other_user}",
            "gists_url": "https://api.github.com/users/graingert/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/graingert/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/graingert/subscriptions",
            "organizations_url": "https://api.github.com/users/graingert/orgs",
            "repos_url": "https://api.github.com/users/graingert/repos",
            "events_url": "https://api.github.com/users/graingert/events{/privacy}",
            "received_events_url": "https://api.github.com/users/graingert/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2017-06-06T10:27:44Z",
        "updated_at": "2017-06-06T10:41:58Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "active_lock_reason": null,
        "pull_request": {
            "url": "https://api.github.com/repos/simonpercivall/astunparse/pulls/22",
            "html_url": "https://github.com/simonpercivall/astunparse/pull/22",
            "diff_url": "https://github.com/simonpercivall/astunparse/pull/22.diff",
            "patch_url": "https://github.com/simonpercivall/astunparse/pull/22.patch"
        },
        "body": null,
        "performed_via_github_app": null
    }
]